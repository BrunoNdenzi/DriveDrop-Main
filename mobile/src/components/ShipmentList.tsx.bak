import React from 'react';
import {
  StyleSheet,
  View,
  Text,
  FlatList,
  TouchableOpacity,
  RefreshControl,
} from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import { Colors } from '../constants/Colors';

// Define the types needed for our component
interface Driver {
  id: string;
  first_name: string;
  last_name: string;
  email: string;
  phone?: string;
  avatar_url?: string;
  rating?: number;
}

interface Application {
  id: string;
  driver_id: string;
  shipment_id: string;
  status: 'pending' | 'accepted' | 'rejected';
  applied_at: string;
  updated_at: string | null;
  driver?: Driver;
}

interface Shipment {
  id: string;
  title: string;
  description?: string;
  pickup_address: string;
  delivery_address: string;
  status: string;
  created_at: string;
  client_id: string;
  driver_id: string | null;
  estimated_price: number;
  applications?: Application[];
  expandedApplications?: boolean;
}

interface ShipmentListProps {
  shipments: Shipment[];
  refreshing: boolean;
  onRefresh: () => Promise<void>;
  onToggleApplications: (shipmentId: string) => void;
  onConfirmAssignment: (
    shipmentId: string,
    driverId: string,
    driverName: string
  ) => void;
  onOpenQuickAssignModal: (shipmentId: string) => void;
}

/**
 * ShipmentList component for displaying shipments in the Admin Assignment screen
 * Extracted as part of T003 refactoring to reduce component complexity
 */
const ShipmentList: React.FC<ShipmentListProps> = ({
  shipments,
  refreshing,
  onRefresh,
  onToggleApplications,
  onConfirmAssignment,
  onOpenQuickAssignModal,
}) => {
  const renderShipmentItem = ({ item }: { item: Shipment }) => {
    const hasApplications = item.applications && item.applications.length > 0;

    return (
      <View style={styles.shipmentCard}>
        <View style={styles.shipmentHeader}>
          <Text style={styles.shipmentTitle}>
            {item.title || `Shipment #${item.id.substring(0, 8)}`}
          </Text>
          <View style={styles.priceBadge}>
            <Text style={styles.priceText}>${item.estimated_price}</Text>
          </View>
        </View>

        <View style={styles.shipmentDetails}>
          <View style={styles.detailRow}>
            <MaterialIcons
              name="location-on"
              size={16}
              color={Colors.primary}
            />
            <Text style={styles.detailText}>{item.pickup_address}</Text>
          </View>
          <View style={styles.detailRow}>
            <MaterialIcons name="flag" size={16} color={Colors.secondary} />
            <Text style={styles.detailText}>{item.delivery_address}</Text>
          </View>
          {item.description && (
            <View style={styles.detailRow}>
              <MaterialIcons
                name="info"
                size={16}
                color={Colors.text.secondary}
              />
              <Text style={styles.detailText}>{item.description}</Text>
            </View>
          )}
          <View style={styles.detailRow}>
            <MaterialIcons
              name="event"
              size={16}
              color={Colors.text.secondary}
            />
            <Text style={styles.detailText}>
              {new Date(item.created_at).toLocaleDateString()} • Pending
            </Text>
          </View>
        </View>

        <View style={styles.applicantsSection}>
          <TouchableOpacity
            style={styles.applicantsToggle}
            onPress={() => onToggleApplications(item.id)}
          >
            <Text
              style={[
                styles.applicantsToggleText,
                !hasApplications && styles.applicantsToggleTextDisabled,
              ]}
            >
              {hasApplications
                ? `${item.applications!.length} Driver Application${item.applications!.length !== 1 ? 's' : ''}`
                : 'No Applications Yet'}
            </Text>
            <MaterialIcons
              name={item.expandedApplications ? 'expand-less' : 'expand-more'}
              size={24}
              color={Colors.primary}
            />
          </TouchableOpacity>

          {item.expandedApplications && (
            <View style={styles.applicantsList}>
              {hasApplications ? (
                (() => {
                  // Filter pending applications to show first
                  const pendingApplications = item.applications!.filter(
                    app => app.status === 'pending'
                  );
                  const otherApplications = item.applications!.filter(
                    app => app.status !== 'pending'
                  );

                  // Combine arrays with pending first
                  const sortedApplications = [
                    ...pendingApplications,
                    ...otherApplications,
                  ];

                  return sortedApplications.map(application => (
                    <View key={application.id} style={styles.applicantItem}>
                      <View style={styles.applicantInfo}>
                        <View style={styles.applicantAvatar}>
                          {application.driver?.avatar_url ? (
                            <Text>Avatar</Text> // Replace with actual Avatar component if available
                          ) : (
                            <Text style={styles.avatarText}>
                              {application.driver?.first_name
                                ?.charAt(0)
                                .toUpperCase() || 'D'}
                            </Text>
                          )}
                        </View>
                        <View style={styles.applicantDetails}>
                          <Text style={styles.applicantName}>
                            {application.driver
                              ? `${application.driver.first_name} ${application.driver.last_name}`
                              : `Driver ID: ${application.driver_id.substring(0, 8)}...`}
                          </Text>
                          <View style={styles.statusRow}>
                            <Text style={styles.applicantMeta}>
                              Applied:{' '}
                              {new Date(
                                application.applied_at
                              ).toLocaleDateString()}
                            </Text>
                            <View
                              style={[
                                styles.statusBadge,
                                {
                                  backgroundColor:
                                    application.status === 'pending'
                                      ? Colors.warning
                                      : Colors.text.disabled,
                                },
                              ]}
                            >
                              <Text style={styles.statusText}>
                                {application.status}
                              </Text>
                            </View>
                          </View>
                          {application.driver?.rating && (
                            <View style={styles.ratingContainer}>
                              <MaterialIcons
                                name="star"
                                size={16}
                                color={Colors.warning}
                              />
                              <Text style={styles.ratingText}>
                                {application.driver.rating.toFixed(1)}
                              </Text>
                            </View>
                          )}
                        </View>
                      </View>
                      <TouchableOpacity
                        style={[
                          styles.assignButton,
                          application.status !== 'pending' &&
                            styles.disabledButton,
                        ]}
                        onPress={() =>
                          onConfirmAssignment(
                            item.id,
                            application.driver_id,
                            application.driver
                              ? `${application.driver.first_name} ${application.driver.last_name}`
                              : `Driver ID: ${application.driver_id.substring(0, 8)}...`
                          )
                        }
                        disabled={application.status !== 'pending'}
                      >
                        <Text style={styles.assignButtonText}>Assign</Text>
                      </TouchableOpacity>
                    </View>
                  ));
                })()
              ) : (
                <View style={styles.noApplicationsContainer}>
                  <MaterialIcons
                    name="person-search"
                    size={48}
                    color={Colors.text.disabled}
                  />
                  <Text style={styles.noApplicationsText}>
                    No driver applications yet.
                  </Text>
                  <Text style={styles.noApplicationsSubText}>
                    Drivers will appear here once they apply for this shipment.
                  </Text>
                  <TouchableOpacity
                    style={styles.quickAssignButton}
                    onPress={() => onOpenQuickAssignModal(item.id)}
                  >
                    <MaterialIcons
                      name="person-add"
                      size={20}
                      color={Colors.white}
                    />
                    <Text style={styles.quickAssignButtonText}>
                      Quick Assign
                    </Text>
                  </TouchableOpacity>
                </View>
              )}
            </View>
          )}
        </View>
      </View>
    );
  };

  return (
    <FlatList
      data={shipments}
      renderItem={renderShipmentItem}
      keyExtractor={item => item.id}
      contentContainerStyle={styles.listContent}
      refreshControl={
        <RefreshControl
          refreshing={refreshing}
          onRefresh={onRefresh}
          colors={[Colors.primary]}
        />
      }
      ListEmptyComponent={
        <View style={styles.emptyContainer}>
          <MaterialIcons
            name="assignment"
            size={64}
            color={Colors.text.disabled}
          />
          <Text style={styles.emptyTitle}>No Pending Shipments</Text>
          <Text style={styles.emptyText}>
            There are currently no shipments pending driver assignment.
          </Text>
        </View>
      }
    />
  );
};

const styles = StyleSheet.create({
  listContent: {
    padding: 16,
  },
  shipmentCard: {
    backgroundColor: Colors.surface,
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: Colors.black,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  shipmentHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  shipmentTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: Colors.text.primary,
    flex: 1,
    marginRight: 8,
  },
  priceBadge: {
    backgroundColor: Colors.success,
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 6,
  },
  priceText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: Colors.text.inverse,
  },
  shipmentDetails: {
    marginBottom: 16,
  },
  detailRow: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  detailText: {
    fontSize: 14,
    color: Colors.text.secondary,
    marginLeft: 8,
    flex: 1,
  },
  applicantsSection: {
    borderTopWidth: 1,
    borderTopColor: Colors.border,
    paddingTop: 12,
  },
  applicantsToggle: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
  },
  applicantsToggleText: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.primary,
  },
  applicantsToggleTextDisabled: {
    color: Colors.text.disabled,
  },
  applicantsList: {
    marginTop: 8,
  },
  applicantItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
  },
  applicantInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  applicantAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: Colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  avatarText: {
    color: Colors.text.inverse,
    fontSize: 16,
    fontWeight: 'bold',
  },
  applicantDetails: {
    flex: 1,
  },
  applicantName: {
    fontSize: 16,
    fontWeight: '600',
    color: Colors.text.primary,
    marginBottom: 2,
  },
  applicantMeta: {
    fontSize: 14,
    color: Colors.text.secondary,
    marginBottom: 2,
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  ratingText: {
    marginLeft: 4,
    fontSize: 14,
    color: Colors.text.primary,
    fontWeight: '600',
  },
  assignButton: {
    backgroundColor: Colors.primary,
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
  },
  assignButtonText: {
    color: Colors.text.inverse,
    fontWeight: '600',
    fontSize: 14,
  },
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 40,
  },
  emptyTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.text.primary,
    marginTop: 16,
    marginBottom: 8,
  },
  emptyText: {
    fontSize: 14,
    color: Colors.text.secondary,
    textAlign: 'center',
  },
  statusRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 2,
  },
  statusBadge: {
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
  },
  statusText: {
    fontSize: 12,
    color: Colors.text.inverse,
    fontWeight: '500',
  },
  disabledButton: {
    backgroundColor: Colors.text.disabled,
  },
  noApplicationsContainer: {
    padding: 24,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: Colors.background,
    borderRadius: 8,
    margin: 8,
  },
  noApplicationsText: {
    fontSize: 16,
    fontWeight: '500',
    color: Colors.text.secondary,
    textAlign: 'center',
    marginTop: 12,
    marginBottom: 4,
  },
  noApplicationsSubText: {
    fontSize: 14,
    color: Colors.text.disabled,
    textAlign: 'center',
    paddingHorizontal: 20,
  },
  quickAssignButton: {
    backgroundColor: Colors.primary,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 6,
    marginTop: 16,
  },
  quickAssignButtonText: {
    color: Colors.text.inverse,
    fontWeight: '600',
    fontSize: 14,
    marginLeft: 4,
  },
});

export default ShipmentList;
