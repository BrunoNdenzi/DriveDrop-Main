yarn run v1.22.22
$ eslint . --ext .ts,.tsx --max-warnings 0 --format json
[{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/app.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/integration-test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/scripts/verify-env.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/scripts/verify-mobile-env.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/Card.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":29,"column":14,"nodeType":"ObjectExpression","endLine":39,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { StyleSheet, Text, View, ViewStyle, TextStyle } from 'react-native';\nimport { Colors } from '../constants/Colors';\n\ninterface CardProps {\n  title?: string;\n  children: React.ReactNode;\n  style?: ViewStyle;\n  titleStyle?: TextStyle;\n  contentStyle?: ViewStyle;\n}\n\nexport function Card({\n  title,\n  children,\n  style,\n  titleStyle,\n  contentStyle,\n}: CardProps) {\n  return (\n    <View style={[styles.container, style]}>\n      {title && <Text style={[styles.title, titleStyle]}>{title}</Text>}\n      <View style={[styles.content, contentStyle]}>{children}</View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    marginVertical: 8,\n    overflow: 'hidden',\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  content: {\n    padding: 16,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/Loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/PaymentPolicyCard.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#FFFFFF', shadowColor: '#000' }","line":87,"column":14,"nodeType":"ObjectExpression","endLine":97,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":126,"column":15,"nodeType":"ObjectExpression","endLine":130,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#F8F9FA' }","line":157,"column":18,"nodeType":"ObjectExpression","endLine":162,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Colors } from '../constants/Colors';\n\ninterface PaymentPolicyCardProps {\n  totalAmount: number;\n  showDetailed?: boolean;\n}\n\nexport const PaymentPolicyCard: React.FC<PaymentPolicyCardProps> = ({\n  totalAmount,\n  showDetailed = false,\n}) => {\n  const initialAmount = Math.round(totalAmount * 0.2);\n  const finalAmount = totalAmount - initialAmount;\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <MaterialIcons name=\"payment\" size={20} color={Colors.primary} />\n        <Text style={styles.title}>Payment Policy</Text>\n      </View>\n\n      <View style={styles.paymentBreakdown}>\n        <View style={styles.paymentStep}>\n          <View style={styles.stepIndicator}>\n            <Text style={styles.stepNumber}>1</Text>\n          </View>\n          <View style={styles.stepContent}>\n            <Text style={styles.stepTitle}>At Booking</Text>\n            <Text style={styles.stepAmount}>${initialAmount}</Text>\n            <Text style={styles.stepDescription}>20% of total amount</Text>\n          </View>\n        </View>\n\n        <View style={styles.connector} />\n\n        <View style={styles.paymentStep}>\n          <View style={styles.stepIndicator}>\n            <Text style={styles.stepNumber}>2</Text>\n          </View>\n          <View style={styles.stepContent}>\n            <Text style={styles.stepTitle}>On Delivery</Text>\n            <Text style={styles.stepAmount}>${finalAmount}</Text>\n            <Text style={styles.stepDescription}>80% of total amount</Text>\n          </View>\n        </View>\n      </View>\n\n      {showDetailed && (\n        <View style={styles.policyDetails}>\n          <View style={styles.policyItem}>\n            <MaterialIcons\n              name=\"access-time\"\n              size={16}\n              color={Colors.warning}\n            />\n            <Text style={styles.policyText}>\n              Refund available within 1 hour of booking\n            </Text>\n          </View>\n          <View style={styles.policyItem}>\n            <MaterialIcons name=\"security\" size={16} color={Colors.success} />\n            <Text style={styles.policyText}>\n              Secure payment processing via Stripe\n            </Text>\n          </View>\n          <View style={styles.policyItem}>\n            <MaterialIcons name=\"verified\" size={16} color={Colors.primary} />\n            <Text style={styles.policyText}>\n              Final payment charged after successful delivery\n            </Text>\n          </View>\n        </View>\n      )}\n\n      <View style={styles.totalRow}>\n        <Text style={styles.totalLabel}>Total Amount:</Text>\n        <Text style={styles.totalAmount}>${totalAmount}</Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 8,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginLeft: 8,\n  },\n  paymentBreakdown: {\n    marginBottom: 16,\n  },\n  paymentStep: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  stepIndicator: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    backgroundColor: Colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  stepNumber: {\n    color: '#FFFFFF',\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  stepContent: {\n    flex: 1,\n  },\n  stepTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 2,\n  },\n  stepAmount: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.primary,\n    marginBottom: 2,\n  },\n  stepDescription: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n  },\n  connector: {\n    width: 2,\n    height: 12,\n    backgroundColor: Colors.border,\n    marginLeft: 15,\n    marginBottom: 8,\n  },\n  policyDetails: {\n    backgroundColor: '#F8F9FA',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 16,\n  },\n  policyItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  policyText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 8,\n    flex: 1,\n  },\n  totalRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  totalLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n  },\n  totalAmount: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.success,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/ShipmentListItem.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":93,"column":14,"nodeType":"ObjectExpression","endLine":105,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ViewStyle,\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Shipment, shipmentStatusMap, formatDate } from '../types';\nimport { Colors } from '../constants/Colors';\n\ninterface ShipmentListItemProps {\n  shipment: Shipment;\n  onPress: (shipment: Shipment) => void;\n  style?: ViewStyle;\n}\n\nexport function ShipmentListItem({\n  shipment,\n  onPress,\n  style,\n}: ShipmentListItemProps) {\n  return (\n    <TouchableOpacity\n      style={[styles.container, style]}\n      onPress={() => onPress(shipment)}\n      activeOpacity={0.7}\n    >\n      <View style={styles.contentContainer}>\n        <View style={styles.header}>\n          <Text style={styles.title} numberOfLines={1}>\n            {shipment.title}\n          </Text>\n          <View\n            style={[\n              styles.statusBadge,\n              {\n                backgroundColor:\n                  Colors.status[shipment.status] || Colors.text.secondary,\n              },\n            ]}\n          >\n            <Text style={styles.statusText}>\n              {shipmentStatusMap[shipment.status]}\n            </Text>\n          </View>\n        </View>\n\n        <View style={styles.addressContainer}>\n          <View style={styles.addressRow}>\n            <Ionicons\n              name=\"location\"\n              size={16}\n              color={Colors.primary}\n              style={styles.icon}\n            />\n            <Text style={styles.addressText} numberOfLines={1}>\n              {shipment.pickupAddress}\n            </Text>\n          </View>\n          <View style={styles.addressRow}>\n            <Ionicons\n              name=\"location\"\n              size={16}\n              color={Colors.secondary}\n              style={styles.icon}\n            />\n            <Text style={styles.addressText} numberOfLines={1}>\n              {shipment.deliveryAddress}\n            </Text>\n          </View>\n        </View>\n\n        <View style={styles.footer}>\n          <Text style={styles.dateText}>{formatDate(shipment.pickupDate)}</Text>\n          {shipment.price && (\n            <Text style={styles.priceText}>${shipment.price.toFixed(2)}</Text>\n          )}\n        </View>\n      </View>\n      <Ionicons\n        name=\"chevron-forward\"\n        size={20}\n        color={Colors.text.secondary}\n        style={styles.chevron}\n      />\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    marginVertical: 8,\n    padding: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  contentContainer: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  title: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    flex: 1,\n    marginRight: 8,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.text.inverse,\n  },\n  addressContainer: {\n    marginVertical: 8,\n  },\n  addressRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 4,\n  },\n  icon: {\n    marginRight: 8,\n  },\n  addressText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    flex: 1,\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginTop: 8,\n  },\n  dateText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n  },\n  priceText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n  },\n  chevron: {\n    marginLeft: 8,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/ShipmentSummary.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: 'white' }","line":141,"column":15,"nodeType":"ObjectExpression","endLine":145,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { StyleSheet, View, Text, TouchableOpacity } from 'react-native';\nimport { Colors } from '../constants/Colors';\n\ntype ShipmentStatus = 'pending' | 'in_transit' | 'delivered' | 'cancelled';\n\ninterface Shipment {\n  id: string;\n  tracking_number: string;\n  status: ShipmentStatus;\n  origin_address: string;\n  destination_address: string;\n  created_at: string;\n  estimated_delivery?: string;\n  price?: number;\n}\n\ninterface ShipmentSummaryProps {\n  shipment: Shipment;\n  onPress: () => void;\n}\n\nexport function ShipmentSummary({ shipment, onPress }: ShipmentSummaryProps) {\n  const getStatusColor = (status: ShipmentStatus) => {\n    switch (status) {\n      case 'pending':\n        return Colors.warning;\n      case 'in_transit':\n        return Colors.primary;\n      case 'delivered':\n        return Colors.success;\n      case 'cancelled':\n        return Colors.error;\n      default:\n        return Colors.text.secondary;\n    }\n  };\n\n  const getStatusLabel = (status: ShipmentStatus) => {\n    switch (status) {\n      case 'pending':\n        return 'Pending';\n      case 'in_transit':\n        return 'In Transit';\n      case 'delivered':\n        return 'Delivered';\n      case 'cancelled':\n        return 'Cancelled';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    });\n  };\n\n  const truncateAddress = (address: string, maxLength = 35) => {\n    return address.length > maxLength\n      ? `${address.substring(0, maxLength)}...`\n      : address;\n  };\n\n  return (\n    <TouchableOpacity\n      style={styles.container}\n      onPress={onPress}\n      activeOpacity={0.7}\n    >\n      <View style={styles.header}>\n        <Text style={styles.trackingNumber}>#{shipment.tracking_number}</Text>\n        <View\n          style={[\n            styles.statusBadge,\n            { backgroundColor: getStatusColor(shipment.status) },\n          ]}\n        >\n          <Text style={styles.statusText}>\n            {getStatusLabel(shipment.status)}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.details}>\n        <View style={styles.addressContainer}>\n          <Text style={styles.label}>From</Text>\n          <Text style={styles.address}>\n            {truncateAddress(shipment.origin_address)}\n          </Text>\n        </View>\n        <View style={styles.addressContainer}>\n          <Text style={styles.label}>To</Text>\n          <Text style={styles.address}>\n            {truncateAddress(shipment.destination_address)}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.footer}>\n        <Text style={styles.date}>\n          Created: {formatDate(shipment.created_at)}\n        </Text>\n        {shipment.price && (\n          <Text style={styles.price}>${shipment.price.toFixed(2)}</Text>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  trackingNumber: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n  },\n  statusText: {\n    color: 'white',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  details: {\n    marginBottom: 12,\n  },\n  addressContainer: {\n    marginBottom: 8,\n  },\n  label: {\n    fontSize: 12,\n    color: Colors.text.secondary,\n    marginBottom: 2,\n  },\n  address: {\n    fontSize: 14,\n    color: Colors.text.primary,\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  date: {\n    fontSize: 12,\n    color: Colors.text.secondary,\n  },\n  price: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/TextInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/payment/PaymentPolicyCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/payment/StripePaymentForm.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#6772E5' }","line":347,"column":16,"nodeType":"ObjectExpression","endLine":351,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, StyleSheet, Alert, ActivityIndicator, Text } from 'react-native';\nimport { Card } from '../ui/Card';\nimport { Input } from '../ui/Input';\nimport { Button } from '../ui/Button';\nimport { Colors, Spacing, Typography } from '../../constants/DesignSystem';\nimport {\n  paymentService,\n  PaymentMethodRequest,\n} from '../../services/paymentService';\n\ninterface StripePaymentFormProps {\n  amount: number;\n  shipmentId: string;\n  onPaymentSuccess: () => void;\n  onPaymentError: (error: string) => void;\n}\n\nexport function StripePaymentForm({\n  amount,\n  shipmentId,\n  onPaymentSuccess,\n  onPaymentError,\n}: StripePaymentFormProps) {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [cardholderName, setCardholderName] = useState<string>('');\n  const [cardNumber, setCardNumber] = useState<string>('');\n  const [expiryDate, setExpiryDate] = useState<string>('');\n  const [cvv, setCvv] = useState<string>('');\n  const [billingAddress, setBillingAddress] = useState({\n    street: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: 'US',\n  });\n\n  // This is already the 20% amount from the parent component\n\n  const handleBillingAddressChange = (field: string, value: string) => {\n    setBillingAddress(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const formatCardNumber = (value: string) => {\n    const cleaned = value.replace(/\\s/g, '');\n    const formatted = cleaned.replace(/(.{4})/g, '$1 ').trim();\n    return formatted;\n  };\n\n  const formatExpiryDate = (value: string) => {\n    const cleaned = value.replace(/\\D/g, '');\n    if (cleaned.length >= 2) {\n      return cleaned.substring(0, 2) + '/' + cleaned.substring(2, 4);\n    }\n    return cleaned;\n  };\n\n  const isFormValid = () => {\n    return (\n      cardholderName.trim().length > 0 &&\n      cardNumber.replace(/\\s/g, '').length === 16 &&\n      expiryDate.length === 5 &&\n      cvv.length >= 3 &&\n      billingAddress.street.trim().length > 0 &&\n      billingAddress.city.trim().length > 0 &&\n      billingAddress.state.trim().length > 0 &&\n      billingAddress.zipCode.trim().length > 0\n    );\n  };\n\n  const handlePayment = async () => {\n    if (!isFormValid()) {\n      Alert.alert(\n        'Validation Error',\n        'Please fill in all required fields correctly.'\n      );\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n\n      // Test API connectivity first\n      const isConnected = await paymentService.testApiConnectivity();\n      if (!isConnected) {\n        throw new Error(\n          'Cannot connect to payment server. Please check your internet connection and try again.'\n        );\n      }\n\n      console.log('Creating payment intent for shipment:', shipmentId);\n\n      // Create a payment intent\n      const paymentIntentResponse = await paymentService.createPaymentIntent(\n        shipmentId,\n        amount,\n        `DriveDrop shipment payment for shipment ${shipmentId}`\n      );\n\n      if (!paymentIntentResponse || !paymentIntentResponse.id) {\n        console.error(\n          'Invalid payment intent response:',\n          paymentIntentResponse\n        );\n        throw new Error('Failed to create payment intent: Missing ID');\n      }\n\n      console.log(\n        'Payment intent created successfully with ID:',\n        paymentIntentResponse.id\n      );\n\n      // Parse expiry date (MM/YY)\n      const [expMonth, expYear] = expiryDate.split('/');\n\n      // Prepare payment method data\n      const paymentMethodData: PaymentMethodRequest = {\n        type: 'card',\n        card: {\n          number: cardNumber.replace(/\\s/g, ''),\n          exp_month: expMonth,\n          exp_year: expYear,\n          cvc: cvv,\n        },\n        billing_details: {\n          name: cardholderName,\n          address: {\n            line1: billingAddress.street,\n            city: billingAddress.city,\n            state: billingAddress.state,\n            postal_code: billingAddress.zipCode,\n            country: billingAddress.country,\n          },\n        },\n      };\n\n      // Confirm payment\n      console.log('Confirming payment with payment method');\n      const result = await paymentService.confirmPaymentIntent(\n        paymentIntentResponse.id,\n        paymentMethodData\n      );\n\n      if (result.success) {\n        console.log('Payment confirmed successfully');\n        onPaymentSuccess();\n      } else {\n        console.error('Payment confirmation failed:', result.error);\n        onPaymentError(result.error || 'Payment failed');\n      }\n    } catch (error) {\n      console.error('Payment processing error (detailed):', error);\n\n      // Determine a user-friendly error message based on the error\n      let errorMessage =\n        'An unexpected error occurred during payment processing';\n\n      if (error instanceof Error) {\n        // Extract the most meaningful part of the error message\n        if (error.message.includes('User not authenticated')) {\n          errorMessage = 'Your session has expired. Please log in again.';\n        } else if (error.message.includes('card')) {\n          errorMessage = error.message; // Card errors are usually user-friendly\n        } else if (error.message.includes('Failed to create payment intent')) {\n          errorMessage =\n            'Could not process payment. Please check your payment details and try again.';\n        } else if (error.message.includes('connect')) {\n          errorMessage =\n            'Connection to payment service failed. Please check your internet connection.';\n        } else {\n          // If we have a specific error message, use it\n          errorMessage = error.message;\n        }\n      }\n\n      onPaymentError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card variant=\"default\" padding=\"lg\" style={styles.container}>\n      <View style={styles.titleContainer}>\n        <Text style={styles.title}>Payment Details</Text>\n        <Text style={styles.secureText}>Secure</Text>\n      </View>\n\n      <Text style={styles.amount}>Amount: ${(amount / 100).toFixed(2)}</Text>\n\n      <View style={styles.stripeContainer}>\n        <Text style={styles.stripeText}>Powered by</Text>\n        <Text style={styles.stripeBrand}>Stripe</Text>\n      </View>\n\n      <View style={styles.legalContainer}>\n        <Text style={styles.legalText}>\n          Your payment information is securely processed by Stripe. DriveDrop\n          does not store your credit card information. By proceeding with\n          payment, you agree to Stripe's Terms of Service.\n        </Text>\n      </View>\n\n      <Input\n        label=\"Cardholder Name\"\n        value={cardholderName}\n        onChangeText={setCardholderName}\n        placeholder=\"John Doe\"\n        autoCapitalize=\"words\"\n      />\n\n      <Input\n        label=\"Card Number\"\n        value={cardNumber}\n        onChangeText={value => {\n          const formatted = formatCardNumber(value);\n          if (formatted.replace(/\\s/g, '').length <= 16) {\n            setCardNumber(formatted);\n          }\n        }}\n        placeholder=\"1234 5678 9012 3456\"\n        keyboardType=\"numeric\"\n        maxLength={19}\n      />\n\n      <View style={styles.row}>\n        <View style={styles.halfInput}>\n          <Input\n            label=\"Expiry Date\"\n            value={expiryDate}\n            onChangeText={value => {\n              const formatted = formatExpiryDate(value);\n              if (formatted.length <= 5) {\n                setExpiryDate(formatted);\n              }\n            }}\n            placeholder=\"MM/YY\"\n            keyboardType=\"numeric\"\n            maxLength={5}\n          />\n        </View>\n        <View style={styles.halfInput}>\n          <Input\n            label=\"CVV\"\n            value={cvv}\n            onChangeText={setCvv}\n            placeholder=\"123\"\n            keyboardType=\"numeric\"\n            maxLength={4}\n            secureTextEntry\n          />\n        </View>\n      </View>\n\n      <Text style={styles.billingTitle}>Billing Address</Text>\n\n      <Input\n        label=\"Street Address\"\n        value={billingAddress.street}\n        onChangeText={value => handleBillingAddressChange('street', value)}\n        placeholder=\"123 Main St\"\n      />\n\n      <View style={styles.row}>\n        <View style={styles.halfInput}>\n          <Input\n            label=\"City\"\n            value={billingAddress.city}\n            onChangeText={value => handleBillingAddressChange('city', value)}\n            placeholder=\"New York\"\n          />\n        </View>\n        <View style={styles.halfInput}>\n          <Input\n            label=\"State\"\n            value={billingAddress.state}\n            onChangeText={value => handleBillingAddressChange('state', value)}\n            placeholder=\"NY\"\n          />\n        </View>\n      </View>\n\n      <Input\n        label=\"Zip Code\"\n        value={billingAddress.zipCode}\n        onChangeText={value => handleBillingAddressChange('zipCode', value)}\n        placeholder=\"10001\"\n        keyboardType=\"numeric\"\n      />\n\n      <Button\n        title={isLoading ? 'Processing...' : 'Pay Now'}\n        onPress={handlePayment}\n        disabled={isLoading || !isFormValid()}\n        style={styles.payButton}\n      />\n\n      {isLoading && (\n        <ActivityIndicator\n          size=\"large\"\n          color={Colors.primary}\n          style={styles.loader}\n        />\n      )}\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginBottom: Spacing[8],\n  },\n  titleContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: Spacing[2],\n  },\n  title: {\n    fontSize: Typography.fontSize.xl,\n    fontWeight: Typography.fontWeight.medium,\n  },\n  secureText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.success,\n    fontWeight: Typography.fontWeight.medium,\n  },\n  amount: {\n    fontSize: Typography.fontSize.base,\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[4],\n  },\n  stripeContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: Spacing[4],\n  },\n  stripeText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginRight: 4,\n  },\n  stripeBrand: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.bold,\n    color: '#6772E5', // Stripe's brand color\n  },\n  legalContainer: {\n    backgroundColor: Colors.background,\n    padding: Spacing[3],\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    marginBottom: Spacing[6],\n  },\n  legalText: {\n    fontSize: Typography.fontSize.xs,\n    color: Colors.text.secondary,\n    lineHeight: 16,\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: Spacing[2],\n  },\n  halfInput: {\n    width: '48%',\n  },\n  billingTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.medium,\n    marginTop: Spacing[4],\n    marginBottom: Spacing[2],\n  },\n  payButton: {\n    marginTop: Spacing[8],\n  },\n  loader: {\n    marginTop: Spacing[4],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/ui/Button.tsx","messages":[{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.primary","line":90,"column":3,"nodeType":"Property","endLine":92,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.secondary","line":93,"column":3,"nodeType":"Property","endLine":95,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.outline","line":96,"column":3,"nodeType":"Property","endLine":100,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'transparent' }","line":96,"column":12,"nodeType":"ObjectExpression","endLine":100,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.ghost","line":101,"column":3,"nodeType":"Property","endLine":103,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'transparent' }","line":101,"column":10,"nodeType":"ObjectExpression","endLine":103,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.sm","line":106,"column":3,"nodeType":"Property","endLine":109,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.lg","line":114,"column":3,"nodeType":"Property","endLine":117,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.primaryText","line":124,"column":3,"nodeType":"Property","endLine":126,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.secondaryText","line":127,"column":3,"nodeType":"Property","endLine":129,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.outlineText","line":130,"column":3,"nodeType":"Property","endLine":132,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.ghostText","line":133,"column":3,"nodeType":"Property","endLine":135,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.smText","line":138,"column":3,"nodeType":"Property","endLine":140,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.baseText","line":141,"column":3,"nodeType":"Property","endLine":143,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.lgText","line":144,"column":3,"nodeType":"Property","endLine":146,"endColumn":4}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n  ActivityIndicator,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport {\n  Colors,\n  ComponentTokens,\n  Typography,\n  BorderRadius,\n  Shadows,\n} from '../../constants/DesignSystem';\n\ninterface ButtonProps {\n  title: string;\n  onPress: () => void;\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';\n  size?: 'sm' | 'base' | 'lg';\n  disabled?: boolean;\n  loading?: boolean;\n  fullWidth?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\nexport function Button({\n  title,\n  onPress,\n  variant = 'primary',\n  size = 'base',\n  disabled = false,\n  loading = false,\n  fullWidth = false,\n  style,\n  textStyle,\n}: ButtonProps) {\n  const buttonStyle = [\n    styles.buttonBase,\n    styles[variant],\n    size === 'base' ? styles.baseSize : styles[size],\n    fullWidth && styles.fullWidth,\n    disabled && styles.disabled,\n    style,\n  ];\n\n  const textStyleCombined = [\n    styles.text,\n    styles[`${variant}Text`],\n    styles[`${size}Text`],\n    disabled && styles.disabledText,\n    textStyle,\n  ];\n\n  return (\n    <TouchableOpacity\n      style={buttonStyle}\n      onPress={onPress}\n      disabled={disabled || loading}\n      activeOpacity={0.8}\n    >\n      {loading ? (\n        <ActivityIndicator\n          size=\"small\"\n          color={variant === 'primary' ? Colors.neutral.white : Colors.primary}\n        />\n      ) : (\n        <Text style={textStyleCombined}>{title}</Text>\n      )}\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttonBase: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: BorderRadius.md,\n    flexDirection: 'row',\n    ...Shadows.sm,\n  },\n  fullWidth: {\n    width: '100%',\n  },\n\n  // Variants\n  primary: {\n    backgroundColor: Colors.primary,\n  },\n  secondary: {\n    backgroundColor: Colors.secondary,\n  },\n  outline: {\n    backgroundColor: 'transparent',\n    borderWidth: 1,\n    borderColor: Colors.primary,\n  },\n  ghost: {\n    backgroundColor: 'transparent',\n  },\n\n  // Sizes\n  sm: {\n    height: ComponentTokens.button.height.sm,\n    paddingHorizontal: ComponentTokens.button.padding.sm.horizontal,\n  },\n  baseSize: {\n    height: ComponentTokens.button.height.base,\n    paddingHorizontal: ComponentTokens.button.padding.base.horizontal,\n  },\n  lg: {\n    height: ComponentTokens.button.height.lg,\n    paddingHorizontal: ComponentTokens.button.padding.lg.horizontal,\n  },\n\n  // Text styles\n  text: {\n    fontWeight: Typography.fontWeight.semibold,\n    letterSpacing: Typography.letterSpacing.wide,\n  },\n  primaryText: {\n    color: Colors.neutral.white,\n  },\n  secondaryText: {\n    color: Colors.neutral.white,\n  },\n  outlineText: {\n    color: Colors.primary,\n  },\n  ghostText: {\n    color: Colors.primary,\n  },\n\n  // Size text\n  smText: {\n    fontSize: Typography.fontSize.sm,\n  },\n  baseText: {\n    fontSize: Typography.fontSize.base,\n  },\n  lgText: {\n    fontSize: Typography.fontSize.lg,\n  },\n\n  // Disabled states\n  disabled: {\n    opacity: 0.5,\n  },\n  disabledText: {\n    color: Colors.text.disabled,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/ui/Card.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BorderRadius' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spacing' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":10},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.default","line":58,"column":3,"nodeType":"Property","endLine":60,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.elevated","line":61,"column":3,"nodeType":"Property","endLine":63,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.outlined","line":64,"column":3,"nodeType":"Property","endLine":67,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.smPadding","line":70,"column":3,"nodeType":"Property","endLine":72,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.basePadding","line":73,"column":3,"nodeType":"Property","endLine":75,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.lgPadding","line":76,"column":3,"nodeType":"Property","endLine":78,"endColumn":4}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  ViewStyle,\n  TouchableOpacity,\n  TouchableOpacityProps,\n} from 'react-native';\nimport {\n  Colors,\n  ComponentTokens,\n  BorderRadius,\n  Shadows,\n  Spacing,\n} from '../../constants/DesignSystem';\n\ninterface CardProps extends TouchableOpacityProps {\n  children: React.ReactNode;\n  variant?: 'default' | 'elevated' | 'outlined';\n  padding?: 'sm' | 'base' | 'lg';\n  style?: ViewStyle;\n  touchable?: boolean;\n}\n\nexport function Card({\n  children,\n  variant = 'default',\n  padding = 'base',\n  style,\n  touchable = false,\n  ...props\n}: CardProps) {\n  const cardStyle = [\n    styles.base,\n    styles[variant],\n    styles[`${padding}Padding`],\n    style,\n  ];\n\n  if (touchable) {\n    return (\n      <TouchableOpacity style={cardStyle} activeOpacity={0.8} {...props}>\n        {children}\n      </TouchableOpacity>\n    );\n  }\n\n  return <View style={cardStyle}>{children}</View>;\n}\n\nconst styles = StyleSheet.create({\n  base: {\n    backgroundColor: Colors.surface,\n    borderRadius: ComponentTokens.card.borderRadius,\n  },\n\n  // Variants\n  default: {\n    ...Shadows.sm,\n  },\n  elevated: {\n    ...Shadows.md,\n  },\n  outlined: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n\n  // Padding variants\n  smPadding: {\n    padding: ComponentTokens.card.padding.sm,\n  },\n  basePadding: {\n    padding: ComponentTokens.card.padding.base,\n  },\n  lgPadding: {\n    padding: ComponentTokens.card.padding.lg,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/components/ui/Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/constants/Colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/constants/DesignSystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/constants/Expo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/constants/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/context/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6290,6293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6290,6293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { Session, User } from '@supabase/supabase-js';\nimport { auth, supabase } from '../lib/supabase';\n\nexport interface UserProfile {\n  id: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  role: 'client' | 'driver' | 'admin';\n  phone?: string;\n  avatar_url?: string;\n  is_verified: boolean;\n  rating?: number;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  userProfile: UserProfile | null;\n  session: Session | null;\n  loading: boolean;\n  error: string | null;\n  refreshProfile: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  userProfile: null,\n  session: null,\n  loading: true,\n  error: null,\n  refreshProfile: async () => {},\n});\n\n// In-memory cache for profile creation status, shared across all instances\nconst profileCreationStatus = new Map<string, Promise<UserProfile | null>>();\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Function to fetch or create user profile - uses a mutex pattern to prevent race conditions\n  const fetchUserProfile = async (\n    userId: string\n  ): Promise<UserProfile | null> => {\n    try {\n      // Check if there's already an ongoing fetch/creation operation for this user\n      if (profileCreationStatus.has(userId)) {\n        console.log(\n          'Profile fetch/creation already in progress for user:',\n          userId\n        );\n        // Wait for the existing operation to complete\n        return await profileCreationStatus.get(userId)!;\n      }\n\n      // Create a new promise for this operation\n      const profilePromise = (async () => {\n        try {\n          // First try to fetch existing profile\n          const { data, error } = await supabase\n            .from('profiles')\n            .select('*')\n            .eq('id', userId)\n            .single();\n\n          if (error && error.code === 'PGRST116') {\n            // Profile doesn't exist, create one\n            console.log(\n              'Profile not found, creating new profile for user:',\n              userId\n            );\n\n            try {\n              // Get user metadata from auth\n              const { data: authData } = await auth.getUser();\n              const userMetadata = authData.user?.user_metadata || {};\n\n              // Create new profile\n              const newProfile = {\n                id: userId,\n                first_name: userMetadata.first_name || 'User',\n                last_name: userMetadata.last_name || '',\n                email: authData.user?.email || '',\n                role: userMetadata.role || 'client',\n                phone: userMetadata.phone || null,\n                avatar_url: null,\n                is_verified: false,\n                rating: null,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString(),\n              };\n\n              const { data: insertedData, error: insertError } = await supabase\n                .from('profiles')\n                .insert([newProfile])\n                .select()\n                .single();\n\n              if (insertError) {\n                // If it's a duplicate key error, try to fetch the existing profile\n                if (insertError.code === '23505') {\n                  console.log(\n                    'Profile already exists (race condition), fetching existing profile'\n                  );\n                  const { data: existingData, error: fetchError } =\n                    await supabase\n                      .from('profiles')\n                      .select('*')\n                      .eq('id', userId)\n                      .single();\n\n                  if (fetchError) {\n                    console.error(\n                      'Error fetching existing profile:',\n                      fetchError\n                    );\n                    return null;\n                  }\n\n                  return existingData as UserProfile;\n                }\n\n                console.error('Error creating user profile:', insertError);\n                return null;\n              }\n\n              console.log('Profile created successfully');\n              return insertedData as UserProfile;\n            } catch (e) {\n              console.error('Error in profile creation:', e);\n              return null;\n            }\n          } else if (error) {\n            console.error('Error fetching user profile:', error);\n            return null;\n          }\n\n          return data as UserProfile;\n        } catch (e) {\n          console.error('Error in fetchUserProfile:', e);\n          return null;\n        }\n      })();\n\n      // Store the promise in our map\n      profileCreationStatus.set(userId, profilePromise);\n\n      // Wait for completion\n      const result = await profilePromise;\n\n      // Clean up after completion\n      profileCreationStatus.delete(userId);\n\n      return result;\n    } catch (e) {\n      console.error('Unexpected error in profile fetch/creation:', e);\n      profileCreationStatus.delete(userId);\n      return null;\n    }\n  };\n\n  // Function to refresh profile (useful after updates)\n  const refreshProfile = async () => {\n    if (user) {\n      const profile = await fetchUserProfile(user.id);\n      setUserProfile(profile);\n    }\n  };\n\n  // Get the user's session on load\n  useEffect(() => {\n    let mounted = true;\n\n    async function loadUserSession() {\n      try {\n        setLoading(true);\n\n        // Get the user's current session\n        const { data, error } = await auth.getSession();\n\n        if (error) {\n          throw error;\n        }\n\n        if (data?.session && mounted) {\n          setSession(data.session);\n          setUser(data.session.user);\n\n          // Fetch user profile\n          const profile = await fetchUserProfile(data.session.user.id);\n          if (mounted) {\n            setUserProfile(profile);\n          }\n        }\n      } catch (e: any) {\n        if (mounted) {\n          setError(e.message);\n          console.error('Error loading user session:', e);\n        }\n      } finally {\n        if (mounted) {\n          setLoading(false);\n        }\n      }\n    }\n\n    loadUserSession();\n\n    // Subscribe to auth changes\n    const { data } = auth.onAuthStateChange(async (event, newSession) => {\n      console.log(`Auth event: ${event}`);\n\n      if (!mounted) return;\n\n      if (newSession) {\n        setSession(newSession);\n        setUser(newSession.user);\n\n        // Fetch user profile\n        const profile = await fetchUserProfile(newSession.user.id);\n        if (mounted) {\n          setUserProfile(profile);\n        }\n      } else {\n        setSession(null);\n        setUser(null);\n        setUserProfile(null);\n      }\n\n      if (mounted) {\n        setLoading(false);\n      }\n    });\n\n    // Cleanup function\n    return () => {\n      mounted = false;\n      data.subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{ user, userProfile, session, loading, error, refreshProfile }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/context/BookingContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2978,2981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2978,2981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6240,6243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6240,6243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":283,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6692,6695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6692,6695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":305,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7200,7203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7200,7203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {\n  createContext,\n  useContext,\n  useReducer,\n  useCallback,\n  ReactNode,\n} from 'react';\nimport { ShipmentService } from '../services/shipmentService';\nimport { useAuth } from './AuthContext';\n\n// Types for the booking form data\nexport interface CustomerDetails {\n  fullName: string;\n  address: string;\n  phone: string;\n  email: string;\n}\n\nexport interface VehicleInformation {\n  make: string;\n  model: string;\n  year: string;\n  vin: string;\n  licensePlate: string;\n  conditionNotes: string;\n}\n\nexport interface PickupDetails {\n  address: string;\n  date: string;\n  time: string;\n  contactPerson: string;\n  contactPhone: string;\n}\n\nexport interface DeliveryDetails {\n  address: string;\n  date: string;\n  time: string;\n  contactPerson: string;\n  contactPhone: string;\n  specialInstructions: string;\n}\n\nexport interface TowingTransport {\n  operability: 'running' | 'not_running' | 'partially_running';\n  equipmentNeeds: string[];\n  specialRequirements: string;\n}\n\nexport interface InsuranceDocumentation {\n  proofOfOwnership: string[]; // File URIs\n  insurance: string[]; // File URIs\n  otherDocuments: string[]; // File URIs\n}\n\nexport interface VisualDocumentation {\n  frontView: string[]; // File URIs\n  rearView: string[]; // File URIs\n  leftSide: string[]; // File URIs\n  rightSide: string[]; // File URIs\n  interior: string[]; // File URIs\n  damagePhotos: string[]; // File URIs\n}\n\nexport interface TermsAuthorization {\n  serviceAgreementAccepted: boolean;\n  cancellationPolicyAccepted: boolean;\n  digitalSignature: string; // Base64 signature or typed name\n  signatureDate: string;\n}\n\nexport interface PaymentDetails {\n  selectedQuote?: {\n    id: string;\n    service: string;\n    price: number;\n    estimatedDays: number;\n    features: string[];\n  };\n  paymentMethod: 'credit_card' | 'debit_card' | 'bank_transfer' | '';\n  cardNumber: string;\n  expiryDate: string;\n  cvv: string;\n  cardholderName: string;\n  billingAddress: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n  };\n}\n\nexport interface BookingFormData {\n  quoteId?: string;\n  customerDetails: Partial<CustomerDetails>;\n  vehicleInformation: Partial<VehicleInformation>;\n  pickupDetails: Partial<PickupDetails>;\n  deliveryDetails: Partial<DeliveryDetails>;\n  towingTransport: Partial<TowingTransport>;\n  insuranceDocumentation: Partial<InsuranceDocumentation>;\n  visualDocumentation: Partial<VisualDocumentation>;\n  termsAuthorization: Partial<TermsAuthorization>;\n  paymentDetails: Partial<PaymentDetails>;\n}\n\nexport type BookingStep =\n  | 'customer'\n  | 'vehicle'\n  | 'pickup'\n  | 'delivery'\n  | 'towing'\n  | 'insurance'\n  | 'visual'\n  | 'terms'\n  | 'payment';\n\ninterface BookingState {\n  currentStep: BookingStep;\n  formData: BookingFormData;\n  isValid: Record<BookingStep, boolean>;\n  isDraft: boolean;\n}\n\ntype BookingAction =\n  | { type: 'SET_STEP'; payload: BookingStep }\n  | { type: 'UPDATE_FORM_DATA'; payload: { step: BookingStep; data: any } }\n  | {\n      type: 'SET_STEP_VALIDITY';\n      payload: { step: BookingStep; isValid: boolean };\n    }\n  | { type: 'SAVE_DRAFT' }\n  | { type: 'LOAD_DRAFT'; payload: BookingFormData }\n  | { type: 'RESET_FORM' }\n  | { type: 'SET_QUOTE_ID'; payload: string };\n\nconst initialState: BookingState = {\n  currentStep: 'customer',\n  formData: {\n    customerDetails: {\n      fullName: '',\n      address: '',\n      phone: '',\n      email: '',\n    },\n    vehicleInformation: {},\n    pickupDetails: {},\n    deliveryDetails: {},\n    towingTransport: { equipmentNeeds: [] },\n    insuranceDocumentation: {\n      proofOfOwnership: [],\n      insurance: [],\n      otherDocuments: [],\n    },\n    visualDocumentation: {\n      frontView: [],\n      rearView: [],\n      leftSide: [],\n      rightSide: [],\n      interior: [],\n      damagePhotos: [],\n    },\n    termsAuthorization: {},\n    paymentDetails: {\n      paymentMethod: '',\n      cardNumber: '',\n      expiryDate: '',\n      cvv: '',\n      cardholderName: '',\n      billingAddress: {\n        street: '',\n        city: '',\n        state: '',\n        zipCode: '',\n        country: '',\n      },\n    },\n  },\n  isValid: {\n    customer: false,\n    vehicle: false,\n    pickup: false,\n    delivery: false,\n    towing: false,\n    insurance: false,\n    visual: false,\n    terms: false,\n    payment: false,\n  },\n  isDraft: false,\n};\n\nfunction bookingReducer(\n  state: BookingState,\n  action: BookingAction\n): BookingState {\n  switch (action.type) {\n    case 'SET_STEP':\n      return { ...state, currentStep: action.payload };\n\n    case 'UPDATE_FORM_DATA':\n      const stepKey = action.payload.step;\n      // Map step names to form data keys\n      const stepToFormKeyMap: Record<BookingStep, keyof BookingFormData> = {\n        customer: 'customerDetails',\n        vehicle: 'vehicleInformation',\n        pickup: 'pickupDetails',\n        delivery: 'deliveryDetails',\n        towing: 'towingTransport',\n        insurance: 'insuranceDocumentation',\n        visual: 'visualDocumentation',\n        terms: 'termsAuthorization',\n        payment: 'paymentDetails',\n      };\n\n      const formDataKey = stepToFormKeyMap[stepKey];\n      const currentStepData = state.formData[formDataKey] || {};\n\n      return {\n        ...state,\n        formData: {\n          ...state.formData,\n          [formDataKey]: {\n            ...(typeof currentStepData === 'object' ? currentStepData : {}),\n            ...action.payload.data,\n          },\n        },\n        isDraft: true,\n      };\n\n    case 'SET_STEP_VALIDITY':\n      return {\n        ...state,\n        isValid: {\n          ...state.isValid,\n          [action.payload.step]: action.payload.isValid,\n        },\n      };\n\n    case 'SAVE_DRAFT':\n      return { ...state, isDraft: true };\n\n    case 'LOAD_DRAFT':\n      return {\n        ...state,\n        formData: action.payload,\n        isDraft: true,\n      };\n\n    case 'SET_QUOTE_ID':\n      return {\n        ...state,\n        formData: {\n          ...state.formData,\n          quoteId: action.payload,\n        },\n      };\n\n    case 'RESET_FORM':\n      return initialState;\n\n    default:\n      return state;\n  }\n}\n\ninterface BookingContextType {\n  state: BookingState;\n  dispatch: React.Dispatch<BookingAction>;\n  updateFormData: (step: BookingStep, data: any) => void;\n  setStepValidity: (step: BookingStep, isValid: boolean) => void;\n  goToStep: (step: BookingStep) => void;\n  goToNextStep: () => void;\n  goToPreviousStep: () => void;\n  canGoToNextStep: () => boolean;\n  canGoToPreviousStep: () => boolean;\n  getStepProgress: () => number;\n  saveDraft: () => Promise<void>;\n  loadDraft: () => Promise<void>;\n  resetForm: () => void;\n  setQuoteId: (quoteId: string) => void;\n  submitShipment: () => Promise<any>;\n  isSubmitting: boolean;\n}\n\nconst BookingContext = createContext<BookingContextType | undefined>(undefined);\n\nconst stepOrder: BookingStep[] = [\n  'customer',\n  'vehicle',\n  'pickup',\n  'delivery',\n  'towing',\n  'insurance',\n  'visual',\n  'terms',\n  'payment',\n];\n\nexport function BookingProvider({ children }: { children: ReactNode }) {\n  const [state, dispatch] = useReducer(bookingReducer, initialState);\n  const { user } = useAuth();\n\n  const updateFormData = useCallback((step: BookingStep, data: any) => {\n    dispatch({ type: 'UPDATE_FORM_DATA', payload: { step, data } });\n  }, []);\n\n  const setStepValidity = useCallback((step: BookingStep, isValid: boolean) => {\n    dispatch({ type: 'SET_STEP_VALIDITY', payload: { step, isValid } });\n  }, []);\n\n  const goToStep = (step: BookingStep) => {\n    dispatch({ type: 'SET_STEP', payload: step });\n  };\n\n  const goToNextStep = () => {\n    const currentIndex = stepOrder.indexOf(state.currentStep);\n    if (currentIndex < stepOrder.length - 1) {\n      const nextStep = stepOrder[currentIndex + 1];\n      dispatch({ type: 'SET_STEP', payload: nextStep });\n    }\n  };\n\n  const goToPreviousStep = () => {\n    const currentIndex = stepOrder.indexOf(state.currentStep);\n    if (currentIndex > 0) {\n      const previousStep = stepOrder[currentIndex - 1];\n      dispatch({ type: 'SET_STEP', payload: previousStep });\n    }\n  };\n\n  const canGoToNextStep = () => {\n    return (\n      state.isValid[state.currentStep] &&\n      stepOrder.indexOf(state.currentStep) < stepOrder.length - 1\n    );\n  };\n\n  const canGoToPreviousStep = () => {\n    return stepOrder.indexOf(state.currentStep) > 0;\n  };\n\n  const getStepProgress = () => {\n    const currentIndex = stepOrder.indexOf(state.currentStep);\n    return ((currentIndex + 1) / stepOrder.length) * 100;\n  };\n\n  const saveDraft = async () => {\n    // TODO: Implement draft saving to AsyncStorage\n    dispatch({ type: 'SAVE_DRAFT' });\n  };\n\n  const loadDraft = async () => {\n    // TODO: Implement draft loading from AsyncStorage\n  };\n\n  const resetForm = () => {\n    dispatch({ type: 'RESET_FORM' });\n  };\n\n  const setQuoteId = (quoteId: string) => {\n    dispatch({ type: 'SET_QUOTE_ID', payload: quoteId });\n  };\n\n  const submitShipment = async () => {\n    if (!user) throw new Error('User not authenticated');\n\n    try {\n      // Convert booking form data to shipment data\n      const shipmentData = ShipmentService.convertBookingToShipment(\n        state.formData,\n        250\n      );\n      const response = await ShipmentService.createShipment(\n        shipmentData,\n        user.id\n      );\n      dispatch({ type: 'RESET_FORM' });\n      return response;\n    } catch (error) {\n      console.error('Error submitting shipment:', error);\n      throw error;\n    }\n  };\n\n  return (\n    <BookingContext.Provider\n      value={{\n        state,\n        dispatch,\n        updateFormData,\n        setStepValidity,\n        goToStep,\n        goToNextStep,\n        goToPreviousStep,\n        canGoToNextStep,\n        canGoToPreviousStep,\n        getStepProgress,\n        saveDraft,\n        loadDraft,\n        resetForm,\n        setQuoteId,\n        submitShipment,\n        isSubmitting: false, // Placeholder, implement loading state if needed\n      }}\n    >\n      {children}\n    </BookingContext.Provider>\n  );\n}\n\nexport function useBooking() {\n  const context = useContext(BookingContext);\n  if (context === undefined) {\n    throw new Error('useBooking must be used within a BookingProvider');\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/contexts/NotificationContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/db/dbUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/examples/ShipmentDetailsWithRealtime.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onPress' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[938,941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[938,941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  backgroundColor: \"isOwnMessage ? '#DCF8C6' : '#ECECEC'\",\n  padding: 10,\n  margin: 5,\n  borderRadius: 10\n}","line":36,"column":12,"nodeType":"ObjectExpression","endLine":41,"endColumn":6},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: \"isOwnMessage ? '#DCF8C6' : '#ECECEC'\" }","line":36,"column":12,"nodeType":"ObjectExpression","endLine":41,"endColumn":6},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontSize: 10 }","line":44,"column":18,"nodeType":"ObjectExpression","endLine":44,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1324,1327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1324,1327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { padding: 10, borderBottomWidth: 1, borderBottomColor: '#ECECEC' }","line":50,"column":12,"nodeType":"ObjectExpression","endLine":50,"endColumn":79},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { borderBottomColor: '#ECECEC' }","line":50,"column":12,"nodeType":"ObjectExpression","endLine":50,"endColumn":79},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontWeight: 'bold' }","line":52,"column":18,"nodeType":"ObjectExpression","endLine":52,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1766,1769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1766,1769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigation' is defined but never used. Allowed unused args must match /^_/u.","line":70,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":84,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":26},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#007AFF' }","line":292,"column":11,"nodeType":"ObjectExpression","endLine":297,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { borderColor: '#ccc' }","line":333,"column":17,"nodeType":"ObjectExpression","endLine":340,"endColumn":4}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Example showing how to use the real-time hooks in a ShipmentDetailsScreen component\nimport React, { useEffect, useState, useRef } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ActivityIndicator,\n  FlatList,\n  Button,\n  TextInput,\n} from 'react-native';\nimport { useRealtimeShipment } from '../hooks/useRealtimeShipment';\nimport { useRealtimeMessages } from '../hooks/useRealtimeMessages';\nimport { useDriverLocation } from '../hooks/useDriverLocation';\nimport { supabase } from '../lib/supabase';\nimport MapView, { Marker, Region } from 'react-native-maps';\n\n// For example purposes, we'll simulate the auth context\nconst useAuth = () => {\n  const [user] = useState({ id: 'example-user-id' });\n  return { user };\n};\n\n// These would be your actual components in a real implementation\n// For this example, we'll create simple placeholder components\nconst MessageBubble = ({\n  message,\n  isOwnMessage,\n  onPress,\n}: {\n  message: any;\n  isOwnMessage: boolean;\n  onPress: () => void;\n}) => (\n  <View\n    style={{\n      backgroundColor: isOwnMessage ? '#DCF8C6' : '#ECECEC',\n      padding: 10,\n      margin: 5,\n      borderRadius: 10,\n    }}\n  >\n    <Text>{message.content}</Text>\n    <Text style={{ fontSize: 10 }}>{message.is_read ? 'Read' : 'Unread'}</Text>\n  </View>\n);\n\nconst TrackingEvent = ({ event }: { event: any }) => (\n  <View\n    style={{ padding: 10, borderBottomWidth: 1, borderBottomColor: '#ECECEC' }}\n  >\n    <Text style={{ fontWeight: 'bold' }}>{event.event_type}</Text>\n    <Text>{new Date(event.created_at).toLocaleString()}</Text>\n    {event.notes && <Text>{event.notes}</Text>}\n  </View>\n);\n\n// Type definitions for props\ninterface ShipmentDetailsScreenProps {\n  route: {\n    params: {\n      shipmentId: string;\n    };\n  };\n  navigation: any;\n}\n\nexport default function ShipmentDetailsScreen({\n  route,\n  navigation,\n}: ShipmentDetailsScreenProps) {\n  const { shipmentId } = route.params;\n  const { user } = useAuth();\n  const [messageText, setMessageText] = useState('');\n  const mapRef = useRef<MapView>(null);\n\n  // Get user role to determine if they're a driver or client\n  const [userRole, setUserRole] = useState<string | null>(null);\n\n  useEffect(() => {\n    const getUserRole = async () => {\n      if (!user) return;\n\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('role')\n        .eq('id', user.id)\n        .single();\n\n      if (data) {\n        setUserRole(data.role);\n      }\n    };\n\n    getUserRole();\n  }, [user]);\n\n  // Use the shipment hook to get real-time shipment updates\n  const { shipment, trackingEvents } = useRealtimeShipment(shipmentId);\n\n  // Use the messages hook for real-time messaging\n  const {\n    messages,\n    loading: messagesLoading,\n    sendMessage,\n    markAsRead,\n  } = useRealtimeMessages(shipmentId);\n\n  // Use the driver location hook - different behavior based on role\n  const isDriver = userRole === 'driver';\n  const { driverLocation, isTracking, startTracking, stopTracking } =\n    useDriverLocation({\n      shipmentId,\n      isDriver,\n      driverId: isDriver ? user?.id : undefined,\n    });\n\n  // Start/stop tracking based on shipment status (for drivers)\n  useEffect(() => {\n    if (!isDriver || !shipment) return;\n\n    if (shipment.status === 'in_transit') {\n      startTracking();\n    } else if (['delivered', 'cancelled'].includes(shipment.status)) {\n      stopTracking();\n    }\n\n    // Cleanup when unmounting\n    return () => {\n      if (isTracking) {\n        stopTracking();\n      }\n    };\n  }, [isDriver, shipment?.status]);\n\n  // Update map when driver location changes\n  useEffect(() => {\n    if (driverLocation && mapRef.current) {\n      const region: Region = {\n        latitude: driverLocation.latitude,\n        longitude: driverLocation.longitude,\n        latitudeDelta: 0.005,\n        longitudeDelta: 0.005,\n      };\n      mapRef.current.animateToRegion(region);\n    }\n  }, [driverLocation]);\n\n  const handleSendMessage = () => {\n    if (messageText.trim() && user?.id) {\n      sendMessage(messageText, user.id);\n      setMessageText('');\n    }\n  };\n\n  if (!shipment) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n        <Text>Loading shipment details...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Shipment details section */}\n      <View style={styles.detailsContainer}>\n        <Text style={styles.title}>{shipment.title}</Text>\n        <Text style={styles.status}>Status: {shipment.status}</Text>\n\n        <View style={styles.addressContainer}>\n          <Text style={styles.addressLabel}>Pickup:</Text>\n          <Text>{shipment.pickup_address}</Text>\n        </View>\n\n        <View style={styles.addressContainer}>\n          <Text style={styles.addressLabel}>Delivery:</Text>\n          <Text>{shipment.delivery_address}</Text>\n        </View>\n      </View>\n\n      {/* Location tracking section - only show if in_transit */}\n      {shipment.status === 'in_transit' && (\n        <View style={styles.mapContainer}>\n          <Text style={styles.sectionTitle}>\n            {isDriver ? 'Your Location' : 'Driver Location'}\n          </Text>\n\n          <MapView\n            ref={mapRef}\n            style={styles.map}\n            initialRegion={{\n              latitude: 37.78825,\n              longitude: -122.4324,\n              latitudeDelta: 0.0922,\n              longitudeDelta: 0.0421,\n            }}\n          >\n            {driverLocation && (\n              <Marker\n                coordinate={{\n                  latitude: driverLocation.latitude,\n                  longitude: driverLocation.longitude,\n                }}\n                title={isDriver ? 'Your Location' : 'Driver Location'}\n                description={`Last updated: ${new Date(driverLocation.location_timestamp).toLocaleTimeString()}`}\n              />\n            )}\n          </MapView>\n\n          {isDriver && (\n            <Text style={styles.trackingStatus}>\n              Location Tracking: {isTracking ? 'Active' : 'Inactive'}\n            </Text>\n          )}\n        </View>\n      )}\n\n      {/* Tracking events section */}\n      <View style={styles.trackingContainer}>\n        <Text style={styles.sectionTitle}>Tracking Events</Text>\n        {trackingEvents.length === 0 ? (\n          <Text>No tracking events yet.</Text>\n        ) : (\n          <FlatList\n            data={trackingEvents}\n            keyExtractor={item => item.id}\n            renderItem={({ item }) => <TrackingEvent event={item} />}\n          />\n        )}\n      </View>\n\n      {/* Messages section */}\n      <View style={styles.messagesContainer}>\n        <Text style={styles.sectionTitle}>Messages</Text>\n\n        {messagesLoading ? (\n          <ActivityIndicator size=\"small\" color=\"#0000ff\" />\n        ) : messages.length === 0 ? (\n          <Text>No messages yet.</Text>\n        ) : (\n          <FlatList\n            data={messages}\n            keyExtractor={item => item.id}\n            renderItem={({ item }) => (\n              <MessageBubble\n                message={item}\n                isOwnMessage={item.sender_id === user?.id}\n                onPress={() =>\n                  !item.is_read &&\n                  item.sender_id !== user?.id &&\n                  markAsRead(item.id)\n                }\n              />\n            )}\n          />\n        )}\n\n        <View style={styles.messageInputContainer}>\n          <TextInput\n            value={messageText}\n            onChangeText={setMessageText}\n            placeholder=\"Type a message...\"\n            style={styles.messageInput}\n          />\n          <Button title=\"Send\" onPress={handleSendMessage} />\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  detailsContainer: {\n    marginBottom: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  status: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginBottom: 16,\n    color: '#007AFF',\n  },\n  addressContainer: {\n    marginBottom: 12,\n  },\n  addressLabel: {\n    fontWeight: 'bold',\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n  },\n  mapContainer: {\n    marginBottom: 20,\n    height: 250,\n  },\n  map: {\n    flex: 1,\n    borderRadius: 8,\n  },\n  trackingStatus: {\n    marginTop: 8,\n    fontStyle: 'italic',\n  },\n  trackingContainer: {\n    marginBottom: 20,\n    maxHeight: 150,\n  },\n  messagesContainer: {\n    flex: 1,\n  },\n  messageInputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 8,\n  },\n  messageInput: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 4,\n    padding: 8,\n    marginRight: 8,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/hooks/useAPI.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[286,289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[286,289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[611,614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[611,614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1543,1546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1543,1546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2270,2273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2270,2273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2928,2931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2928,2931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport { Alert } from 'react-native';\nimport Constants from 'expo-constants';\nimport { auth } from '../lib/supabase';\n\n// Get API URL from constants\nconst API_URL = Constants.expoConfig?.extra?.apiUrl as string;\n\ninterface APIResponse<T = any> {\n  success: boolean;\n  data?: T;\n  message?: string;\n  error?: string;\n}\n\nexport function useAPI() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Fetch data from API with authentication\n   */\n  const fetchWithAuth = useCallback(\n    async <T = any>(\n      endpoint: string,\n      options: RequestInit = {}\n    ): Promise<APIResponse<T> | null> => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Get the user's JWT token\n        const {\n          data: { session },\n        } = await auth.getSession();\n\n        if (!session) {\n          throw new Error('No authenticated session found');\n        }\n\n        const url = `${API_URL}${endpoint}`;\n        const headers = {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${session.access_token}`,\n          ...options.headers,\n        };\n\n        const response = await fetch(url, {\n          ...options,\n          headers,\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n          throw new Error(\n            data.message || 'An error occurred while fetching data'\n          );\n        }\n\n        return data;\n      } catch (err: any) {\n        setError(err.message || 'An error occurred');\n        console.error('API Error:', err);\n\n        if (err.message === 'No authenticated session found') {\n          // Handle unauthenticated error - this could redirect to login\n          Alert.alert(\n            'Session Expired',\n            'Your session has expired. Please sign in again.',\n            [\n              {\n                text: 'OK',\n                onPress: () => auth.signOut(),\n              },\n            ]\n          );\n        }\n\n        return null;\n      } finally {\n        setLoading(false);\n      }\n    },\n    []\n  );\n\n  /**\n   * Fetch data from API without authentication\n   */\n  const fetchWithoutAuth = useCallback(\n    async <T = any>(\n      endpoint: string,\n      options: RequestInit = {}\n    ): Promise<APIResponse<T> | null> => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const url = `${API_URL}${endpoint}`;\n        const headers = {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        };\n\n        const response = await fetch(url, {\n          ...options,\n          headers,\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n          throw new Error(\n            data.message || 'An error occurred while fetching data'\n          );\n        }\n\n        return data;\n      } catch (err: any) {\n        setError(err.message || 'An error occurred');\n        console.error('API Error:', err);\n        return null;\n      } finally {\n        setLoading(false);\n      }\n    },\n    []\n  );\n\n  return {\n    loading,\n    error,\n    fetchWithAuth,\n    fetchWithoutAuth,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/hooks/useDriverLocation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Location' is defined but never used.","line":6,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useDriverLocation.ts\nimport { useEffect, useState } from 'react';\nimport { realtimeService, DriverLocation } from '../services/RealtimeService';\nimport { RealtimeChannel } from '@supabase/supabase-js';\nimport { supabase } from '../lib/supabase';\nimport * as Location from 'expo-location';\n\ninterface UseDriverLocationProps {\n  shipmentId: string;\n  isDriver?: boolean;\n  driverId?: string;\n}\n\n/**\n * Hook for real-time driver location tracking\n *\n * This hook handles both sending location updates (when used by a driver)\n * and receiving location updates (when used by a client)\n *\n * @param props Object containing shipmentId, isDriver flag, and optional driverId\n * @returns Object containing location data and tracking status\n *\n * @example\n * ```tsx\n * // For a driver to send their location:\n * const {\n *   startTracking,\n *   stopTracking,\n *   isTracking\n * } = useDriverLocation({\n *   shipmentId,\n *   isDriver: true,\n * });\n *\n * // Start tracking when delivery begins\n * useEffect(() => {\n *   if (shipmentStatus === 'in_transit') {\n *     startTracking();\n *   } else {\n *     stopTracking();\n *   }\n * }, [shipmentStatus]);\n *\n * // For a client to receive driver location:\n * const {\n *   driverLocation,\n *   error\n * } = useDriverLocation({\n *   shipmentId,\n *   isDriver: false,\n * });\n *\n * // Use driver location to update a map\n * useEffect(() => {\n *   if (driverLocation) {\n *     mapRef.current?.animateToRegion({\n *       latitude: driverLocation.latitude,\n *       longitude: driverLocation.longitude,\n *       latitudeDelta: 0.005,\n *       longitudeDelta: 0.005,\n *     });\n *   }\n * }, [driverLocation]);\n * ```\n */\nexport function useDriverLocation({\n  shipmentId,\n  isDriver = false,\n  driverId,\n}: UseDriverLocationProps) {\n  const [driverLocation, setDriverLocation] = useState<DriverLocation | null>(\n    null\n  );\n  const [isTracking, setIsTracking] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [channel, setChannel] = useState<RealtimeChannel | null>(null);\n\n  // For clients: Subscribe to driver location updates\n  useEffect(() => {\n    if (isDriver || !shipmentId) return;\n\n    const handleLocationUpdate = (location: DriverLocation) => {\n      setDriverLocation(location);\n    };\n\n    // Get the most recent location first\n    const fetchLatestLocation = async () => {\n      try {\n        const { data, error } = await supabase.rpc(\n          'get_latest_driver_location',\n          { p_shipment_id: shipmentId }\n        );\n\n        if (error) throw error;\n        if (data && data.length > 0) {\n          setDriverLocation(data[0] as unknown as DriverLocation);\n        }\n      } catch (err) {\n        console.error('Error fetching latest driver location:', err);\n      }\n    };\n\n    fetchLatestLocation();\n\n    // Subscribe to real-time updates\n    const newChannel = realtimeService.subscribeToDriverLocation(\n      shipmentId,\n      handleLocationUpdate\n    );\n\n    setChannel(newChannel);\n\n    // Cleanup function\n    return () => {\n      realtimeService.unsubscribeFromDriverLocation();\n    };\n  }, [shipmentId, isDriver]);\n\n  // For drivers: Start sending location updates\n  const startTracking = async () => {\n    if (!isDriver || !shipmentId || !driverId) {\n      setError(new Error('Cannot start tracking: missing required parameters'));\n      return false;\n    }\n\n    try {\n      const success = await realtimeService.startLocationTracking(\n        shipmentId,\n        driverId,\n        () => setError(new Error('Location permission denied'))\n      );\n\n      setIsTracking(success);\n      return success;\n    } catch (err) {\n      console.error('Error starting location tracking:', err);\n      setError(err instanceof Error ? err : new Error(String(err)));\n      return false;\n    }\n  };\n\n  // For drivers: Stop sending location updates\n  const stopTracking = () => {\n    if (isDriver) {\n      realtimeService.stopLocationTracking();\n      setIsTracking(false);\n    }\n  };\n\n  // Clean up tracking when component unmounts\n  useEffect(() => {\n    return () => {\n      if (isDriver && isTracking) {\n        realtimeService.stopLocationTracking();\n      }\n    };\n  }, [isDriver, isTracking]);\n\n  return {\n    driverLocation,\n    isTracking,\n    error,\n    startTracking,\n    stopTracking,\n    channel,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/hooks/useFetch.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[374,377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[374,377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\n\ninterface FetchOptions extends RequestInit {\n  authenticated?: boolean;\n}\n\ninterface UseFetchResult<T> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n}\n\n/**\n * Custom hook for making API requests\n */\nexport function useFetch<T = any>(\n  url: string,\n  options: FetchOptions = {}\n): UseFetchResult<T> {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const { session } = useAuth();\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Add authentication header if requested and session exists\n      if (options.authenticated && session?.access_token) {\n        if (!options.headers) {\n          options.headers = {};\n        }\n\n        // Add as object to avoid TypeScript errors with Headers\n        options.headers = {\n          ...(options.headers as object),\n          Authorization: `Bearer ${session.access_token}`,\n        };\n      }\n\n      const response = await fetch(url, options);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(errorText || `HTTP error ${response.status}`);\n      }\n\n      const result = await response.json();\n      setData(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [url]);\n\n  const refetch = async () => {\n    await fetchData();\n  };\n\n  return { data, loading, error, refetch };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/hooks/useRealtimeMessages.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'realtimeService' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useRealtimeMessages.ts\nimport { useEffect, useState } from 'react';\nimport { realtimeService } from '../services/RealtimeService';\nimport { Database } from '../lib/database.types';\nimport { RealtimeChannel } from '@supabase/supabase-js';\nimport { supabase } from '../lib/supabase';\n\n// Type definitions\ntype MessageData = Database['public']['Tables']['messages']['Row'];\ntype NewMessage = Database['public']['Tables']['messages']['Insert'];\n\n/**\n * Hook for real-time messaging functionality\n *\n * @param shipmentId The ID of the shipment for messaging context\n * @returns Object containing messages, loading state, error state, and functions to send/mark messages as read\n *\n * @example\n * ```tsx\n * // In a chat component:\n * const {\n *   messages,\n *   loading,\n *   error,\n *   sendMessage,\n *   markAsRead\n * } = useRealtimeMessages(shipmentId);\n *\n * // Send a new message\n * const handleSend = () => {\n *   sendMessage(messageText);\n * };\n *\n * // Messages will update in real-time\n * return (\n *   <FlatList\n *     data={messages}\n *     renderItem={({item}) => (\n *       <MessageBubble\n *         message={item}\n *         onPress={() => markAsRead(item.id)}\n *       />\n *     )}\n *   />\n * );\n * ```\n */\nexport function useRealtimeMessages(shipmentId: string) {\n  const [messages, setMessages] = useState<MessageData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [channel, setChannel] = useState<RealtimeChannel | null>(null);\n\n  // Fetch existing messages when the component mounts\n  useEffect(() => {\n    if (!shipmentId) return;\n\n    const fetchMessages = async () => {\n      try {\n        setLoading(true);\n        const { data, error } = await supabase\n          .from('messages')\n          .select('*')\n          .eq('shipment_id', shipmentId)\n          .order('created_at', { ascending: true });\n\n        if (error) throw error;\n        setMessages(data || []);\n      } catch (err) {\n        console.error('Error fetching messages:', err);\n        setError(err instanceof Error ? err : new Error(String(err)));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMessages();\n\n    // Handler for new messages\n    const handleNewMessage = (message: MessageData) => {\n      setMessages(prev => {\n        // Check if we already have this message to avoid duplicates\n        if (prev.some(m => m.id === message.id)) {\n          return prev;\n        }\n        return [...prev, message];\n      });\n    };\n\n    // Subscribe to new messages\n    const newChannel = supabase\n      .channel(`messages:${shipmentId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'messages',\n          filter: `shipment_id=eq.${shipmentId}`,\n        },\n        payload => {\n          console.log('New message received:', payload);\n          handleNewMessage(payload.new as MessageData);\n        }\n      )\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'messages',\n          filter: `shipment_id=eq.${shipmentId}`,\n        },\n        payload => {\n          console.log('Message updated:', payload);\n          // Update the message in our state\n          setMessages(prev =>\n            prev.map(msg =>\n              msg.id === payload.new.id ? (payload.new as MessageData) : msg\n            )\n          );\n        }\n      )\n      .subscribe();\n\n    setChannel(newChannel);\n\n    // Cleanup function\n    return () => {\n      if (newChannel) {\n        supabase.removeChannel(newChannel);\n      }\n    };\n  }, [shipmentId]);\n\n  // Function to send a new message\n  const sendMessage = async (content: string, senderId: string) => {\n    if (!content.trim() || !shipmentId || !senderId) return;\n\n    try {\n      const newMessage: NewMessage = {\n        shipment_id: shipmentId,\n        sender_id: senderId,\n        content: content.trim(),\n        is_read: false,\n      };\n\n      const { error } = await supabase.from('messages').insert(newMessage);\n\n      if (error) throw error;\n    } catch (err) {\n      console.error('Error sending message:', err);\n      setError(err instanceof Error ? err : new Error(String(err)));\n    }\n  };\n\n  // Function to mark a message as read\n  const markAsRead = async (messageId: string) => {\n    try {\n      const { error } = await supabase.rpc('mark_message_as_read', {\n        p_message_id: messageId,\n        p_user_id: (await supabase.auth.getUser()).data.user?.id,\n      });\n\n      if (error) throw error;\n\n      // Update local state to show message as read\n      setMessages(prev =>\n        prev.map(msg =>\n          msg.id === messageId ? { ...msg, is_read: true } : msg\n        )\n      );\n    } catch (err) {\n      console.error('Error marking message as read:', err);\n    }\n  };\n\n  return {\n    messages,\n    loading,\n    error,\n    sendMessage,\n    markAsRead,\n    channel,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/hooks/useRealtimeShipment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/hooks/useRoleCheck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/hooks/useRoleCheck.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/lib/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/lib/database.types.update.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/lib/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/navigation/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/navigation/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/NetworkDiagnosticScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1574,1577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1574,1577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3105,3108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3105,3108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#f5f5f5' }","line":169,"column":14,"nodeType":"ObjectExpression","endLine":173,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#333' }","line":174,"column":10,"nodeType":"ObjectExpression","endLine":179,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#fff', shadowColor: '#000' }","line":180,"column":12,"nodeType":"ObjectExpression","endLine":190,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#333' }","line":191,"column":17,"nodeType":"ObjectExpression","endLine":196,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#666' }","line":201,"column":10,"nodeType":"ObjectExpression","endLine":206,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#333' }","line":207,"column":10,"nodeType":"ObjectExpression","endLine":210,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#1E88E5' }","line":211,"column":11,"nodeType":"ObjectExpression","endLine":217,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#90CAF9' }","line":218,"column":19,"nodeType":"ObjectExpression","endLine":220,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#fff' }","line":221,"column":15,"nodeType":"ObjectExpression","endLine":225,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#FFF5F5', borderColor: '#E53935' }","line":226,"column":19,"nodeType":"ObjectExpression","endLine":232,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#E53935' }","line":233,"column":15,"nodeType":"ObjectExpression","endLine":237,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#333' }","line":238,"column":17,"nodeType":"ObjectExpression","endLine":240,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Alert,\n  TouchableOpacity,\n  ActivityIndicator,\n} from 'react-native';\n\n// Simple diagnostic screen without external dependencies\nexport default function NetworkDiagnosticScreen() {\n  const [apiUrl, setApiUrl] = useState<string | null>(null);\n  const [supabaseUrl, setSupabaseUrl] = useState<string | null>(null);\n  const [testing, setTesting] = useState(false);\n  const [errorDetails, setErrorDetails] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Get environment variables\n    setApiUrl(process.env.EXPO_PUBLIC_API_URL || 'Not defined');\n    setSupabaseUrl(process.env.EXPO_PUBLIC_SUPABASE_URL || 'Not defined');\n  }, []);\n\n  const testApiConnection = async () => {\n    if (!process.env.EXPO_PUBLIC_API_URL) {\n      setErrorDetails('API URL is not defined in environment variables');\n      return;\n    }\n\n    try {\n      setTesting(true);\n      setErrorDetails(null);\n\n      // Test API connection with health endpoint\n      const response = await fetch(\n        `${process.env.EXPO_PUBLIC_API_URL}/api/health`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      if (response.ok) {\n        Alert.alert('Success', 'API connection successful!');\n      } else {\n        const text = await response.text();\n        setErrorDetails(`API Error (${response.status}): ${text}`);\n        Alert.alert('Error', `API Error (${response.status}): ${text}`);\n      }\n    } catch (error: any) {\n      setErrorDetails(`Network Error: ${error.message}`);\n      Alert.alert('Network Error', error.message);\n      console.error('API connection error:', error);\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  const testDriverApplicationsApi = async () => {\n    if (!process.env.EXPO_PUBLIC_API_URL) {\n      Alert.alert('Error', 'API URL is not defined in environment variables');\n      return;\n    }\n\n    try {\n      setTesting(true);\n      setErrorDetails(null);\n\n      console.log('Testing driver applications API...');\n      console.log(\n        'URL:',\n        `${process.env.EXPO_PUBLIC_API_URL}/api/v1/drivers/applications`\n      );\n\n      // Test the specific endpoint\n      const response = await fetch(\n        `${process.env.EXPO_PUBLIC_API_URL}/api/v1/drivers/applications`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const contentType = response.headers.get('content-type');\n      let result;\n\n      try {\n        if (contentType && contentType.includes('application/json')) {\n          result = await response.json();\n        } else {\n          const text = await response.text();\n          result = { text };\n        }\n      } catch (e) {\n        result = { parseError: (e as Error).message };\n      }\n\n      Alert.alert(\n        response.ok ? 'Success' : 'Error',\n        `Status: ${response.status} ${response.statusText}\\n\\nResponse: ${JSON.stringify(result, null, 2)}`\n      );\n    } catch (error: any) {\n      Alert.alert('Network Error', error.message);\n      console.error('Driver applications API error:', error);\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Network Diagnostic Tool</Text>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Environment</Text>\n        <View style={styles.infoRow}>\n          <Text style={styles.label}>API URL:</Text>\n          <Text style={styles.value}>{apiUrl}</Text>\n        </View>\n        <View style={styles.infoRow}>\n          <Text style={styles.label}>Supabase URL:</Text>\n          <Text style={styles.value}>{supabaseUrl}</Text>\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Connection Tests</Text>\n\n        <TouchableOpacity\n          style={[styles.button, testing ? styles.buttonDisabled : null]}\n          onPress={testApiConnection}\n          disabled={testing}\n        >\n          {testing ? (\n            <ActivityIndicator size=\"small\" color=\"#ffffff\" />\n          ) : (\n            <Text style={styles.buttonText}>Test API Connection</Text>\n          )}\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.button, testing ? styles.buttonDisabled : null]}\n          onPress={testDriverApplicationsApi}\n          disabled={testing}\n        >\n          {testing ? (\n            <ActivityIndicator size=\"small\" color=\"#ffffff\" />\n          ) : (\n            <Text style={styles.buttonText}>Test Applications API</Text>\n          )}\n        </TouchableOpacity>\n      </View>\n\n      {errorDetails && (\n        <View style={styles.errorContainer}>\n          <Text style={styles.errorTitle}>Error Details:</Text>\n          <Text style={styles.errorMessage}>{errorDetails}</Text>\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#f5f5f5',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 24,\n    color: '#333',\n  },\n  section: {\n    marginBottom: 24,\n    backgroundColor: '#fff',\n    padding: 16,\n    borderRadius: 8,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 16,\n    color: '#333',\n  },\n  infoRow: {\n    flexDirection: 'row',\n    marginBottom: 8,\n  },\n  label: {\n    fontWeight: '600',\n    marginRight: 8,\n    width: 100,\n    color: '#666',\n  },\n  value: {\n    flex: 1,\n    color: '#333',\n  },\n  button: {\n    backgroundColor: '#1E88E5',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  buttonDisabled: {\n    backgroundColor: '#90CAF9',\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: '600',\n    fontSize: 14,\n  },\n  errorContainer: {\n    padding: 16,\n    backgroundColor: '#FFF5F5',\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#E53935',\n  },\n  errorTitle: {\n    fontWeight: 'bold',\n    color: '#E53935',\n    marginBottom: 8,\n  },\n  errorMessage: {\n    color: '#333',\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/NotificationTestScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ActivityIndicator' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'realtimeService' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":25},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#f5f5f5' }","line":320,"column":14,"nodeType":"ObjectExpression","endLine":323,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#555' }","line":340,"column":16,"nodeType":"ObjectExpression","endLine":343,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#4CAF50' }","line":344,"column":15,"nodeType":"ObjectExpression","endLine":347,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#F44336' }","line":348,"column":14,"nodeType":"ObjectExpression","endLine":351,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#9E9E9E' }","line":352,"column":18,"nodeType":"ObjectExpression","endLine":355,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#1E88E5' }","line":363,"column":18,"nodeType":"ObjectExpression","endLine":365,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#4CAF50' }","line":366,"column":20,"nodeType":"ObjectExpression","endLine":368,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#FF9800' }","line":369,"column":19,"nodeType":"ObjectExpression","endLine":371,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#1E88E5' }","line":382,"column":16,"nodeType":"ObjectExpression","endLine":385,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#9E9E9E' }","line":386,"column":14,"nodeType":"ObjectExpression","endLine":391,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#4CAF50' }","line":408,"column":21,"nodeType":"ObjectExpression","endLine":410,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#F44336' }","line":411,"column":19,"nodeType":"ObjectExpression","endLine":413,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#4CAF50' }","line":418,"column":16,"nodeType":"ObjectExpression","endLine":421,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#F44336' }","line":422,"column":14,"nodeType":"ObjectExpression","endLine":425,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#757575' }","line":426,"column":18,"nodeType":"ObjectExpression","endLine":431,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/screens/NotificationTestScreen.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  View,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  ActivityIndicator,\n} from 'react-native';\nimport { Text, Button, Card, Divider } from '@rneui/themed';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useNotifications } from '../contexts/NotificationContext';\nimport { notificationService } from '../services/NotificationService';\nimport { realtimeService } from '../services/RealtimeService';\nimport { offlineService } from '../services/OfflineService';\nimport { supabase } from '../lib/supabase';\nimport { useAuth } from '../context/AuthContext';\n\nexport default function NotificationTestScreen() {\n  const { pushToken, hasPermission, preferences } = useNotifications();\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [lastSyncTime, setLastSyncTime] = useState<string | null>(null);\n  const [realtimeStatus, setRealtimeStatus] = useState<\n    'connected' | 'disconnected'\n  >('disconnected');\n  const [testResults, setTestResults] = useState<\n    Array<{ type: string; success: boolean; message: string }>\n  >([]);\n\n  useEffect(() => {\n    checkRealtimeStatus();\n    loadSyncTimestamp();\n\n    return () => {\n      // Clean up any subscriptions if needed\n    };\n  }, []);\n\n  const checkRealtimeStatus = async () => {\n    try {\n      const { data } = await supabase.from('shipments').select('id').limit(1);\n      if (data) {\n        setRealtimeStatus('connected');\n      } else {\n        setRealtimeStatus('disconnected');\n      }\n    } catch (error) {\n      console.error('Error checking realtime status:', error);\n      setRealtimeStatus('disconnected');\n    }\n  };\n\n  const loadSyncTimestamp = async () => {\n    const timestamps = await offlineService.getSyncTimestamps();\n    if (timestamps.shipments) {\n      setLastSyncTime(new Date(timestamps.shipments).toLocaleString());\n    }\n  };\n\n  const testLocalNotification = async () => {\n    setLoading(true);\n    try {\n      await notificationService.sendLocalNotification(\n        'Test Notification',\n        'This is a test notification from the test screen',\n        { type: 'test' }\n      );\n      addTestResult(\n        'Local Notification',\n        true,\n        'Successfully sent local notification'\n      );\n    } catch (error) {\n      console.error('Error sending local notification:', error);\n      addTestResult('Local Notification', false, `Error: ${error}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const testShipmentNotification = async () => {\n    setLoading(true);\n    try {\n      await notificationService.sendLocalNotification(\n        'Shipment Update',\n        'Your shipment has been picked up by the driver',\n        {\n          type: 'shipment_update',\n          shipmentId: 'test-shipment-id',\n          status: 'in_transit',\n        }\n      );\n      addTestResult(\n        'Shipment Notification',\n        true,\n        'Successfully sent shipment notification'\n      );\n    } catch (error) {\n      console.error('Error sending shipment notification:', error);\n      addTestResult('Shipment Notification', false, `Error: ${error}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const testMessageNotification = async () => {\n    setLoading(true);\n    try {\n      await notificationService.sendLocalNotification(\n        'New Message',\n        'Driver: I am 10 minutes away from the pickup location',\n        {\n          type: 'new_message',\n          shipmentId: 'test-shipment-id',\n          messageId: 'test-message-id',\n        }\n      );\n      addTestResult(\n        'Message Notification',\n        true,\n        'Successfully sent message notification'\n      );\n    } catch (error) {\n      console.error('Error sending message notification:', error);\n      addTestResult('Message Notification', false, `Error: ${error}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const testOfflineSync = async () => {\n    setLoading(true);\n    try {\n      if (!user) {\n        addTestResult('Offline Sync', false, 'User not logged in');\n        return;\n      }\n\n      // Sync shipments for the current user\n      const shipments = await offlineService.syncShipments(user.id);\n      addTestResult(\n        'Offline Sync',\n        true,\n        `Successfully synced ${shipments.length} shipments`\n      );\n\n      // Update last sync time\n      await loadSyncTimestamp();\n    } catch (error) {\n      console.error('Error testing offline sync:', error);\n      addTestResult('Offline Sync', false, `Error: ${error}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addTestResult = (type: string, success: boolean, message: string) => {\n    setTestResults(prev => [\n      { type, success, message, timestamp: new Date().toISOString() },\n      ...prev.slice(0, 9), // Keep only the last 10 results\n    ]);\n  };\n\n  const clearTestResults = () => {\n    setTestResults([]);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView>\n        <Text h4 style={styles.title}>\n          Notification Test Center\n        </Text>\n\n        {/* Status Panel */}\n        <Card containerStyle={styles.card}>\n          <Card.Title>System Status</Card.Title>\n          <Card.Divider />\n\n          <View style={styles.statusRow}>\n            <Text style={styles.statusLabel}>Push Permissions:</Text>\n            <Text style={hasPermission ? styles.statusGood : styles.statusBad}>\n              {hasPermission ? 'Granted' : 'Not Granted'}\n            </Text>\n          </View>\n\n          <View style={styles.statusRow}>\n            <Text style={styles.statusLabel}>Push Token:</Text>\n            <Text style={pushToken ? styles.statusGood : styles.statusBad}>\n              {pushToken ? 'Available' : 'Not Available'}\n            </Text>\n          </View>\n\n          <View style={styles.statusRow}>\n            <Text style={styles.statusLabel}>Supabase Connection:</Text>\n            <Text\n              style={\n                realtimeStatus === 'connected'\n                  ? styles.statusGood\n                  : styles.statusBad\n              }\n            >\n              {realtimeStatus}\n            </Text>\n          </View>\n\n          <View style={styles.statusRow}>\n            <Text style={styles.statusLabel}>Last Sync:</Text>\n            <Text\n              style={lastSyncTime ? styles.statusGood : styles.statusNeutral}\n            >\n              {lastSyncTime || 'Never'}\n            </Text>\n          </View>\n\n          <View style={styles.statusRow}>\n            <Text style={styles.statusLabel}>Push Enabled:</Text>\n            <Text\n              style={\n                preferences.pushEnabled ? styles.statusGood : styles.statusBad\n              }\n            >\n              {preferences.pushEnabled ? 'Yes' : 'No'}\n            </Text>\n          </View>\n        </Card>\n\n        {/* Test Actions */}\n        <Card containerStyle={styles.card}>\n          <Card.Title>Test Actions</Card.Title>\n          <Card.Divider />\n\n          <Button\n            title=\"Test Local Notification\"\n            onPress={testLocalNotification}\n            loading={loading}\n            disabled={loading}\n            buttonStyle={[styles.button, styles.buttonPrimary]}\n            containerStyle={styles.buttonContainer}\n          />\n\n          <Button\n            title=\"Test Shipment Update\"\n            onPress={testShipmentNotification}\n            loading={loading}\n            disabled={loading}\n            buttonStyle={[styles.button, styles.buttonSecondary]}\n            containerStyle={styles.buttonContainer}\n          />\n\n          <Button\n            title=\"Test Message Notification\"\n            onPress={testMessageNotification}\n            loading={loading}\n            disabled={loading}\n            buttonStyle={[styles.button, styles.buttonSecondary]}\n            containerStyle={styles.buttonContainer}\n          />\n\n          <Button\n            title=\"Test Offline Sync\"\n            onPress={testOfflineSync}\n            loading={loading}\n            disabled={loading}\n            buttonStyle={[styles.button, styles.buttonTertiary]}\n            containerStyle={styles.buttonContainer}\n          />\n        </Card>\n\n        {/* Test Results */}\n        <Card containerStyle={styles.card}>\n          <View style={styles.resultsTitleContainer}>\n            <Text style={styles.resultsTitle}>Test Results</Text>\n            <TouchableOpacity onPress={clearTestResults}>\n              <Text style={styles.clearButton}>Clear</Text>\n            </TouchableOpacity>\n          </View>\n          <Card.Divider />\n\n          {testResults.length === 0 ? (\n            <Text style={styles.noResults}>No test results yet</Text>\n          ) : (\n            testResults.map((result, index) => (\n              <View key={index}>\n                <View style={styles.resultRow}>\n                  <View style={styles.resultTypeContainer}>\n                    <View\n                      style={[\n                        styles.resultIndicator,\n                        result.success\n                          ? styles.successIndicator\n                          : styles.errorIndicator,\n                      ]}\n                    />\n                    <Text style={styles.resultType}>{result.type}</Text>\n                  </View>\n                  <Text\n                    style={\n                      result.success ? styles.successText : styles.errorText\n                    }\n                  >\n                    {result.success ? 'Success' : 'Failed'}\n                  </Text>\n                </View>\n                <Text style={styles.resultMessage}>{result.message}</Text>\n                {index < testResults.length - 1 && (\n                  <Divider style={styles.resultDivider} />\n                )}\n              </View>\n            ))\n          )}\n        </Card>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  title: {\n    paddingHorizontal: 16,\n    paddingTop: 16,\n    paddingBottom: 8,\n  },\n  card: {\n    borderRadius: 8,\n    marginHorizontal: 16,\n    marginBottom: 16,\n    padding: 16,\n  },\n  statusRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n  },\n  statusLabel: {\n    fontSize: 16,\n    color: '#555',\n  },\n  statusGood: {\n    color: '#4CAF50',\n    fontWeight: 'bold',\n  },\n  statusBad: {\n    color: '#F44336',\n    fontWeight: 'bold',\n  },\n  statusNeutral: {\n    color: '#9E9E9E',\n    fontStyle: 'italic',\n  },\n  buttonContainer: {\n    marginVertical: 8,\n  },\n  button: {\n    borderRadius: 8,\n    paddingVertical: 12,\n  },\n  buttonPrimary: {\n    backgroundColor: '#1E88E5',\n  },\n  buttonSecondary: {\n    backgroundColor: '#4CAF50',\n  },\n  buttonTertiary: {\n    backgroundColor: '#FF9800',\n  },\n  resultsTitleContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  resultsTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  clearButton: {\n    color: '#1E88E5',\n    fontSize: 16,\n  },\n  noResults: {\n    textAlign: 'center',\n    color: '#9E9E9E',\n    fontStyle: 'italic',\n    paddingVertical: 16,\n  },\n  resultRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginVertical: 8,\n  },\n  resultTypeContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  resultIndicator: {\n    width: 10,\n    height: 10,\n    borderRadius: 5,\n    marginRight: 8,\n  },\n  successIndicator: {\n    backgroundColor: '#4CAF50',\n  },\n  errorIndicator: {\n    backgroundColor: '#F44336',\n  },\n  resultType: {\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  successText: {\n    color: '#4CAF50',\n    fontWeight: 'bold',\n  },\n  errorText: {\n    color: '#F44336',\n    fontWeight: 'bold',\n  },\n  resultMessage: {\n    fontSize: 14,\n    color: '#757575',\n    marginBottom: 8,\n    marginLeft: 18,\n  },\n  resultDivider: {\n    marginVertical: 8,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/SettingsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ActivityIndicator' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'auth' is assigned a value but never used.","line":29,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":13},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginTop: 8 }","line":242,"column":29,"nodeType":"ObjectExpression","endLine":242,"endColumn":45},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#fff' }","line":259,"column":14,"nodeType":"ObjectExpression","endLine":262,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#666' }","line":284,"column":19,"nodeType":"ObjectExpression","endLine":289,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#1E88E5' }","line":293,"column":15,"nodeType":"ObjectExpression","endLine":297,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { borderColor: '#f44336' }","line":301,"column":18,"nodeType":"ObjectExpression","endLine":304,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#f44336' }","line":305,"column":22,"nodeType":"ObjectExpression","endLine":307,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/screens/SettingsScreen.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  View,\n  StyleSheet,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { Text, Switch, Divider, Button } from '@rneui/themed';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { useNotifications } from '../contexts/NotificationContext';\nimport { useAuth } from '../context/AuthContext';\nimport { NotificationPreferences } from '../services/NotificationService';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { RootStackParamList } from '../navigation/types';\nimport { supabase } from '../lib/supabase';\n\nexport default function SettingsScreen() {\n  const {\n    preferences,\n    updatePreferences,\n    hasPermission,\n    requestPermissions,\n    sendTestNotification,\n  } = useNotifications();\n  const { user } = useAuth();\n  const auth = useAuth(); // Get the full auth object\n  const navigation =\n    useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n  const [saving, setSaving] = useState(false);\n  const [localPrefs, setLocalPrefs] = useState<NotificationPreferences>({\n    pushEnabled: true,\n    emailEnabled: true,\n    smsEnabled: false,\n    shipmentUpdates: true,\n    driverAssigned: true,\n    paymentUpdates: true,\n    promotions: false,\n  });\n\n  // Load preferences\n  useEffect(() => {\n    setLocalPrefs(preferences);\n  }, [preferences]);\n\n  const handleToggle = (key: keyof NotificationPreferences) => {\n    setLocalPrefs({\n      ...localPrefs,\n      [key]: !localPrefs[key],\n    });\n  };\n\n  const savePreferences = async () => {\n    setSaving(true);\n    try {\n      await updatePreferences(localPrefs);\n      Alert.alert('Success', 'Your notification preferences have been saved.');\n    } catch (error) {\n      console.error('Error saving preferences:', error);\n      Alert.alert(\n        'Error',\n        'Failed to save notification preferences. Please try again.'\n      );\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleSignOut = async () => {\n    Alert.alert('Sign Out', 'Are you sure you want to sign out?', [\n      {\n        text: 'Cancel',\n        style: 'cancel',\n      },\n      {\n        text: 'Sign Out',\n        onPress: async () => {\n          try {\n            await supabase.auth.signOut();\n            // The auth context will handle navigation\n          } catch (error) {\n            console.error('Error signing out:', error);\n            Alert.alert('Error', 'Failed to sign out');\n          }\n        },\n        style: 'destructive',\n      },\n    ]);\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView>\n        <Text h4 style={styles.title}>\n          Settings\n        </Text>\n\n        <View style={styles.section}>\n          <Text h4 style={styles.sectionTitle}>\n            Notification Preferences\n          </Text>\n\n          <View style={styles.toggleRow}>\n            <View>\n              <Text style={styles.toggleTitle}>Push Notifications</Text>\n              <Text style={styles.toggleSubtitle}>\n                {hasPermission\n                  ? 'Receive notifications on this device'\n                  : 'Push notifications are disabled'}\n              </Text>\n            </View>\n            <Switch\n              value={hasPermission && localPrefs.pushEnabled}\n              onValueChange={() => {\n                if (!hasPermission) {\n                  requestPermissions();\n                } else {\n                  handleToggle('pushEnabled');\n                }\n              }}\n            />\n          </View>\n\n          <View style={styles.toggleRow}>\n            <View>\n              <Text style={styles.toggleTitle}>Email Notifications</Text>\n              <Text style={styles.toggleSubtitle}>\n                Receive notifications via email\n              </Text>\n            </View>\n            <Switch\n              value={localPrefs.emailEnabled}\n              onValueChange={() => handleToggle('emailEnabled')}\n            />\n          </View>\n\n          <View style={styles.toggleRow}>\n            <View>\n              <Text style={styles.toggleTitle}>SMS Notifications</Text>\n              <Text style={styles.toggleSubtitle}>\n                Receive notifications via SMS\n              </Text>\n            </View>\n            <Switch\n              value={localPrefs.smsEnabled}\n              onValueChange={() => handleToggle('smsEnabled')}\n            />\n          </View>\n        </View>\n\n        <Divider style={styles.divider} />\n\n        <View style={styles.section}>\n          <Text h4 style={styles.sectionTitle}>\n            Notification Types\n          </Text>\n\n          <View style={styles.toggleRow}>\n            <View>\n              <Text style={styles.toggleTitle}>Shipment Updates</Text>\n              <Text style={styles.toggleSubtitle}>\n                Status changes and tracking updates\n              </Text>\n            </View>\n            <Switch\n              value={localPrefs.shipmentUpdates}\n              onValueChange={() => handleToggle('shipmentUpdates')}\n            />\n          </View>\n\n          <View style={styles.toggleRow}>\n            <View>\n              <Text style={styles.toggleTitle}>Driver Assigned</Text>\n              <Text style={styles.toggleSubtitle}>\n                When a driver accepts your shipment\n              </Text>\n            </View>\n            <Switch\n              value={localPrefs.driverAssigned}\n              onValueChange={() => handleToggle('driverAssigned')}\n            />\n          </View>\n\n          <View style={styles.toggleRow}>\n            <View>\n              <Text style={styles.toggleTitle}>Payment Updates</Text>\n              <Text style={styles.toggleSubtitle}>\n                Payment confirmations and receipts\n              </Text>\n            </View>\n            <Switch\n              value={localPrefs.paymentUpdates}\n              onValueChange={() => handleToggle('paymentUpdates')}\n            />\n          </View>\n\n          <View style={styles.toggleRow}>\n            <View>\n              <Text style={styles.toggleTitle}>Promotions</Text>\n              <Text style={styles.toggleSubtitle}>\n                Special offers and promotions\n              </Text>\n            </View>\n            <Switch\n              value={localPrefs.promotions}\n              onValueChange={() => handleToggle('promotions')}\n            />\n          </View>\n        </View>\n\n        <Button\n          title=\"Save Preferences\"\n          onPress={savePreferences}\n          loading={saving}\n          disabled={saving}\n          buttonStyle={styles.saveButton}\n        />\n\n        <Divider style={styles.divider} />\n\n        <View style={styles.section}>\n          <Text h4 style={styles.sectionTitle}>\n            Account\n          </Text>\n\n          <Text style={styles.infoText}>Signed in as: {user?.email}</Text>\n\n          <Button\n            title=\"Test Notification\"\n            type=\"outline\"\n            onPress={() => sendTestNotification()}\n            buttonStyle={styles.testButton}\n          />\n\n          <Button\n            title=\"Advanced Notification Testing\"\n            type=\"outline\"\n            onPress={() => navigation.navigate('NotificationTest')}\n            buttonStyle={styles.testButton}\n            containerStyle={{ marginTop: 8 }}\n          />\n\n          <Button\n            title=\"Sign Out\"\n            type=\"outline\"\n            onPress={handleSignOut}\n            buttonStyle={styles.signOutButton}\n            titleStyle={styles.signOutButtonText}\n          />\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  title: {\n    paddingHorizontal: 16,\n    paddingTop: 16,\n    paddingBottom: 8,\n  },\n  section: {\n    padding: 16,\n  },\n  sectionTitle: {\n    marginBottom: 16,\n  },\n  toggleRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n  },\n  toggleTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  toggleSubtitle: {\n    fontSize: 14,\n    color: '#666',\n    marginTop: 4,\n    maxWidth: '80%',\n  },\n  divider: {\n    marginVertical: 8,\n  },\n  saveButton: {\n    marginHorizontal: 16,\n    marginVertical: 16,\n    backgroundColor: '#1E88E5',\n  },\n  testButton: {\n    marginVertical: 8,\n  },\n  signOutButton: {\n    marginVertical: 8,\n    borderColor: '#f44336',\n  },\n  signOutButtonText: {\n    color: '#f44336',\n  },\n  infoText: {\n    fontSize: 16,\n    marginVertical: 16,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/admin/AdminAssignmentScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ScrollView' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ApplicationService' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1962,1965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1962,1965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4147,4150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4147,4150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5171,5174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5171,5174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5181,5184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5181,5184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'backendError' is defined but never used.","line":218,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":218,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8197,8200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8197,8200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":368,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11227,11230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11227,11230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":730,"column":16,"nodeType":"ObjectExpression","endLine":734,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#FFFFFF', shadowColor: '#000' }","line":749,"column":17,"nodeType":"ObjectExpression","endLine":759,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":779,"column":14,"nodeType":"ObjectExpression","endLine":783,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":842,"column":15,"nodeType":"ObjectExpression","endLine":846,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":877,"column":21,"nodeType":"ObjectExpression","endLine":881,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":910,"column":15,"nodeType":"ObjectExpression","endLine":914,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#f8f8f8' }","line":918,"column":28,"nodeType":"ObjectExpression","endLine":925,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":950,"column":26,"nodeType":"ObjectExpression","endLine":955,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(0, 0, 0, 0.5)' }","line":956,"column":17,"nodeType":"ObjectExpression","endLine":960,"endColumn":4}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  FlatList,\n  TouchableOpacity,\n  ActivityIndicator,\n  Alert,\n  RefreshControl,\n  ScrollView,\n  Modal,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\nimport { RootStackParamList } from '../../navigation/types';\nimport { Colors } from '../../constants/Colors';\nimport { ShipmentService } from '../../services/shipmentService';\nimport { getApiUrl } from '../../utils/environment';\nimport { ApplicationService } from '../../services/applicationService';\n\ntype AdminAssignmentScreenProps = NativeStackScreenProps<\n  RootStackParamList,\n  'AdminAssignment'\n>;\n\n// Define the types needed for our data\ninterface Driver {\n  id: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone?: string;\n  avatar_url?: string;\n  rating?: number;\n}\n\ninterface Application {\n  id: string;\n  driver_id: string;\n  shipment_id: string;\n  status: 'pending' | 'accepted' | 'rejected';\n  applied_at: string;\n  updated_at: string | null;\n  driver?: Driver;\n}\n\ninterface Shipment {\n  id: string;\n  title: string;\n  description?: string;\n  pickup_address: string;\n  delivery_address: string;\n  status: string;\n  created_at: string;\n  client_id: string;\n  driver_id: string | null;\n  estimated_price: number;\n  applications?: Application[];\n  expandedApplications?: boolean;\n}\n\nexport default function AdminAssignmentScreen({\n  navigation,\n}: AdminAssignmentScreenProps) {\n  const { userProfile } = useAuth();\n  const [shipments, setShipments] = useState<Shipment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  const [availableDrivers, setAvailableDrivers] = useState<any[]>([]);\n  const [selectedShipmentId, setSelectedShipmentId] = useState<string | null>(\n    null\n  );\n  const [isDriverModalVisible, setIsDriverModalVisible] = useState(false);\n\n  // Check if user is admin, redirect if not\n  useEffect(() => {\n    if (userProfile && userProfile.role !== 'admin') {\n      Alert.alert(\n        'Access Denied',\n        'You need admin privileges to access this screen.'\n      );\n      navigation.goBack();\n    }\n  }, [userProfile, navigation]);\n\n  // Load pending shipments on mount\n  useEffect(() => {\n    loadPendingShipments();\n    loadAvailableDrivers();\n  }, []);\n\n  const loadAvailableDrivers = async () => {\n    try {\n      const drivers = await ShipmentService.getAllAvailableDrivers();\n      setAvailableDrivers(drivers);\n    } catch (error) {\n      console.error('Error loading available drivers:', error);\n      Alert.alert('Error', 'Failed to load available drivers');\n    }\n  };\n\n  const loadPendingShipments = async () => {\n    try {\n      setLoading(true);\n      console.log('AdminScreen: Loading pending shipments...');\n\n      // Get pending shipments that don't have a driver assigned\n      const { data: pendingShipments, error } = await supabase\n        .from('shipments')\n        .select('*')\n        .eq('status', 'pending')\n        .is('driver_id', null)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Error fetching pending shipments:', error);\n        Alert.alert('Error', 'Failed to load pending shipments');\n        return;\n      }\n\n      console.log(\n        `AdminScreen: Found ${pendingShipments?.length || 0} pending shipments`\n      );\n\n      if (!pendingShipments || pendingShipments.length === 0) {\n        setShipments([]);\n        return;\n      }\n\n      // Load all applications at once instead of one by one\n      await loadAllApplicationsAtOnce(pendingShipments);\n    } catch (err) {\n      console.error('Error in loadPendingShipments:', err);\n      Alert.alert(\n        'Error',\n        'An unexpected error occurred while loading shipments'\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadAllApplicationsAtOnce = async (pendingShipments: any[]) => {\n    try {\n      // First try to use the new backend endpoint for all applications\n      try {\n        const session = await supabase.auth.getSession();\n        if (session.data.session?.access_token) {\n          console.log('AdminScreen: Fetching all applications from backend...');\n\n          const apiUrl = getApiUrl();\n          const response = await fetch(`${apiUrl}/api/v1/applications`, {\n            method: 'GET',\n            headers: {\n              Authorization: `Bearer ${session.data.session.access_token}`,\n              'Content-Type': 'application/json',\n            },\n          });\n\n          if (response.ok) {\n            const result = await response.json();\n            if (result.success && result.data) {\n              console.log(\n                `AdminScreen: Successfully loaded ${result.data.length} applications from backend`\n              );\n\n              // Group applications by shipment_id\n              const applicationsByShipment = result.data.reduce(\n                (acc: any, app: any) => {\n                  if (!acc[app.shipment_id]) {\n                    acc[app.shipment_id] = [];\n                  }\n                  acc[app.shipment_id].push({\n                    id: app.id,\n                    driver_id: app.driver_id,\n                    shipment_id: app.shipment_id,\n                    status: app.status,\n                    applied_at: app.applied_at,\n                    updated_at: app.updated_at,\n                    driver: app.driver\n                      ? {\n                          id: app.driver.id,\n                          first_name: app.driver.first_name,\n                          last_name: app.driver.last_name,\n                          email: app.driver.email,\n                          phone: app.driver.phone,\n                          avatar_url: app.driver.avatar_url,\n                          rating: app.driver.rating,\n                        }\n                      : undefined,\n                  });\n                  return acc;\n                },\n                {}\n              );\n\n              // Initialize shipments with their applications\n              const shipmentsWithApplications = pendingShipments.map(\n                shipment => ({\n                  ...shipment,\n                  applications: applicationsByShipment[shipment.id] || [],\n                  expandedApplications: false,\n                })\n              );\n\n              setShipments(shipmentsWithApplications);\n              console.log(\n                'AdminScreen: Successfully updated shipments with applications'\n              );\n              return;\n            }\n          }\n        }\n      } catch (backendError) {\n        console.log(\n          'AdminScreen: Backend endpoint failed, falling back to direct database queries'\n        );\n      }\n\n      // Fallback: Load applications using direct database queries (but more efficiently)\n      console.log(\n        'AdminScreen: Loading applications via direct database queries...'\n      );\n\n      const shipmentIds = pendingShipments.map(s => s.id);\n\n      // Get all applications for all shipments in one query\n      const { data: allApplications, error } = await supabase\n        .from('job_applications')\n        .select(\n          `\n          id, \n          shipment_id, \n          driver_id, \n          status, \n          applied_at, \n          responded_at,\n          updated_at,\n          profiles:driver_id (\n            id, \n            first_name, \n            last_name, \n            email, \n            phone, \n            avatar_url, \n            rating\n          )\n        `\n        )\n        .in('shipment_id', shipmentIds);\n\n      // Group applications by shipment\n      const applicationsByShipment: { [key: string]: Application[] } = {};\n\n      if (!error && allApplications) {\n        allApplications.forEach(app => {\n          if (!applicationsByShipment[app.shipment_id]) {\n            applicationsByShipment[app.shipment_id] = [];\n          }\n\n          const profileData = app.profiles as any;\n          applicationsByShipment[app.shipment_id].push({\n            id: app.id,\n            driver_id: app.driver_id,\n            shipment_id: app.shipment_id,\n            status: app.status as 'pending' | 'accepted' | 'rejected',\n            applied_at: app.applied_at,\n            updated_at: app.updated_at || app.responded_at || null,\n            driver: profileData\n              ? {\n                  id: profileData.id,\n                  first_name: profileData.first_name,\n                  last_name: profileData.last_name,\n                  email: profileData.email,\n                  phone: profileData.phone,\n                  avatar_url: profileData.avatar_url || undefined,\n                  rating: profileData.rating || undefined,\n                }\n              : undefined,\n          });\n        });\n      }\n\n      // Initialize shipments with their applications\n      const shipmentsWithApplications = pendingShipments.map(shipment => ({\n        ...shipment,\n        applications: applicationsByShipment[shipment.id] || [],\n        expandedApplications: false,\n      }));\n\n      setShipments(shipmentsWithApplications);\n      console.log(\n        `AdminScreen: Loaded applications for ${Object.keys(applicationsByShipment).length} shipments`\n      );\n    } catch (err) {\n      console.error('Error loading applications:', err);\n\n      // Final fallback: Initialize shipments without applications\n      const shipmentsWithoutApplications = pendingShipments.map(shipment => ({\n        ...shipment,\n        applications: [],\n        expandedApplications: false,\n      }));\n      setShipments(shipmentsWithoutApplications);\n    }\n  };\n\n  const assignDriver = async (shipmentId: string, driverId: string) => {\n    try {\n      setLoading(true);\n\n      // Update the shipment with the selected driver\n      const result = await ShipmentService.assignDriverToShipment(\n        shipmentId,\n        driverId\n      );\n\n      if (!result) {\n        Alert.alert('Error', 'Failed to assign driver to shipment');\n        return;\n      }\n\n      Alert.alert('Success', 'Driver assigned successfully!');\n\n      // Refresh the shipments list\n      loadPendingShipments();\n    } catch (err) {\n      console.error('Error in assignDriver:', err);\n      Alert.alert(\n        'Error',\n        'An unexpected error occurred while assigning driver'\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const confirmAssignment = (\n    shipmentId: string,\n    driverId: string,\n    driverName: string\n  ) => {\n    Alert.alert(\n      'Confirm Assignment',\n      `Are you sure you want to assign ${driverName} to this shipment?`,\n      [\n        {\n          text: 'Cancel',\n          style: 'cancel',\n        },\n        {\n          text: 'Assign',\n          onPress: () => assignDriver(shipmentId, driverId),\n        },\n      ]\n    );\n  };\n\n  const openQuickAssignModal = (shipmentId: string) => {\n    setSelectedShipmentId(shipmentId);\n    setIsDriverModalVisible(true);\n  };\n\n  const renderDriverItem = ({ item }: { item: any }) => (\n    <TouchableOpacity\n      style={styles.driverModalItem}\n      onPress={() => {\n        setIsDriverModalVisible(false);\n        if (selectedShipmentId) {\n          confirmAssignment(\n            selectedShipmentId,\n            item.id,\n            `${item.first_name} ${item.last_name}`\n          );\n        }\n      }}\n    >\n      <View style={styles.driverAvatar}>\n        <Text style={styles.avatarText}>\n          {item.first_name.charAt(0)}\n          {item.last_name.charAt(0)}\n        </Text>\n      </View>\n      <View style={styles.driverInfo}>\n        <Text style={styles.driverName}>\n          {item.first_name} {item.last_name}\n        </Text>\n        {item.rating && (\n          <View style={styles.ratingContainer}>\n            <MaterialIcons name=\"star\" size={16} color=\"#FFD700\" />\n            <Text style={styles.ratingText}>{item.rating.toFixed(1)}</Text>\n          </View>\n        )}\n      </View>\n      <MaterialIcons\n        name=\"arrow-forward-ios\"\n        size={16}\n        color={Colors.text.secondary}\n      />\n    </TouchableOpacity>\n  );\n\n  const toggleApplications = (shipmentId: string) => {\n    setShipments(prevShipments =>\n      prevShipments.map(shipment =>\n        shipment.id === shipmentId\n          ? {\n              ...shipment,\n              expandedApplications: !shipment.expandedApplications,\n            }\n          : shipment\n      )\n    );\n  };\n\n  const onRefresh = async () => {\n    setRefreshing(true);\n    await loadPendingShipments();\n    setRefreshing(false);\n  };\n\n  const renderShipmentItem = ({ item }: { item: Shipment }) => {\n    const hasApplications = item.applications && item.applications.length > 0;\n\n    return (\n      <View style={styles.shipmentCard}>\n        <View style={styles.shipmentHeader}>\n          <Text style={styles.shipmentTitle}>\n            {item.title || `Shipment #${item.id.substring(0, 8)}`}\n          </Text>\n          <View style={styles.priceBadge}>\n            <Text style={styles.priceText}>${item.estimated_price}</Text>\n          </View>\n        </View>\n\n        <View style={styles.shipmentDetails}>\n          <View style={styles.detailRow}>\n            <MaterialIcons\n              name=\"location-on\"\n              size={16}\n              color={Colors.primary}\n            />\n            <Text style={styles.detailText}>{item.pickup_address}</Text>\n          </View>\n          <View style={styles.detailRow}>\n            <MaterialIcons name=\"flag\" size={16} color={Colors.secondary} />\n            <Text style={styles.detailText}>{item.delivery_address}</Text>\n          </View>\n          {item.description && (\n            <View style={styles.detailRow}>\n              <MaterialIcons\n                name=\"info\"\n                size={16}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.detailText}>{item.description}</Text>\n            </View>\n          )}\n          <View style={styles.detailRow}>\n            <MaterialIcons\n              name=\"event\"\n              size={16}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.detailText}>\n              {new Date(item.created_at).toLocaleDateString()} • Pending\n            </Text>\n          </View>\n        </View>\n\n        <View style={styles.applicantsSection}>\n          <TouchableOpacity\n            style={styles.applicantsToggle}\n            onPress={() => toggleApplications(item.id)}\n          >\n            <Text\n              style={[\n                styles.applicantsToggleText,\n                !hasApplications && styles.applicantsToggleTextDisabled,\n              ]}\n            >\n              {hasApplications\n                ? `${item.applications!.length} Driver Application${item.applications!.length !== 1 ? 's' : ''}`\n                : 'No Applications Yet'}\n            </Text>\n            <MaterialIcons\n              name={item.expandedApplications ? 'expand-less' : 'expand-more'}\n              size={24}\n              color={Colors.primary}\n            />\n          </TouchableOpacity>\n\n          {item.expandedApplications && (\n            <View style={styles.applicantsList}>\n              {hasApplications ? (\n                (() => {\n                  // Filter pending applications to show first\n                  const pendingApplications = item.applications!.filter(\n                    app => app.status === 'pending'\n                  );\n                  const otherApplications = item.applications!.filter(\n                    app => app.status !== 'pending'\n                  );\n\n                  console.log(\n                    `AdminScreen: Rendering ${pendingApplications.length} pending and ${otherApplications.length} other applications for shipment ${item.id}`\n                  );\n\n                  // Combine arrays with pending first\n                  const sortedApplications = [\n                    ...pendingApplications,\n                    ...otherApplications,\n                  ];\n\n                  return sortedApplications.map(application => (\n                    <View key={application.id} style={styles.applicantItem}>\n                      <View style={styles.applicantInfo}>\n                        <View style={styles.applicantAvatar}>\n                          {application.driver?.avatar_url ? (\n                            <Text>Avatar</Text> // Replace with actual Avatar component if available\n                          ) : (\n                            <Text style={styles.avatarText}>\n                              {application.driver?.first_name\n                                ?.charAt(0)\n                                .toUpperCase() || 'D'}\n                            </Text>\n                          )}\n                        </View>\n                        <View style={styles.applicantDetails}>\n                          <Text style={styles.applicantName}>\n                            {application.driver\n                              ? `${application.driver.first_name} ${application.driver.last_name}`\n                              : `Driver ID: ${application.driver_id.substring(0, 8)}...`}\n                          </Text>\n                          <View style={styles.statusRow}>\n                            <Text style={styles.applicantMeta}>\n                              Applied:{' '}\n                              {new Date(\n                                application.applied_at\n                              ).toLocaleDateString()}\n                            </Text>\n                            <View\n                              style={[\n                                styles.statusBadge,\n                                {\n                                  backgroundColor:\n                                    application.status === 'pending'\n                                      ? Colors.warning\n                                      : Colors.text.disabled,\n                                },\n                              ]}\n                            >\n                              <Text style={styles.statusText}>\n                                {application.status}\n                              </Text>\n                            </View>\n                          </View>\n                          {application.driver?.rating && (\n                            <View style={styles.ratingContainer}>\n                              <MaterialIcons\n                                name=\"star\"\n                                size={16}\n                                color=\"#FFD700\"\n                              />\n                              <Text style={styles.ratingText}>\n                                {application.driver.rating.toFixed(1)}\n                              </Text>\n                            </View>\n                          )}\n                        </View>\n                      </View>\n                      <TouchableOpacity\n                        style={[\n                          styles.assignButton,\n                          application.status !== 'pending' &&\n                            styles.disabledButton,\n                        ]}\n                        onPress={() =>\n                          confirmAssignment(\n                            item.id,\n                            application.driver_id,\n                            application.driver\n                              ? `${application.driver.first_name} ${application.driver.last_name}`\n                              : `Driver ID: ${application.driver_id.substring(0, 8)}...`\n                          )\n                        }\n                        disabled={application.status !== 'pending'}\n                      >\n                        <Text style={styles.assignButtonText}>Assign</Text>\n                      </TouchableOpacity>\n                    </View>\n                  ));\n                })()\n              ) : (\n                <View style={styles.noApplicationsContainer}>\n                  <MaterialIcons\n                    name=\"person-search\"\n                    size={48}\n                    color={Colors.text.disabled}\n                  />\n                  <Text style={styles.noApplicationsText}>\n                    No driver applications yet.\n                  </Text>\n                  <Text style={styles.noApplicationsSubText}>\n                    Drivers will appear here once they apply for this shipment.\n                  </Text>\n                  <TouchableOpacity\n                    style={styles.quickAssignButton}\n                    onPress={() => openQuickAssignModal(item.id)}\n                  >\n                    <MaterialIcons\n                      name=\"person-add\"\n                      size={20}\n                      color=\"#FFFFFF\"\n                    />\n                    <Text style={styles.quickAssignButtonText}>\n                      Quick Assign\n                    </Text>\n                  </TouchableOpacity>\n                </View>\n              )}\n            </View>\n          )}\n        </View>\n      </View>\n    );\n  };\n\n  if (loading && !refreshing) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading shipments...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Driver Assignment</Text>\n      </View>\n\n      <FlatList\n        data={shipments}\n        renderItem={renderShipmentItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.listContent}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n            colors={[Colors.primary]}\n          />\n        }\n        ListEmptyComponent={\n          <View style={styles.emptyContainer}>\n            <MaterialIcons\n              name=\"assignment\"\n              size={64}\n              color={Colors.text.disabled}\n            />\n            <Text style={styles.emptyTitle}>No Pending Shipments</Text>\n            <Text style={styles.emptyText}>\n              There are currently no shipments pending driver assignment.\n            </Text>\n          </View>\n        }\n      />\n\n      {/* Driver Selection Modal */}\n      <Modal\n        visible={isDriverModalVisible}\n        animationType=\"slide\"\n        transparent={true}\n        onRequestClose={() => setIsDriverModalVisible(false)}\n      >\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Select a Driver</Text>\n              <TouchableOpacity\n                onPress={() => setIsDriverModalVisible(false)}\n                style={styles.closeButton}\n              >\n                <MaterialIcons\n                  name=\"close\"\n                  size={24}\n                  color={Colors.text.primary}\n                />\n              </TouchableOpacity>\n            </View>\n\n            <FlatList\n              data={availableDrivers}\n              renderItem={renderDriverItem}\n              keyExtractor={item => item.id}\n              contentContainerStyle={styles.driversList}\n              ListEmptyComponent={\n                <View style={styles.noDriversContainer}>\n                  <Text style={styles.noDriversText}>No drivers available</Text>\n                </View>\n              }\n            />\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 20,\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.text.secondary,\n  },\n  listContent: {\n    padding: 16,\n  },\n  shipmentCard: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  shipmentHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  shipmentTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    flex: 1,\n    marginRight: 8,\n  },\n  priceBadge: {\n    backgroundColor: Colors.success,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 6,\n  },\n  priceText: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n  },\n  shipmentDetails: {\n    marginBottom: 16,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  detailText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 8,\n    flex: 1,\n  },\n  applicantsSection: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    paddingTop: 12,\n  },\n  applicantsToggle: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8,\n  },\n  applicantsToggleText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n  applicantsToggleTextDisabled: {\n    color: Colors.text.disabled,\n  },\n  applicantsList: {\n    marginTop: 8,\n  },\n  applicantItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  applicantInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  applicantAvatar: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: Colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  avatarText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  applicantDetails: {\n    flex: 1,\n  },\n  applicantName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 2,\n  },\n  applicantMeta: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 2,\n  },\n  ratingContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  ratingText: {\n    marginLeft: 4,\n    fontSize: 14,\n    color: Colors.text.primary,\n    fontWeight: '600',\n  },\n  assignButton: {\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 6,\n  },\n  assignButtonText: {\n    color: '#FFFFFF',\n    fontWeight: '600',\n    fontSize: 14,\n  },\n  emptyContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text.primary,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n  },\n  statusRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 2,\n  },\n  statusBadge: {\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  statusText: {\n    fontSize: 12,\n    color: '#FFFFFF',\n    fontWeight: '500',\n  },\n  disabledButton: {\n    backgroundColor: Colors.text.disabled,\n  },\n  noApplicationsContainer: {\n    padding: 24,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#f8f8f8',\n    borderRadius: 8,\n    margin: 8,\n  },\n  noApplicationsText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginTop: 12,\n    marginBottom: 4,\n  },\n  noApplicationsSubText: {\n    fontSize: 14,\n    color: Colors.text.disabled,\n    textAlign: 'center',\n    paddingHorizontal: 20,\n  },\n  quickAssignButton: {\n    backgroundColor: Colors.primary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 6,\n    marginTop: 16,\n  },\n  quickAssignButtonText: {\n    color: '#FFFFFF',\n    fontWeight: '600',\n    fontSize: 14,\n    marginLeft: 4,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'flex-end',\n  },\n  modalContent: {\n    backgroundColor: Colors.background,\n    borderTopLeftRadius: 16,\n    borderTopRightRadius: 16,\n    height: '70%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text.primary,\n  },\n  closeButton: {\n    padding: 4,\n  },\n  driversList: {\n    padding: 16,\n  },\n  driverModalItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  driverAvatar: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: Colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  driverInfo: {\n    flex: 1,\n  },\n  driverName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n  },\n  noDriversContainer: {\n    padding: 20,\n    alignItems: 'center',\n  },\n  noDriversText: {\n    fontSize: 16,\n    color: Colors.text.secondary,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/admin/AdminDashboardScreen.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, justifyContent: 'center', alignItems: 'center' }","line":46,"column":18,"nodeType":"ObjectExpression","endLine":46,"endColumn":77},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userProfile' is assigned a value but never used.","line":72,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":22},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":403,"column":13,"nodeType":"ObjectExpression","endLine":416,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":436,"column":17,"nodeType":"ObjectExpression","endLine":448,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  ActivityIndicator,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\nimport { RootStackParamList } from '../../navigation/types';\nimport { Colors } from '../../constants/Colors';\n// Import useNavigation for our custom HOC\nimport { useNavigation } from '@react-navigation/native';\n\n// Create a simple admin-only HOC\nfunction withAdminOnly<P extends object>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  return function WithAdminCheck(props: P) {\n    const { userProfile, loading } = useAuth();\n    const navigation = useNavigation();\n\n    useEffect(() => {\n      if (!loading && userProfile) {\n        // Check if user is an admin\n        if (userProfile.role !== 'admin') {\n          Alert.alert(\n            'Access Denied',\n            'You do not have permission to access this screen',\n            [{ text: 'OK', onPress: () => navigation.goBack() }],\n            { cancelable: false }\n          );\n        }\n      }\n    }, [userProfile, loading, navigation]);\n\n    if (loading) {\n      return (\n        <View\n          style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}\n        >\n          <ActivityIndicator size=\"large\" color={Colors.primary} />\n        </View>\n      );\n    }\n\n    return <WrappedComponent {...props} />;\n  };\n}\n\ntype AdminDashboardScreenProps = NativeStackScreenProps<\n  RootStackParamList,\n  'AdminDashboard'\n>;\n\ninterface DashboardStats {\n  pendingShipments: number;\n  activeShipments: number;\n  completedShipments: number;\n  pendingApplications: number;\n  totalDrivers: number;\n  totalClients: number;\n}\n\nfunction AdminDashboardScreen({ navigation }: AdminDashboardScreenProps) {\n  const { userProfile } = useAuth();\n  const [stats, setStats] = useState<DashboardStats>({\n    pendingShipments: 0,\n    activeShipments: 0,\n    completedShipments: 0,\n    pendingApplications: 0,\n    totalDrivers: 0,\n    totalClients: 0,\n  });\n  const [loading, setLoading] = useState(true);\n\n  // Handle sign out\n  const handleSignOut = async () => {\n    Alert.alert('Sign Out', 'Are you sure you want to sign out?', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Sign Out',\n        style: 'destructive',\n        onPress: async () => {\n          try {\n            const { error } = await supabase.auth.signOut();\n            if (error) {\n              throw error;\n            }\n            // Navigate to login screen after successful logout\n            navigation.reset({\n              index: 0,\n              routes: [{ name: 'Login' }],\n            });\n          } catch (err) {\n            console.error('Error signing out:', err);\n            Alert.alert('Error', 'Failed to sign out');\n          }\n        },\n      },\n    ]);\n  };\n\n  // Load dashboard stats on mount\n  useEffect(() => {\n    loadDashboardStats();\n  }, []);\n\n  const loadDashboardStats = async () => {\n    try {\n      setLoading(true);\n\n      // Get pending shipments count\n      const { count: pendingShipments, error: pendingError } = await supabase\n        .from('shipments')\n        .select('*', { count: 'exact', head: true })\n        .eq('status', 'pending')\n        .is('driver_id', null);\n\n      if (pendingError) {\n        console.error('Error fetching pending shipments:', pendingError);\n      }\n\n      // Get active shipments count\n      const { count: activeShipments, error: activeError } = await supabase\n        .from('shipments')\n        .select('*', { count: 'exact', head: true })\n        .in('status', ['accepted', 'in_transit']);\n\n      if (activeError) {\n        console.error('Error fetching active shipments:', activeError);\n      }\n\n      // Get completed shipments count\n      const { count: completedShipments, error: completedError } =\n        await supabase\n          .from('shipments')\n          .select('*', { count: 'exact', head: true })\n          .eq('status', 'delivered');\n\n      if (completedError) {\n        console.error('Error fetching completed shipments:', completedError);\n      }\n\n      // Get pending applications count\n      const { count: pendingApplications, error: applicationsError } =\n        await supabase\n          .from('job_applications')\n          .select('*', { count: 'exact', head: true })\n          .eq('status', 'pending');\n\n      if (applicationsError) {\n        console.error(\n          'Error fetching pending applications:',\n          applicationsError\n        );\n      }\n\n      // Get total drivers count\n      const { count: totalDrivers, error: driversError } = await supabase\n        .from('profiles')\n        .select('*', { count: 'exact', head: true })\n        .eq('role', 'driver');\n\n      if (driversError) {\n        console.error('Error fetching total drivers:', driversError);\n      }\n\n      // Get total clients count\n      const { count: totalClients, error: clientsError } = await supabase\n        .from('profiles')\n        .select('*', { count: 'exact', head: true })\n        .eq('role', 'client');\n\n      if (clientsError) {\n        console.error('Error fetching total clients:', clientsError);\n      }\n\n      // Update stats with the values we got, defaulting to 0 for any that failed\n      setStats({\n        pendingShipments: pendingShipments || 0,\n        activeShipments: activeShipments || 0,\n        completedShipments: completedShipments || 0,\n        pendingApplications: pendingApplications || 0,\n        totalDrivers: totalDrivers || 0,\n        totalClients: totalClients || 0,\n      });\n    } catch (err) {\n      console.error('Error in loadDashboardStats:', err);\n      Alert.alert(\n        'Error',\n        'An unexpected error occurred while loading dashboard'\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.loaderContainer}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading dashboard...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Admin Dashboard</Text>\n        <TouchableOpacity onPress={handleSignOut} style={styles.logoutButton}>\n          <MaterialIcons name=\"logout\" size={24} color={Colors.text.inverse} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        <View style={styles.statsContainer}>\n          <Text style={styles.sectionTitle}>Shipment Overview</Text>\n          <View style={styles.statsRow}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.pendingShipments}</Text>\n              <Text style={styles.statLabel}>Pending</Text>\n              <MaterialIcons\n                name=\"pending-actions\"\n                size={24}\n                color={Colors.warning}\n              />\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.activeShipments}</Text>\n              <Text style={styles.statLabel}>Active</Text>\n              <MaterialIcons\n                name=\"local-shipping\"\n                size={24}\n                color={Colors.success}\n              />\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.completedShipments}</Text>\n              <Text style={styles.statLabel}>Completed</Text>\n              <MaterialIcons\n                name=\"check-circle\"\n                size={24}\n                color={Colors.success}\n              />\n            </View>\n          </View>\n\n          <Text style={styles.sectionTitle}>User Statistics</Text>\n          <View style={styles.statsRow}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.totalDrivers}</Text>\n              <Text style={styles.statLabel}>Drivers</Text>\n              <MaterialIcons\n                name=\"drive-eta\"\n                size={24}\n                color={Colors.primary}\n              />\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.totalClients}</Text>\n              <Text style={styles.statLabel}>Clients</Text>\n              <MaterialIcons name=\"people\" size={24} color={Colors.primary} />\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.pendingApplications}</Text>\n              <Text style={styles.statLabel}>Applications</Text>\n              <MaterialIcons\n                name=\"person-add\"\n                size={24}\n                color={Colors.warning}\n              />\n            </View>\n          </View>\n        </View>\n\n        <View style={styles.actionContainer}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.actionButtonsContainer}>\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => navigation.navigate('AdminAssignment')}\n            >\n              <MaterialIcons\n                name=\"assignment\"\n                size={32}\n                color={Colors.text.inverse}\n              />\n              <Text style={styles.actionButtonText}>Assign Drivers</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => alert('Shipment List - Feature coming soon')}\n            >\n              <MaterialIcons\n                name=\"view-list\"\n                size={32}\n                color={Colors.text.inverse}\n              />\n              <Text style={styles.actionButtonText}>Manage Shipments</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => alert('Manage Drivers - Feature coming soon')}\n            >\n              <MaterialIcons\n                name=\"group\"\n                size={32}\n                color={Colors.text.inverse}\n              />\n              <Text style={styles.actionButtonText}>Manage Drivers</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => alert('Driver Applications - Feature coming soon')}\n            >\n              <MaterialIcons\n                name=\"assignment-ind\"\n                size={32}\n                color={Colors.text.inverse}\n              />\n              <Text style={styles.actionButtonText}>Driver Applications</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        <TouchableOpacity\n          style={styles.refreshButton}\n          onPress={loadDashboardStats}\n        >\n          <MaterialIcons name=\"refresh\" size={20} color={Colors.text.inverse} />\n          <Text style={styles.refreshButtonText}>Refresh Dashboard</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  loaderContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n  },\n  loadingText: {\n    marginTop: 10,\n    fontSize: 16,\n    color: Colors.text.primary,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    paddingTop: 60,\n    paddingBottom: 15,\n    paddingHorizontal: 20,\n    borderBottomLeftRadius: 20,\n    borderBottomRightRadius: 20,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text.inverse,\n  },\n  logoutButton: {\n    padding: 10,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginVertical: 12,\n    color: Colors.text.primary,\n  },\n  statsContainer: {\n    marginBottom: 20,\n  },\n  statsRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 15,\n  },\n  statCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 15,\n    flex: 1,\n    marginHorizontal: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  statValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text.primary,\n    marginBottom: 5,\n  },\n  statLabel: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 8,\n  },\n  actionContainer: {\n    marginBottom: 30,\n  },\n  actionButtonsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  actionButton: {\n    backgroundColor: Colors.primary,\n    width: '48%',\n    borderRadius: 12,\n    padding: 20,\n    alignItems: 'center',\n    marginBottom: 15,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  actionButtonText: {\n    color: Colors.text.inverse,\n    marginTop: 10,\n    fontWeight: '600',\n  },\n  refreshButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 25,\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 30,\n    alignSelf: 'center',\n  },\n  refreshButtonText: {\n    color: Colors.text.inverse,\n    marginLeft: 8,\n    fontWeight: '600',\n  },\n});\n\n// Export the component wrapped with admin role check\nconst AdminDashboardWithRoleCheck = withAdminOnly(AdminDashboardScreen);\nexport default AdminDashboardWithRoleCheck;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/admin/AdminDashboardScreenNew.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":330,"column":13,"nodeType":"ObjectExpression","endLine":343,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":363,"column":17,"nodeType":"ObjectExpression","endLine":375,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  ActivityIndicator,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\nimport { RootStackParamList } from '../../navigation/types';\nimport { Colors } from '../../constants/Colors';\n\ntype AdminDashboardScreenProps = NativeStackScreenProps<\n  RootStackParamList,\n  'AdminDashboard'\n>;\n\ninterface DashboardStats {\n  pendingShipments: number;\n  activeShipments: number;\n  completedShipments: number;\n  pendingApplications: number;\n  totalDrivers: number;\n  totalClients: number;\n}\n\nexport default function AdminDashboardScreen({\n  navigation,\n}: AdminDashboardScreenProps) {\n  const { userProfile } = useAuth();\n  const [stats, setStats] = useState<DashboardStats>({\n    pendingShipments: 0,\n    activeShipments: 0,\n    completedShipments: 0,\n    pendingApplications: 0,\n    totalDrivers: 0,\n    totalClients: 0,\n  });\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is admin, redirect if not\n  useEffect(() => {\n    if (userProfile && userProfile.role !== 'admin') {\n      Alert.alert(\n        'Access Denied',\n        'You need admin privileges to access this screen.'\n      );\n      navigation.goBack();\n    }\n  }, [userProfile, navigation]);\n\n  // Load dashboard stats on mount\n  useEffect(() => {\n    loadDashboardStats();\n  }, []);\n\n  const loadDashboardStats = async () => {\n    try {\n      setLoading(true);\n\n      // Get pending shipments count\n      const { count: pendingShipments, error: pendingError } = await supabase\n        .from('shipments')\n        .select('*', { count: 'exact', head: true })\n        .eq('status', 'pending')\n        .is('driver_id', null);\n\n      if (pendingError) {\n        console.error('Error fetching pending shipments:', pendingError);\n      }\n\n      // Get active shipments count\n      const { count: activeShipments, error: activeError } = await supabase\n        .from('shipments')\n        .select('*', { count: 'exact', head: true })\n        .in('status', ['accepted', 'picked_up', 'in_transit']);\n\n      if (activeError) {\n        console.error('Error fetching active shipments:', activeError);\n      }\n\n      // Get completed shipments count\n      const { count: completedShipments, error: completedError } =\n        await supabase\n          .from('shipments')\n          .select('*', { count: 'exact', head: true })\n          .eq('status', 'delivered');\n\n      if (completedError) {\n        console.error('Error fetching completed shipments:', completedError);\n      }\n\n      // Get pending applications count\n      const { count: pendingApplications, error: applicationsError } =\n        await supabase\n          .from('job_applications')\n          .select('*', { count: 'exact', head: true })\n          .eq('status', 'pending');\n\n      if (applicationsError) {\n        console.error(\n          'Error fetching pending applications:',\n          applicationsError\n        );\n      }\n\n      // Get total drivers count\n      const { count: totalDrivers, error: driversError } = await supabase\n        .from('profiles')\n        .select('*', { count: 'exact', head: true })\n        .eq('role', 'driver');\n\n      if (driversError) {\n        console.error('Error fetching total drivers:', driversError);\n      }\n\n      // Get total clients count\n      const { count: totalClients, error: clientsError } = await supabase\n        .from('profiles')\n        .select('*', { count: 'exact', head: true })\n        .eq('role', 'client');\n\n      if (clientsError) {\n        console.error('Error fetching total clients:', clientsError);\n      }\n\n      // Update stats with the values we got, defaulting to 0 for any that failed\n      setStats({\n        pendingShipments: pendingShipments || 0,\n        activeShipments: activeShipments || 0,\n        completedShipments: completedShipments || 0,\n        pendingApplications: pendingApplications || 0,\n        totalDrivers: totalDrivers || 0,\n        totalClients: totalClients || 0,\n      });\n    } catch (err) {\n      console.error('Error in loadDashboardStats:', err);\n      Alert.alert(\n        'Error',\n        'An unexpected error occurred while loading dashboard'\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.loaderContainer}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading dashboard...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Admin Dashboard</Text>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        <View style={styles.statsContainer}>\n          <Text style={styles.sectionTitle}>Shipment Overview</Text>\n          <View style={styles.statsRow}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.pendingShipments}</Text>\n              <Text style={styles.statLabel}>Pending</Text>\n              <MaterialIcons\n                name=\"pending-actions\"\n                size={24}\n                color={Colors.warning}\n              />\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.activeShipments}</Text>\n              <Text style={styles.statLabel}>Active</Text>\n              <MaterialIcons\n                name=\"local-shipping\"\n                size={24}\n                color={Colors.success}\n              />\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.completedShipments}</Text>\n              <Text style={styles.statLabel}>Completed</Text>\n              <MaterialIcons\n                name=\"check-circle\"\n                size={24}\n                color={Colors.success}\n              />\n            </View>\n          </View>\n\n          <Text style={styles.sectionTitle}>User Statistics</Text>\n          <View style={styles.statsRow}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.totalDrivers}</Text>\n              <Text style={styles.statLabel}>Drivers</Text>\n              <MaterialIcons\n                name=\"drive-eta\"\n                size={24}\n                color={Colors.primary}\n              />\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.totalClients}</Text>\n              <Text style={styles.statLabel}>Clients</Text>\n              <MaterialIcons name=\"people\" size={24} color={Colors.primary} />\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.pendingApplications}</Text>\n              <Text style={styles.statLabel}>Applications</Text>\n              <MaterialIcons\n                name=\"person-add\"\n                size={24}\n                color={Colors.warning}\n              />\n            </View>\n          </View>\n        </View>\n\n        <View style={styles.actionContainer}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.actionButtonsContainer}>\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => navigation.navigate('AdminAssignment')}\n            >\n              <MaterialIcons name=\"assignment\" size={32} color={Colors.white} />\n              <Text style={styles.actionButtonText}>Assign Drivers</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => navigation.navigate('ClientTabs')}  // Navigate to client tabs, then to Shipments\n            >\n              <MaterialIcons name=\"view-list\" size={32} color={Colors.white} />\n              <Text style={styles.actionButtonText}>Manage Shipments</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => alert('Manage Drivers - Feature coming soon')}\n            >\n              <MaterialIcons name=\"group\" size={32} color={Colors.white} />\n              <Text style={styles.actionButtonText}>Manage Drivers</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() => alert('Driver Applications - Feature coming soon')}\n            >\n              <MaterialIcons\n                name=\"assignment-ind\"\n                size={32}\n                color={Colors.white}\n              />\n              <Text style={styles.actionButtonText}>Driver Applications</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        <TouchableOpacity\n          style={styles.refreshButton}\n          onPress={loadDashboardStats}\n        >\n          <MaterialIcons name=\"refresh\" size={20} color={Colors.white} />\n          <Text style={styles.refreshButtonText}>Refresh Dashboard</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  loaderContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n  },\n  loadingText: {\n    marginTop: 10,\n    fontSize: 16,\n    color: Colors.text.primary,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    paddingTop: 60,\n    paddingBottom: 15,\n    paddingHorizontal: 20,\n    borderBottomLeftRadius: 20,\n    borderBottomRightRadius: 20,\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.white,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginVertical: 12,\n    color: Colors.text.primary,\n  },\n  statsContainer: {\n    marginBottom: 20,\n  },\n  statsRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 15,\n  },\n  statCard: {\n    backgroundColor: Colors.white,\n    borderRadius: 12,\n    padding: 15,\n    flex: 1,\n    marginHorizontal: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  statValue: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text.primary,\n    marginBottom: 5,\n  },\n  statLabel: {\n    fontSize: 14,\n    color: Colors.textLight,\n    marginBottom: 8,\n  },\n  actionContainer: {\n    marginBottom: 30,\n  },\n  actionButtonsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  actionButton: {\n    backgroundColor: Colors.primary,\n    width: '48%',\n    borderRadius: 12,\n    padding: 20,\n    alignItems: 'center',\n    marginBottom: 15,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  actionButtonText: {\n    color: Colors.white,\n    marginTop: 10,\n    fontWeight: '600',\n  },\n  refreshButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 25,\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 30,\n    alignSelf: 'center',\n  },\n  refreshButtonText: {\n    color: Colors.white,\n    marginLeft: 8,\n    fontWeight: '600',\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/auth/ForgotPasswordScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1285,1288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1285,1288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":176,"column":15,"nodeType":"ObjectExpression","endLine":180,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\n\nimport { Colors } from '../../constants/Colors';\nimport { auth } from '../../lib/supabase';\nimport { RootStackParamList } from '../../navigation/types';\n\ntype ForgotPasswordScreenProps = NativeStackScreenProps<\n  RootStackParamList,\n  'ForgotPassword'\n>;\n\nexport default function ForgotPasswordScreen({\n  navigation,\n}: ForgotPasswordScreenProps) {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  async function handleResetPassword() {\n    if (!email) {\n      Alert.alert('Error', 'Please enter your email address');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const { error } = await auth.resetPasswordForEmail(email);\n\n      if (error) throw error;\n\n      Alert.alert(\n        'Reset Link Sent',\n        'Check your email for a password reset link.',\n        [\n          {\n            text: 'OK',\n            onPress: () => navigation.navigate('Login'),\n          },\n        ]\n      );\n    } catch (error: any) {\n      Alert.alert(\n        'Reset Error',\n        error.message || 'An error occurred while sending reset email'\n      );\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 64 : 0}\n    >\n      <StatusBar style=\"dark\" />\n      <ScrollView contentContainerStyle={styles.scrollContent}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Reset Password</Text>\n          <Text style={styles.subtitle}>\n            Enter the email address associated with your account and we'll send\n            you a link to reset your password.\n          </Text>\n        </View>\n\n        <View style={styles.form}>\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Email</Text>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Enter your email\"\n              value={email}\n              onChangeText={setEmail}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n              autoCorrect={false}\n              autoComplete=\"email\"\n              textContentType=\"emailAddress\"\n              testID=\"email-input\"\n            />\n          </View>\n\n          <TouchableOpacity\n            style={[styles.button, loading && styles.buttonDisabled]}\n            onPress={handleResetPassword}\n            disabled={loading}\n            activeOpacity={0.7}\n            testID=\"reset-button\"\n          >\n            <Text style={styles.buttonText}>\n              {loading ? 'Sending Reset Link...' : 'Send Reset Link'}\n            </Text>\n          </TouchableOpacity>\n        </View>\n\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n          activeOpacity={0.7}\n        >\n          <Text style={styles.backButtonText}>Return to Sign In</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    paddingHorizontal: 24,\n    paddingTop: 40,\n    paddingBottom: 24,\n  },\n  header: {\n    marginBottom: 40,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: '700',\n    color: Colors.text.primary,\n    marginBottom: 16,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.text.secondary,\n    lineHeight: 22,\n  },\n  form: {\n    marginBottom: 24,\n  },\n  inputContainer: {\n    marginBottom: 24,\n  },\n  label: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: Colors.surface,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 16,\n    fontSize: 16,\n    color: Colors.text.primary,\n  },\n  button: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 16,\n    alignItems: 'center',\n  },\n  buttonDisabled: {\n    backgroundColor: Colors.primaryLight,\n  },\n  buttonText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  backButton: {\n    alignItems: 'center',\n    marginTop: 24,\n  },\n  backButtonText: {\n    color: Colors.primary,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/auth/LoginScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1159,1162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1159,1162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":202,"column":15,"nodeType":"ObjectExpression","endLine":206,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\n\nimport { Colors } from '../../constants/Colors';\nimport { auth } from '../../lib/supabase';\nimport { RootStackParamList } from '../../navigation/types';\n\ntype LoginScreenProps = NativeStackScreenProps<RootStackParamList, 'Login'>;\n\nexport default function LoginScreen({ navigation }: LoginScreenProps) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  async function handleLogin() {\n    if (!email || !password) {\n      Alert.alert('Error', 'Please enter your email and password');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const { error } = await auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n      // No need to navigate, the auth context will handle that\n    } catch (error: any) {\n      Alert.alert(\n        'Login Error',\n        error.message || 'An error occurred during login'\n      );\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function navigateToSignUp() {\n    navigation.navigate('SignUp');\n  }\n\n  function navigateToForgotPassword() {\n    navigation.navigate('ForgotPassword');\n  }\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 64 : 0}\n    >\n      <StatusBar style=\"dark\" />\n      <ScrollView contentContainerStyle={styles.scrollContent}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Welcome Back</Text>\n          <Text style={styles.subtitle}>Sign in to continue to DriveDrop</Text>\n        </View>\n\n        <View style={styles.form}>\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Email</Text>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Enter your email\"\n              value={email}\n              onChangeText={setEmail}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n              autoCorrect={false}\n              autoComplete=\"email\"\n              textContentType=\"emailAddress\"\n              testID=\"email-input\"\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Password</Text>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Enter your password\"\n              value={password}\n              onChangeText={setPassword}\n              secureTextEntry\n              autoCapitalize=\"none\"\n              autoCorrect={false}\n              autoComplete=\"password\"\n              textContentType=\"password\"\n              testID=\"password-input\"\n            />\n          </View>\n\n          <TouchableOpacity\n            style={styles.forgotPassword}\n            onPress={navigateToForgotPassword}\n            activeOpacity={0.7}\n          >\n            <Text style={styles.forgotPasswordText}>Forgot Password?</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={[styles.button, loading && styles.buttonDisabled]}\n            onPress={handleLogin}\n            disabled={loading}\n            activeOpacity={0.7}\n            testID=\"login-button\"\n          >\n            <Text style={styles.buttonText}>\n              {loading ? 'Signing in...' : 'Sign In'}\n            </Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.footer}>\n          <Text style={styles.footerText}>Don't have an account?</Text>\n          <TouchableOpacity onPress={navigateToSignUp} activeOpacity={0.7}>\n            <Text style={styles.signUpText}>Sign Up</Text>\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    paddingHorizontal: 24,\n    paddingTop: 40,\n    paddingBottom: 24,\n  },\n  header: {\n    marginBottom: 40,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: '700',\n    color: Colors.text.primary,\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.text.secondary,\n    lineHeight: 22,\n  },\n  form: {\n    marginBottom: 24,\n  },\n  inputContainer: {\n    marginBottom: 16,\n  },\n  label: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: Colors.surface,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 16,\n    fontSize: 16,\n    color: Colors.text.primary,\n  },\n  forgotPassword: {\n    alignSelf: 'flex-end',\n    marginBottom: 24,\n  },\n  forgotPasswordText: {\n    color: Colors.primary,\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  button: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 16,\n    alignItems: 'center',\n  },\n  buttonDisabled: {\n    backgroundColor: Colors.primaryLight,\n  },\n  buttonText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 'auto',\n    paddingTop: 16,\n  },\n  footerText: {\n    color: Colors.text.secondary,\n    fontSize: 14,\n  },\n  signUpText: {\n    color: Colors.primary,\n    fontSize: 14,\n    fontWeight: '600',\n    marginLeft: 4,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/auth/SignUpScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'supabase' is defined but never used.","line":17,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2628,2631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2628,2631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#FFEBEE' }","line":326,"column":19,"nodeType":"ObjectExpression","endLine":333,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":409,"column":15,"nodeType":"ObjectExpression","endLine":413,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\n\nimport { Colors } from '../../constants/Colors';\nimport { auth, supabase } from '../../lib/supabase';\nimport { RootStackParamList } from '../../navigation/types';\n\ntype SignUpScreenProps = NativeStackScreenProps<RootStackParamList, 'SignUp'>;\n\nexport default function SignUpScreen({ navigation }: SignUpScreenProps) {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [role, setRole] = useState<'client' | 'driver'>('client');\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState<string | null>(null);\n\n  async function handleSignUp() {\n    // Reset error state\n    setErrorMsg(null);\n\n    // Validate inputs\n    if (!firstName || !lastName) {\n      Alert.alert('Error', 'Please enter your first and last name');\n      return;\n    }\n\n    if (!email || !password) {\n      Alert.alert('Error', 'Please enter email and password');\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      Alert.alert('Error', 'Passwords do not match');\n      return;\n    }\n\n    if (password.length < 6) {\n      Alert.alert('Error', 'Password must be at least 6 characters');\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      // Sign up with user metadata including role\n      const { data, error } = await auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName,\n            last_name: lastName,\n            role: role,\n          },\n        },\n      });\n\n      if (error) throw error;\n\n      // If signup was successful and we have a user\n      if (data?.user) {\n        // No need to manually create a profile record as Supabase should handle this\n        // via triggers or RLS policies, but we can confirm the user was created\n        console.log('User created successfully:', data.user.id);\n      }\n\n      Alert.alert(\n        'Verification Email Sent',\n        'Please check your email for a verification link to complete your registration.',\n        [\n          {\n            text: 'OK',\n            onPress: () => navigation.navigate('Login'),\n          },\n        ]\n      );\n    } catch (error: any) {\n      console.error('Sign up error:', error);\n\n      let errorMsg = 'An error occurred during sign up';\n\n      // Improved error handling with specific messages\n      if (error.message?.includes('Database error')) {\n        errorMsg =\n          'Database error creating user. This might be due to an issue with our systems. Please try again later.';\n      } else if (error.message?.includes('already registered')) {\n        errorMsg =\n          'This email is already registered. Please use a different email or try to login.';\n      } else if (error.message?.includes('invalid email')) {\n        errorMsg = 'Please enter a valid email address.';\n      } else if (error.message) {\n        errorMsg = error.message;\n      }\n\n      setErrorMsg(errorMsg);\n      Alert.alert('Sign Up Error', errorMsg);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 64 : 0}\n    >\n      <StatusBar style=\"dark\" />\n      <ScrollView contentContainerStyle={styles.scrollContent}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Create Account</Text>\n          <Text style={styles.subtitle}>\n            Sign up to get started with DriveDrop\n          </Text>\n        </View>\n\n        {errorMsg && (\n          <View style={styles.errorContainer}>\n            <Text style={styles.errorText}>{errorMsg}</Text>\n          </View>\n        )}\n\n        <View style={styles.form}>\n          <View style={styles.row}>\n            <View style={[styles.inputContainer, styles.halfInput]}>\n              <Text style={styles.label}>First Name</Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"First name\"\n                value={firstName}\n                onChangeText={setFirstName}\n                autoCorrect={false}\n                autoComplete=\"name-given\"\n                textContentType=\"givenName\"\n                testID=\"firstName-input\"\n              />\n            </View>\n\n            <View style={[styles.inputContainer, styles.halfInput]}>\n              <Text style={styles.label}>Last Name</Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Last name\"\n                value={lastName}\n                onChangeText={setLastName}\n                autoCorrect={false}\n                autoComplete=\"name-family\"\n                textContentType=\"familyName\"\n                testID=\"lastName-input\"\n              />\n            </View>\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>I want to sign up as:</Text>\n            <View style={styles.roleContainer}>\n              <TouchableOpacity\n                style={[\n                  styles.roleButton,\n                  role === 'client' && styles.roleButtonSelected,\n                ]}\n                onPress={() => setRole('client')}\n                testID=\"client-role-button\"\n              >\n                <Text\n                  style={[\n                    styles.roleButtonText,\n                    role === 'client' && styles.roleButtonTextSelected,\n                  ]}\n                >\n                  Client\n                </Text>\n                <Text\n                  style={[\n                    styles.roleSubtext,\n                    role === 'client' && styles.roleSubtextSelected,\n                  ]}\n                >\n                  Ship packages\n                </Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity\n                style={[\n                  styles.roleButton,\n                  role === 'driver' && styles.roleButtonSelected,\n                ]}\n                onPress={() => setRole('driver')}\n                testID=\"driver-role-button\"\n              >\n                <Text\n                  style={[\n                    styles.roleButtonText,\n                    role === 'driver' && styles.roleButtonTextSelected,\n                  ]}\n                >\n                  Driver\n                </Text>\n                <Text\n                  style={[\n                    styles.roleSubtext,\n                    role === 'driver' && styles.roleSubtextSelected,\n                  ]}\n                >\n                  Deliver packages\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Email</Text>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Enter your email\"\n              value={email}\n              onChangeText={setEmail}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n              autoCorrect={false}\n              autoComplete=\"email\"\n              textContentType=\"emailAddress\"\n              testID=\"email-input\"\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Password</Text>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Create a password\"\n              value={password}\n              onChangeText={setPassword}\n              secureTextEntry\n              autoCapitalize=\"none\"\n              autoCorrect={false}\n              autoComplete=\"password-new\"\n              textContentType=\"newPassword\"\n              testID=\"password-input\"\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Confirm Password</Text>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Confirm your password\"\n              value={confirmPassword}\n              onChangeText={setConfirmPassword}\n              secureTextEntry\n              autoCapitalize=\"none\"\n              autoCorrect={false}\n              autoComplete=\"password-new\"\n              textContentType=\"newPassword\"\n              testID=\"confirm-password-input\"\n            />\n          </View>\n\n          <TouchableOpacity\n            style={[styles.button, loading && styles.buttonDisabled]}\n            onPress={handleSignUp}\n            disabled={loading}\n            activeOpacity={0.7}\n            testID=\"signup-button\"\n          >\n            <Text style={styles.buttonText}>\n              {loading ? 'Creating Account...' : 'Create Account'}\n            </Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.footer}>\n          <Text style={styles.footerText}>Already have an account?</Text>\n          <TouchableOpacity\n            onPress={() => navigation.navigate('Login')}\n            activeOpacity={0.7}\n          >\n            <Text style={styles.signInText}>Sign In</Text>\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    paddingHorizontal: 24,\n    paddingTop: 40,\n    paddingBottom: 24,\n  },\n  header: {\n    marginBottom: 40,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: '700',\n    color: Colors.text.primary,\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.text.secondary,\n    lineHeight: 22,\n  },\n  errorContainer: {\n    backgroundColor: '#FFEBEE',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 20,\n    borderWidth: 1,\n    borderColor: Colors.error,\n  },\n  errorText: {\n    color: Colors.error,\n    fontSize: 14,\n  },\n  form: {\n    marginBottom: 24,\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  inputContainer: {\n    marginBottom: 16,\n  },\n  halfInput: {\n    width: '48%',\n  },\n  label: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: Colors.surface,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 16,\n    fontSize: 16,\n    color: Colors.text.primary,\n  },\n  roleContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  roleButton: {\n    flex: 1,\n    backgroundColor: Colors.surface,\n    borderWidth: 2,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n  },\n  roleButtonSelected: {\n    borderColor: Colors.primary,\n    backgroundColor: Colors.primaryLight,\n  },\n  roleButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 4,\n  },\n  roleButtonTextSelected: {\n    color: Colors.primary,\n  },\n  roleSubtext: {\n    fontSize: 12,\n    color: Colors.text.secondary,\n  },\n  roleSubtextSelected: {\n    color: Colors.primary,\n  },\n  button: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 16,\n    alignItems: 'center',\n    marginTop: 24,\n  },\n  buttonDisabled: {\n    backgroundColor: Colors.primaryLight,\n  },\n  buttonText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 'auto',\n    paddingTop: 16,\n  },\n  footerText: {\n    color: Colors.text.secondary,\n    fontSize: 14,\n  },\n  signInText: {\n    color: Colors.primary,\n    fontSize: 14,\n    fontWeight: '600',\n    marginLeft: 4,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/booking/BookingConfirmationScreen.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexGrow: 1 }","line":89,"column":32,"nodeType":"ObjectExpression","endLine":89,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Colors, Typography, Spacing } from '../../constants/DesignSystem';\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useBooking } from '../../context/BookingContext';\n\ntype BookingConfirmationProps = NativeStackScreenProps<\n  RootStackParamList,\n  'BookingConfirmation'\n>;\n\nexport default function BookingConfirmationScreen({\n  navigation,\n}: BookingConfirmationProps) {\n  const { state, resetForm, submitShipment } = useBooking();\n  const [shipmentId, setShipmentId] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Submit shipment to Supabase when component mounts\n  useEffect(() => {\n    const submitToSupabase = async () => {\n      if (shipmentId) return; // Already submitted\n\n      try {\n        setIsSubmitting(true);\n        const shipment = await submitShipment();\n        setShipmentId(shipment.id);\n        console.log('Shipment created successfully:', shipment);\n      } catch (error) {\n        console.error('Error submitting shipment:', error);\n        Alert.alert(\n          'Submission Error',\n          'There was an error submitting your shipment. Please try again or contact support.',\n          [{ text: 'OK', onPress: () => navigation.goBack() }]\n        );\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n\n    submitToSupabase();\n  }, [submitShipment, navigation, shipmentId]);\n\n  const handleDone = () => {\n    resetForm();\n    navigation.reset({\n      index: 0,\n      routes: [{ name: 'ClientTabs' }],\n    });\n  };\n\n  const handleViewShipments = () => {\n    resetForm();\n    navigation.reset({\n      index: 0,\n      routes: [{ name: 'ClientTabs' }],\n    });\n    // In a real app, you'd navigate to the shipments tab after reset\n  };\n\n  const generateBookingReference = () => {\n    return shipmentId\n      ? `DD${shipmentId.substring(0, 6).toUpperCase()}`\n      : `DD${Date.now().toString().slice(-6)}`;\n  };\n\n  const bookingRef = generateBookingReference();\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      <ScrollView\n        style={styles.content}\n        showsVerticalScrollIndicator={false}\n        contentContainerStyle={{ flexGrow: 1 }}\n      >\n        <View style={styles.scrollContent}>\n          {/* Success Header */}\n          <View style={styles.successHeader}>\n            <View style={styles.successIcon}>\n              <MaterialIcons\n                name={isSubmitting ? 'hourglass-empty' : 'check-circle'}\n                size={64}\n                color={isSubmitting ? Colors.warning : Colors.success}\n              />\n            </View>\n            <Text style={styles.successTitle}>\n              {isSubmitting\n                ? 'Submitting Request...'\n                : 'Booking Request Submitted!'}\n            </Text>\n            <Text style={styles.successSubtitle}>\n              {isSubmitting\n                ? 'Please wait while we process your shipment request...'\n                : 'Your vehicle shipment request has been successfully submitted and is being reviewed by our team.'}\n            </Text>\n          </View>\n\n          {/* Booking Details */}\n          <Card variant=\"default\" padding=\"lg\" style={styles.detailsCard}>\n            <Text style={styles.sectionTitle}>Booking Reference</Text>\n            <View style={styles.referenceRow}>\n              <Text style={styles.referenceNumber}>{bookingRef}</Text>\n              <TouchableOpacity style={styles.copyButton}>\n                <MaterialIcons\n                  name=\"content-copy\"\n                  size={20}\n                  color={Colors.primary}\n                />\n              </TouchableOpacity>\n            </View>\n            <Text style={styles.referenceNote}>\n              Save this reference number for tracking your shipment\n            </Text>\n          </Card>\n\n          {/* Quick Summary */}\n          <Card variant=\"default\" padding=\"lg\" style={styles.summaryCard}>\n            <Text style={styles.sectionTitle}>Shipment Summary</Text>\n\n            <View style={styles.summaryRow}>\n              <MaterialIcons\n                name=\"person\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.summaryLabel}>Customer:</Text>\n              <Text style={styles.summaryValue}>\n                {state.formData.customerDetails.fullName || 'Not provided'}\n              </Text>\n            </View>\n\n            <View style={styles.summaryRow}>\n              <MaterialIcons\n                name=\"directions-car\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.summaryLabel}>Vehicle:</Text>\n              <Text style={styles.summaryValue}>\n                {`${state.formData.vehicleInformation.year || ''} ${state.formData.vehicleInformation.make || ''} ${state.formData.vehicleInformation.model || ''}`.trim() ||\n                  'Not provided'}\n              </Text>\n            </View>\n\n            <View style={styles.summaryRow}>\n              <MaterialIcons\n                name=\"location-on\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.summaryLabel}>Pickup:</Text>\n              <Text style={styles.summaryValue}>\n                {state.formData.pickupDetails.address || 'Not provided'}\n              </Text>\n            </View>\n\n            <View style={styles.summaryRow}>\n              <MaterialIcons\n                name=\"flag\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.summaryLabel}>Delivery:</Text>\n              <Text style={styles.summaryValue}>\n                {state.formData.deliveryDetails.address || 'Not provided'}\n              </Text>\n            </View>\n          </Card>\n\n          {/* Next Steps */}\n          <Card variant=\"default\" padding=\"lg\" style={styles.stepsCard}>\n            <Text style={styles.sectionTitle}>What happens next?</Text>\n\n            <View style={styles.timelineItem}>\n              <View style={styles.timelineIcon}>\n                <MaterialIcons name=\"email\" size={20} color={Colors.primary} />\n              </View>\n              <View style={styles.timelineContent}>\n                <Text style={styles.timelineTitle}>Email Confirmation</Text>\n                <Text style={styles.timelineDescription}>\n                  You'll receive a confirmation email within 15 minutes\n                </Text>\n              </View>\n            </View>\n\n            <View style={styles.timelineItem}>\n              <View style={styles.timelineIcon}>\n                <MaterialIcons\n                  name=\"assignment\"\n                  size={20}\n                  color={Colors.primary}\n                />\n              </View>\n              <View style={styles.timelineContent}>\n                <Text style={styles.timelineTitle}>Quote Review</Text>\n                <Text style={styles.timelineDescription}>\n                  Our team will review your request and prepare a detailed quote\n                </Text>\n              </View>\n            </View>\n\n            <View style={styles.timelineItem}>\n              <View style={styles.timelineIcon}>\n                <MaterialIcons name=\"phone\" size={20} color={Colors.primary} />\n              </View>\n              <View style={styles.timelineContent}>\n                <Text style={styles.timelineTitle}>Contact & Scheduling</Text>\n                <Text style={styles.timelineDescription}>\n                  We'll contact you within 24 hours to discuss pricing and\n                  schedule pickup\n                </Text>\n              </View>\n            </View>\n          </Card>\n\n          {/* Contact Info */}\n          <Card variant=\"default\" padding=\"lg\" style={styles.contactCard}>\n            <Text style={styles.sectionTitle}>Need Help?</Text>\n            <Text style={styles.contactText}>\n              If you have any questions about your booking, feel free to contact\n              us:\n            </Text>\n\n            <TouchableOpacity style={styles.contactRow}>\n              <MaterialIcons name=\"phone\" size={20} color={Colors.primary} />\n              <Text style={styles.contactValue}>1-800-DRIVEDROP</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.contactRow}>\n              <MaterialIcons name=\"email\" size={20} color={Colors.primary} />\n              <Text style={styles.contactValue}>support@drivedrop.com</Text>\n            </TouchableOpacity>\n          </Card>\n\n          <View style={styles.bottomSpacing} />\n        </View>\n      </ScrollView>\n\n      {/* Action Buttons */}\n      <View style={styles.actionContainer}>\n        <Button\n          title=\"View My Shipments\"\n          variant=\"outline\"\n          onPress={handleViewShipments}\n          style={styles.actionButton}\n        />\n        <Button\n          title=\"Done\"\n          variant=\"primary\"\n          onPress={handleDone}\n          style={styles.actionButton}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollContent: {\n    flex: 1,\n    paddingHorizontal: Spacing[6],\n    paddingTop: Spacing[6],\n  },\n  successHeader: {\n    alignItems: 'center',\n    paddingVertical: Spacing[8],\n  },\n  successIcon: {\n    marginBottom: Spacing[4],\n  },\n  successTitle: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    textAlign: 'center',\n    marginBottom: Spacing[3],\n  },\n  successSubtitle: {\n    fontSize: Typography.fontSize.base,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.base,\n    paddingHorizontal: Spacing[4],\n  },\n  detailsCard: {\n    marginBottom: Spacing[4],\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[4],\n  },\n  referenceRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: Spacing[2],\n  },\n  referenceNumber: {\n    fontSize: Typography.fontSize.xl,\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.primary,\n    fontFamily: 'monospace',\n  },\n  copyButton: {\n    padding: Spacing[2],\n  },\n  referenceNote: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n  },\n  summaryCard: {\n    marginBottom: Spacing[4],\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: Spacing[3],\n  },\n  summaryLabel: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginLeft: Spacing[2],\n    minWidth: 80,\n  },\n  summaryValue: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.primary,\n    flex: 1,\n    marginLeft: Spacing[2],\n  },\n  stepsCard: {\n    marginBottom: Spacing[4],\n  },\n  timelineItem: {\n    flexDirection: 'row',\n    marginBottom: Spacing[4],\n  },\n  timelineIcon: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: Colors.brand.primary[50],\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: Spacing[3],\n  },\n  timelineContent: {\n    flex: 1,\n  },\n  timelineTitle: {\n    fontSize: Typography.fontSize.base,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  timelineDescription: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  contactCard: {\n    marginBottom: Spacing[4],\n  },\n  contactText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  contactRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: Spacing[3],\n  },\n  contactValue: {\n    fontSize: Typography.fontSize.base,\n    color: Colors.primary,\n    marginLeft: Spacing[2],\n  },\n  actionContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: Spacing[6],\n    paddingVertical: Spacing[4],\n    backgroundColor: Colors.surface,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  actionButton: {\n    flex: 1,\n    marginHorizontal: Spacing[2],\n  },\n  bottomSpacing: {\n    height: Spacing[6],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/booking/BookingPaymentProcessingScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Typography' is defined but never used.","line":5,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spacing' is defined but never used.","line":5,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'paymentService' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4429,4432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4429,4432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { View, StyleSheet, Text, Alert, ScrollView } from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { Colors, Typography, Spacing } from '../../constants/DesignSystem';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useBooking } from '../../context/BookingContext';\nimport { StripePaymentForm } from '../../components/payment/StripePaymentForm';\nimport { PaymentPolicyCard } from '../../components/payment/PaymentPolicyCard';\nimport { ShipmentService } from '../../services/shipmentService';\nimport { paymentService } from '../../services/paymentService';\nimport { Card } from '../../components/ui/Card';\nimport { Button } from '../../components/ui/Button';\nimport { supabase } from '../../lib/supabase';\n\ntype BookingPaymentProcessingProps = NativeStackScreenProps<\n  RootStackParamList,\n  'BookingPaymentProcessing'\n>;\n\nexport default function BookingPaymentProcessingScreen({\n  navigation,\n  route,\n}: BookingPaymentProcessingProps) {\n  const { state } = useBooking();\n  const [shipmentId, setShipmentId] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [paymentSuccess, setPaymentSuccess] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n\n  // Get amount and quote from route params\n  const amount = route.params?.amount || 0;\n  const quote = route.params?.quote || {\n    service: 'Standard',\n    price: 0,\n    days: '7-10',\n  };\n\n  // Create shipment when the screen loads\n  useEffect(() => {\n    const createShipment = async () => {\n      try {\n        setIsSubmitting(true);\n\n        // Get user profile and log for debugging\n        const userResponse = await supabase.auth.getUser();\n        console.log('Auth User Response:', JSON.stringify(userResponse));\n\n        const {\n          data: { user },\n        } = userResponse;\n        if (!user) {\n          console.error('Authentication error: No user found in session');\n          throw new Error('User not authenticated');\n        }\n\n        console.log('Authenticated User ID:', user.id);\n\n        // Get session to verify authentication\n        const { data: sessionData, error: sessionError } =\n          await supabase.auth.getSession();\n        if (sessionError || !sessionData.session) {\n          console.error('Session error:', sessionError);\n          throw new Error('No active session. Please log in again.');\n        }\n\n        // Format shipment data from booking context\n        const shipmentData = {\n          // client_id will be set by ShipmentService based on the authenticated user\n          title: `${state.formData.vehicleInformation.year} ${state.formData.vehicleInformation.make} ${state.formData.vehicleInformation.model}`,\n          description: `Vehicle Transport: ${state.formData.vehicleInformation.year} ${state.formData.vehicleInformation.make} ${state.formData.vehicleInformation.model}`,\n          pickup_address:\n            state.formData.pickupDetails.address || 'No address provided',\n          pickup_notes: `Contact: ${state.formData.pickupDetails.contactPerson}, Phone: ${state.formData.pickupDetails.contactPhone}, Date: ${state.formData.pickupDetails.date}`,\n          delivery_address:\n            state.formData.deliveryDetails.address || 'No address provided',\n          delivery_notes: `Contact: ${state.formData.deliveryDetails.contactPerson}, Phone: ${state.formData.deliveryDetails.contactPhone}, Date: ${state.formData.deliveryDetails.date}`,\n          status: 'pending', // Explicitly set status to match RLS policy expectations\n          estimated_price: quote.price,\n        };\n\n        // Log the complete shipment data being sent\n        console.log('Shipment insert payload:', JSON.stringify(shipmentData));\n\n        // Create shipment in database - passing the user ID\n        console.log(\n          'Calling ShipmentService.createShipment with user ID:',\n          user.id\n        );\n        const createdShipment = await ShipmentService.createShipment(\n          shipmentData,\n          user.id\n        );\n\n        console.log(\n          'Shipment created successfully:',\n          JSON.stringify(createdShipment)\n        );\n        setShipmentId(createdShipment.id);\n        setIsSubmitting(false);\n      } catch (error: any) {\n        // Type as any to access error properties\n        console.error('Error creating shipment (full error):', error);\n        // Log more details about the error\n        if (error && error.code) {\n          console.error(\n            `Error code: ${error.code}, Message: ${error.message || 'No message'}`\n          );\n          console.error('Error details:', error.details || 'No details');\n        }\n        setErrorMessage('Failed to create shipment. Please try again.');\n        setIsSubmitting(false);\n      }\n    };\n\n    createShipment();\n  }, []);\n\n  const handlePaymentSuccess = () => {\n    setPaymentSuccess(true);\n    Alert.alert(\n      'Payment Successful!',\n      'Your shipment request has been submitted. You will receive a confirmation email shortly.',\n      [\n        {\n          text: 'View Confirmation',\n          onPress: () =>\n            navigation.navigate('BookingConfirmation', {\n              shipmentId: shipmentId || '',\n            }),\n        },\n      ]\n    );\n  };\n\n  const handlePaymentError = (error: string) => {\n    setErrorMessage(error);\n    Alert.alert('Payment Failed', error, [\n      {\n        text: 'Try Again',\n        onPress: () => setErrorMessage(null),\n      },\n      {\n        text: 'Cancel',\n        style: 'cancel',\n        onPress: () => navigation.goBack(),\n      },\n    ]);\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>Secure Payment with Stripe</Text>\n        <Text style={styles.subtitle}>\n          Your payment is processed securely by Stripe\n        </Text>\n      </View>\n\n      <ScrollView\n        style={styles.scrollContainer}\n        contentContainerStyle={styles.scrollContent}\n        showsVerticalScrollIndicator={true}\n        bounces={true}\n      >\n        {isSubmitting ? (\n          <Card variant=\"default\" padding=\"lg\">\n            <Text style={styles.processingText}>Creating your shipment...</Text>\n          </Card>\n        ) : errorMessage && !shipmentId ? (\n          <Card variant=\"default\" padding=\"lg\">\n            <Text style={styles.errorTitle}>Payment Error</Text>\n            <Text style={styles.errorText}>{errorMessage}</Text>\n            <View style={styles.errorDetails}>\n              <Text style={styles.errorDetailsText}>\n                If this error persists, please contact support with the\n                following details:\n              </Text>\n              <Text style={styles.errorCode}>\n                Error: SHIPMENT_CREATION_FAILED\n              </Text>\n              <Text style={styles.errorTimestamp}>\n                Time: {new Date().toISOString()}\n              </Text>\n            </View>\n            <Button\n              title=\"Try Again\"\n              onPress={() => navigation.goBack()}\n              style={styles.button}\n            />\n          </Card>\n        ) : shipmentId && !paymentSuccess ? (\n          <>\n            {/* Payment Policy Card - Shows 20%/80% Split */}\n            <PaymentPolicyCard\n              totalAmount={amount}\n              paymentType=\"initial\"\n              isRefundable={true}\n              refundDeadline={new Date(\n                Date.now() + 60 * 60 * 1000\n              ).toISOString()} // 1 hour from now\n            />\n\n            <Card\n              variant=\"default\"\n              padding=\"lg\"\n              style={styles.stripeNoticeCard}\n            >\n              <Text style={styles.stripeNotice}>\n                Your payment will be securely processed by Stripe. DriveDrop\n                uses Stripe, a PCI-DSS compliant payment processor, to handle\n                all payments securely. Your payment information is never stored\n                on our servers.\n              </Text>\n              <Text style={styles.paymentAmountNotice}>\n                You are making the initial 20% payment of $\n                {((amount * 0.2) / 100).toFixed(2)}. The remaining 80% payment\n                of ${((amount * 0.8) / 100).toFixed(2)} will be collected upon\n                successful delivery.\n              </Text>\n            </Card>\n            <StripePaymentForm\n              amount={Math.round(amount * 0.2)} // Only charge 20% now\n              shipmentId={shipmentId}\n              onPaymentSuccess={handlePaymentSuccess}\n              onPaymentError={handlePaymentError}\n            />\n            <View style={styles.securityInfoContainer}>\n              <Text style={styles.securityInfoTitle}>\n                Secure Payment Information\n              </Text>\n              <Text style={styles.securityInfoText}>\n                • Your card details are encrypted and secure\n              </Text>\n              <Text style={styles.securityInfoText}>\n                • Transactions are protected by Stripe's fraud prevention\n              </Text>\n              <Text style={styles.securityInfoText}>\n                • View Stripe's{' '}\n                <Text style={styles.securityInfoLink}>Terms of Service</Text>{' '}\n                and <Text style={styles.securityInfoLink}>Privacy Policy</Text>\n              </Text>\n            </View>\n          </>\n        ) : null}\n\n        {paymentSuccess && (\n          <Card variant=\"default\" padding=\"lg\">\n            <Text style={styles.successText}>Payment Successful!</Text>\n            <Text style={styles.subText}>\n              Your shipment has been booked successfully.\n            </Text>\n            <Button\n              title=\"View Shipment Details\"\n              onPress={() =>\n                navigation.navigate('BookingConfirmation', {\n                  shipmentId: shipmentId || '',\n                })\n              }\n              style={styles.button}\n            />\n          </Card>\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    paddingTop: 60,\n    paddingHorizontal: 20,\n    paddingBottom: 15,\n    backgroundColor: Colors.surface,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  title: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: Colors.text.primary,\n    marginBottom: 5,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 5,\n  },\n  scrollContainer: {\n    flex: 1,\n  },\n  scrollContent: {\n    padding: 20,\n    paddingBottom: 40, // Extra padding at the bottom for better scrolling\n  },\n  stripeNoticeCard: {\n    marginBottom: 15,\n    backgroundColor: Colors.background,\n    borderColor: Colors.primary,\n    borderLeftWidth: 4,\n  },\n  stripeNotice: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    lineHeight: 20,\n  },\n  securityInfoContainer: {\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 15,\n    marginTop: 20,\n    marginBottom: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  securityInfoTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: Colors.text.primary,\n    marginBottom: 10,\n  },\n  securityInfoText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 8,\n    lineHeight: 20,\n  },\n  securityInfoLink: {\n    color: Colors.primary,\n    textDecorationLine: 'underline',\n  },\n  processingText: {\n    fontSize: 16,\n    textAlign: 'center',\n    color: Colors.text.primary,\n    marginVertical: 20,\n  },\n  errorTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.error,\n    textAlign: 'center',\n    marginTop: 10,\n    marginBottom: 5,\n  },\n  errorText: {\n    fontSize: 16,\n    color: Colors.error,\n    textAlign: 'center',\n    marginVertical: 10,\n  },\n  errorDetails: {\n    marginTop: 15,\n    padding: 10,\n    backgroundColor: Colors.background,\n    borderRadius: 4,\n    borderLeftWidth: 2,\n    borderLeftColor: Colors.error,\n  },\n  errorDetailsText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 8,\n  },\n  paymentAmountNotice: {\n    fontSize: 15,\n    fontWeight: 'bold',\n    color: Colors.primary,\n    marginTop: 15,\n    textAlign: 'center',\n    paddingTop: 10,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  errorCode: {\n    fontSize: 12,\n    fontFamily: 'monospace',\n    color: Colors.text.secondary,\n    marginBottom: 4,\n  },\n  errorTimestamp: {\n    fontSize: 12,\n    fontFamily: 'monospace',\n    color: Colors.text.secondary,\n  },\n  successText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: Colors.success,\n    textAlign: 'center',\n    marginVertical: 10,\n  },\n  subText: {\n    fontSize: 16,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  button: {\n    marginTop: 20,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/booking/BookingStepCustomerScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'KeyboardAvoidingView' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Platform' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":11},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: '12.5%' }","line":89,"column":46,"nodeType":"ObjectExpression","endLine":89,"endColumn":64},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexGrow: 1 }","line":97,"column":32,"nodeType":"ObjectExpression","endLine":97,"endColumn":47}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\n\nimport { Colors, Typography, Spacing } from '../../constants/DesignSystem';\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { Input } from '../../components/ui/Input';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useBooking } from '../../context/BookingContext';\nimport { useAuth } from '../../context/AuthContext';\n\ntype BookingStepCustomerProps = NativeStackScreenProps<\n  RootStackParamList,\n  'BookingStepCustomer'\n>;\n\nexport default function BookingStepCustomerScreen({\n  navigation,\n}: BookingStepCustomerProps) {\n  const { state, updateFormData, setStepValidity, goToNextStep } = useBooking();\n  const { userProfile } = useAuth();\n  const { customerDetails } = state.formData;\n\n  // Pre-populate with user profile data\n  useEffect(() => {\n    if (userProfile && !customerDetails.fullName && !customerDetails.email) {\n      updateFormData('customer', {\n        fullName:\n          `${userProfile.first_name || ''} ${userProfile.last_name || ''}`.trim(),\n        email: userProfile.email || '',\n        phone: userProfile.phone || '',\n        address: customerDetails.address || '', // Keep existing address if any\n      });\n    }\n  }, [userProfile, updateFormData]);\n\n  // Validate form data\n  useEffect(() => {\n    const isValid = !!(\n      customerDetails.fullName &&\n      customerDetails.email &&\n      customerDetails.phone &&\n      customerDetails.address &&\n      customerDetails.fullName.trim().length > 0 &&\n      customerDetails.email.includes('@') &&\n      customerDetails.phone.trim().length >= 10 &&\n      customerDetails.address.trim().length > 0\n    );\n    setStepValidity('customer', isValid);\n  }, [customerDetails, setStepValidity]);\n\n  const handleInputChange = (field: string, value: string) => {\n    const updatedData = {\n      ...customerDetails,\n      [field]: value,\n    };\n    updateFormData('customer', updatedData);\n  };\n\n  const handleNext = () => {\n    if (state.isValid.customer) {\n      goToNextStep();\n      navigation.navigate('BookingStepVehicle');\n    }\n  };\n\n  const handleBack = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>Customer Details</Text>\n        <Text style={styles.subtitle}>Step 1 of 8</Text>\n        <View style={styles.progressBar}>\n          <View style={[styles.progressFill, { width: '12.5%' }]} />\n        </View>\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={{ flexGrow: 1 }}\n      >\n        <View style={styles.scrollContent}>\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <Text style={styles.sectionTitle}>Personal Information</Text>\n            <Text style={styles.sectionSubtitle}>\n              Please provide your contact details for this shipment\n            </Text>\n\n            <Input\n              label=\"Full Name\"\n              placeholder=\"Enter your full name\"\n              value={customerDetails.fullName}\n              onChangeText={value => handleInputChange('fullName', value)}\n              leftIcon=\"person\"\n              required\n            />\n\n            <Input\n              label=\"Email Address\"\n              placeholder=\"Enter your email\"\n              value={customerDetails.email}\n              onChangeText={value => handleInputChange('email', value)}\n              leftIcon=\"email\"\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n              required\n            />\n\n            <Input\n              label=\"Phone Number\"\n              placeholder=\"Enter your phone number\"\n              value={customerDetails.phone}\n              onChangeText={value => handleInputChange('phone', value)}\n              leftIcon=\"phone\"\n              keyboardType=\"phone-pad\"\n              required\n            />\n\n            <Input\n              label=\"Address\"\n              placeholder=\"Enter your full address\"\n              value={customerDetails.address}\n              onChangeText={value => handleInputChange('address', value)}\n              leftIcon=\"location-on\"\n              multiline\n              numberOfLines={3}\n              required\n              helper=\"This will be used for billing and communication purposes\"\n            />\n          </Card>\n\n          <View style={styles.bottomSpacing} />\n        </View>\n      </ScrollView>\n\n      {/* Navigation Buttons */}\n      <View style={styles.navigationContainer}>\n        <Button\n          title=\"Back\"\n          variant=\"outline\"\n          onPress={handleBack}\n          style={styles.backButton}\n        />\n        <Button\n          title=\"Next\"\n          variant=\"primary\"\n          onPress={handleNext}\n          disabled={!state.isValid.customer}\n          style={styles.nextButton}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.surface,\n    paddingTop: 60,\n    paddingBottom: Spacing[6],\n    paddingHorizontal: Spacing[6],\n  },\n  title: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  subtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: Colors.neutral.gray[200],\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n    borderRadius: 2,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollContent: {\n    flex: 1,\n    paddingHorizontal: Spacing[6],\n  },\n  formCard: {\n    marginTop: Spacing[6],\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  sectionSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[6],\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  navigationContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: Spacing[6],\n    paddingVertical: Spacing[4],\n    backgroundColor: Colors.surface,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  backButton: {\n    flex: 1,\n    marginRight: Spacing[3],\n  },\n  nextButton: {\n    flex: 2,\n  },\n  bottomSpacing: {\n    height: Spacing[6],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/booking/BookingStepDeliveryScreen.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: '50%' }","line":65,"column":46,"nodeType":"ObjectExpression","endLine":65,"endColumn":62},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexGrow: 1 }","line":73,"column":32,"nodeType":"ObjectExpression","endLine":73,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { StyleSheet, View, Text, ScrollView } from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\n\nimport { Colors, Typography, Spacing } from '../../constants/DesignSystem';\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { Input } from '../../components/ui/Input';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useBooking } from '../../context/BookingContext';\n\ntype BookingStepDeliveryProps = NativeStackScreenProps<\n  RootStackParamList,\n  'BookingStepDelivery'\n>;\n\nexport default function BookingStepDeliveryScreen({\n  navigation,\n}: BookingStepDeliveryProps) {\n  const { state, updateFormData, setStepValidity, goToNextStep } = useBooking();\n  const { deliveryDetails } = state.formData;\n\n  // Validate form data\n  useEffect(() => {\n    const isValid = !!(\n      deliveryDetails.address &&\n      deliveryDetails.contactPerson &&\n      deliveryDetails.contactPhone &&\n      deliveryDetails.address.trim().length > 0 &&\n      deliveryDetails.contactPerson.trim().length > 0 &&\n      deliveryDetails.contactPhone.trim().length >= 10\n    );\n    setStepValidity('delivery', isValid);\n  }, [deliveryDetails, setStepValidity]);\n\n  const handleInputChange = (field: string, value: string) => {\n    const updatedData = {\n      ...deliveryDetails,\n      [field]: value,\n    };\n    updateFormData('delivery', updatedData);\n  };\n\n  const handleNext = () => {\n    if (state.isValid.delivery) {\n      goToNextStep();\n      navigation.navigate('BookingStepTowing');\n    }\n  };\n\n  const handleBack = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>Delivery Details</Text>\n        <Text style={styles.subtitle}>Step 4 of 8</Text>\n        <View style={styles.progressBar}>\n          <View style={[styles.progressFill, { width: '50%' }]} />\n        </View>\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={{ flexGrow: 1 }}\n      >\n        <View style={styles.scrollContent}>\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <Text style={styles.sectionTitle}>Delivery Information</Text>\n            <Text style={styles.sectionSubtitle}>\n              Where should we deliver your vehicle?\n            </Text>\n\n            <Input\n              label=\"Delivery Address\"\n              placeholder=\"Enter full delivery address\"\n              value={deliveryDetails.address || ''}\n              onChangeText={value => handleInputChange('address', value)}\n              leftIcon=\"location-on\"\n              multiline\n              numberOfLines={2}\n              required\n            />\n\n            <Input\n              label=\"Delivery Date\"\n              placeholder=\"Select delivery date (if specific)\"\n              value={deliveryDetails.date || ''}\n              onChangeText={value => handleInputChange('date', value)}\n              leftIcon=\"calendar-today\"\n              helper=\"Leave blank for ASAP delivery\"\n            />\n\n            <Input\n              label=\"Delivery Time\"\n              placeholder=\"Preferred time window\"\n              value={deliveryDetails.time || ''}\n              onChangeText={value => handleInputChange('time', value)}\n              leftIcon=\"access-time\"\n              helper=\"e.g., Morning (8AM-12PM), Afternoon (12PM-5PM)\"\n            />\n\n            <Input\n              label=\"Contact Person\"\n              placeholder=\"Name of person at delivery location\"\n              value={deliveryDetails.contactPerson || ''}\n              onChangeText={value => handleInputChange('contactPerson', value)}\n              leftIcon=\"person\"\n              required\n            />\n\n            <Input\n              label=\"Contact Phone\"\n              placeholder=\"Phone number for delivery coordination\"\n              value={deliveryDetails.contactPhone || ''}\n              onChangeText={value => handleInputChange('contactPhone', value)}\n              leftIcon=\"phone\"\n              keyboardType=\"phone-pad\"\n              required\n            />\n\n            <Input\n              label=\"Special Instructions\"\n              placeholder=\"Any special delivery instructions or requirements\"\n              value={deliveryDetails.specialInstructions || ''}\n              onChangeText={value =>\n                handleInputChange('specialInstructions', value)\n              }\n              leftIcon=\"note\"\n              multiline\n              numberOfLines={3}\n              helper=\"Gate codes, specific location details, timing preferences, etc.\"\n            />\n          </Card>\n\n          <View style={styles.bottomSpacing} />\n        </View>\n      </ScrollView>\n\n      {/* Navigation Buttons */}\n      <View style={styles.navigationContainer}>\n        <Button\n          title=\"Back\"\n          variant=\"outline\"\n          onPress={handleBack}\n          style={styles.backButton}\n        />\n        <Button\n          title=\"Next\"\n          variant=\"primary\"\n          onPress={handleNext}\n          disabled={!state.isValid.delivery}\n          style={styles.nextButton}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.surface,\n    paddingTop: 60,\n    paddingBottom: Spacing[6],\n    paddingHorizontal: Spacing[6],\n  },\n  title: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  subtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: Colors.neutral.gray[200],\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n    borderRadius: 2,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollContent: {\n    flex: 1,\n    paddingHorizontal: Spacing[6],\n  },\n  formCard: {\n    marginTop: Spacing[6],\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  sectionSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[6],\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  navigationContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: Spacing[6],\n    paddingVertical: Spacing[4],\n    backgroundColor: Colors.surface,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  backButton: {\n    flex: 1,\n    marginRight: Spacing[3],\n  },\n  nextButton: {\n    flex: 2,\n  },\n  bottomSpacing: {\n    height: Spacing[6],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/booking/BookingStepInsuranceScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'source' is defined but never used. Allowed unused args must match /^_/u.","line":85,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":11},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: '75%' }","line":139,"column":46,"nodeType":"ObjectExpression","endLine":139,"endColumn":62},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexGrow: 1 }","line":147,"column":32,"nodeType":"ObjectExpression","endLine":147,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":169,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5230,5233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5230,5233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Colors, Typography, Spacing } from '../../constants/DesignSystem';\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useBooking } from '../../context/BookingContext';\n\ntype BookingStepInsuranceProps = NativeStackScreenProps<\n  RootStackParamList,\n  'BookingStepInsurance'\n>;\n\nexport default function BookingStepInsuranceScreen({\n  navigation,\n}: BookingStepInsuranceProps) {\n  const { state, updateFormData, setStepValidity, goToNextStep } = useBooking();\n  const { insuranceDocumentation } = state.formData;\n\n  const documentTypes = [\n    {\n      key: 'proofOfOwnership',\n      title: 'Proof of Ownership',\n      description: 'Vehicle title, registration, or bill of sale',\n      required: true,\n      icon: 'assignment',\n    },\n    {\n      key: 'insurance',\n      title: 'Insurance Documentation',\n      description: 'Current vehicle insurance policy',\n      required: true,\n      icon: 'security',\n    },\n    {\n      key: 'otherDocuments',\n      title: 'Other Documents',\n      description: 'Any additional relevant documents',\n      required: false,\n      icon: 'folder',\n    },\n  ];\n\n  // Validate form data\n  useEffect(() => {\n    const hasOwnership =\n      (insuranceDocumentation.proofOfOwnership || []).length > 0;\n    const hasInsurance = (insuranceDocumentation.insurance || []).length > 0;\n    const isValid = hasOwnership && hasInsurance;\n    setStepValidity('insurance', isValid);\n  }, [insuranceDocumentation, setStepValidity]);\n\n  const handleDocumentUpload = (documentType: string) => {\n    // Placeholder for document upload functionality\n    Alert.alert(\n      'Document Upload',\n      `Would you like to upload ${documentTypes.find(d => d.key === documentType)?.title}?`,\n      [\n        {\n          text: 'Camera',\n          onPress: () => uploadDocument(documentType, 'camera'),\n        },\n        {\n          text: 'Gallery',\n          onPress: () => uploadDocument(documentType, 'gallery'),\n        },\n        { text: 'Cancel', style: 'cancel' },\n      ]\n    );\n  };\n\n  const uploadDocument = (\n    documentType: string,\n    source: 'camera' | 'gallery'\n  ) => {\n    // Placeholder implementation - in real app, would use expo-image-picker\n    const mockFileUri = `file://mock-${documentType}-${Date.now()}.jpg`;\n    const currentDocs =\n      insuranceDocumentation[\n        documentType as keyof typeof insuranceDocumentation\n      ] || [];\n\n    const updatedData = {\n      ...insuranceDocumentation,\n      [documentType]: [...currentDocs, mockFileUri],\n    };\n\n    updateFormData('insurance', updatedData);\n\n    Alert.alert('Success', 'Document uploaded successfully!');\n  };\n\n  const removeDocument = (documentType: string, index: number) => {\n    const currentDocs =\n      insuranceDocumentation[\n        documentType as keyof typeof insuranceDocumentation\n      ] || [];\n    const updatedDocs = currentDocs.filter((_, i) => i !== index);\n\n    const updatedData = {\n      ...insuranceDocumentation,\n      [documentType]: updatedDocs,\n    };\n\n    updateFormData('insurance', updatedData);\n  };\n\n  const handleNext = () => {\n    if (state.isValid.insurance) {\n      goToNextStep();\n      navigation.navigate('BookingStepVisual');\n    }\n  };\n\n  const handleBack = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>Insurance & Documents</Text>\n        <Text style={styles.subtitle}>Step 6 of 8</Text>\n        <View style={styles.progressBar}>\n          <View style={[styles.progressFill, { width: '75%' }]} />\n        </View>\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={{ flexGrow: 1 }}\n      >\n        <View style={styles.scrollContent}>\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <Text style={styles.sectionTitle}>Required Documentation</Text>\n            <Text style={styles.sectionSubtitle}>\n              Please upload the required documents for your vehicle shipment\n            </Text>\n\n            {documentTypes.map(docType => {\n              const documents =\n                insuranceDocumentation[\n                  docType.key as keyof typeof insuranceDocumentation\n                ] || [];\n              const hasDocuments = documents.length > 0;\n\n              return (\n                <View key={docType.key} style={styles.documentSection}>\n                  <View style={styles.documentHeader}>\n                    <View style={styles.documentInfo}>\n                      <View style={styles.documentTitleRow}>\n                        <MaterialIcons\n                          name={docType.icon as any}\n                          size={20}\n                          color={Colors.text.secondary}\n                        />\n                        <Text style={styles.documentTitle}>\n                          {docType.title}\n                          {docType.required && (\n                            <Text style={styles.required}> *</Text>\n                          )}\n                        </Text>\n                      </View>\n                      <Text style={styles.documentDescription}>\n                        {docType.description}\n                      </Text>\n                    </View>\n                    <TouchableOpacity\n                      style={[\n                        styles.uploadButton,\n                        hasDocuments && styles.uploadButtonSuccess,\n                      ]}\n                      onPress={() => handleDocumentUpload(docType.key)}\n                    >\n                      <MaterialIcons\n                        name={hasDocuments ? 'check' : 'add'}\n                        size={20}\n                        color={hasDocuments ? Colors.success : Colors.primary}\n                      />\n                    </TouchableOpacity>\n                  </View>\n\n                  {hasDocuments && (\n                    <View style={styles.documentList}>\n                      {documents.map((doc, index) => (\n                        <View key={index} style={styles.documentItem}>\n                          <MaterialIcons\n                            name=\"description\"\n                            size={16}\n                            color={Colors.text.secondary}\n                          />\n                          <Text style={styles.documentName}>\n                            Document {index + 1}\n                          </Text>\n                          <TouchableOpacity\n                            onPress={() => removeDocument(docType.key, index)}\n                            style={styles.removeButton}\n                          >\n                            <MaterialIcons\n                              name=\"close\"\n                              size={16}\n                              color={Colors.error}\n                            />\n                          </TouchableOpacity>\n                        </View>\n                      ))}\n                    </View>\n                  )}\n                </View>\n              );\n            })}\n          </Card>\n\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <View style={styles.infoSection}>\n              <MaterialIcons name=\"info\" size={24} color={Colors.primary} />\n              <View style={styles.infoContent}>\n                <Text style={styles.infoTitle}>Document Requirements</Text>\n                <Text style={styles.infoText}>\n                  • All documents must be clear and legible{'\\n'}• Accepted\n                  formats: JPG, PNG, PDF{'\\n'}• Maximum file size: 10MB per\n                  document{'\\n'}• Documents will be securely stored and only\n                  used for shipment processing\n                </Text>\n              </View>\n            </View>\n          </Card>\n\n          <View style={styles.bottomSpacing} />\n        </View>\n      </ScrollView>\n\n      {/* Navigation Buttons */}\n      <View style={styles.navigationContainer}>\n        <Button\n          title=\"Back\"\n          variant=\"outline\"\n          onPress={handleBack}\n          style={styles.backButton}\n        />\n        <Button\n          title=\"Next\"\n          variant=\"primary\"\n          onPress={handleNext}\n          disabled={!state.isValid.insurance}\n          style={styles.nextButton}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.surface,\n    paddingTop: 60,\n    paddingBottom: Spacing[6],\n    paddingHorizontal: Spacing[6],\n  },\n  title: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  subtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: Colors.neutral.gray[200],\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n    borderRadius: 2,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollContent: {\n    flex: 1,\n    paddingHorizontal: Spacing[6],\n  },\n  formCard: {\n    marginTop: Spacing[6],\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  sectionSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[6],\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  documentSection: {\n    marginBottom: Spacing[6],\n    paddingBottom: Spacing[4],\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  documentHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n  },\n  documentInfo: {\n    flex: 1,\n    marginRight: Spacing[4],\n  },\n  documentTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: Spacing[1],\n  },\n  documentTitle: {\n    fontSize: Typography.fontSize.base,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.primary,\n    marginLeft: Spacing[2],\n  },\n  required: {\n    color: Colors.error,\n  },\n  documentDescription: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n  },\n  uploadButton: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    borderWidth: 2,\n    borderColor: Colors.primary,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.surface,\n  },\n  uploadButtonSuccess: {\n    borderColor: Colors.success,\n    backgroundColor: Colors.success,\n  },\n  documentList: {\n    marginTop: Spacing[4],\n  },\n  documentItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: Spacing[3],\n    backgroundColor: Colors.neutral.gray[50],\n    borderRadius: 8,\n    marginBottom: Spacing[2],\n  },\n  documentName: {\n    flex: 1,\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.primary,\n    marginLeft: Spacing[2],\n  },\n  removeButton: {\n    padding: Spacing[1],\n  },\n  infoSection: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n  },\n  infoContent: {\n    flex: 1,\n    marginLeft: Spacing[3],\n  },\n  infoTitle: {\n    fontSize: Typography.fontSize.base,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  infoText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  navigationContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: Spacing[6],\n    paddingVertical: Spacing[4],\n    backgroundColor: Colors.surface,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  backButton: {\n    flex: 1,\n    marginRight: Spacing[3],\n  },\n  nextButton: {\n    flex: 2,\n  },\n  bottomSpacing: {\n    height: Spacing[6],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/booking/BookingStepPaymentScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MaterialIcons' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updateFormData' is assigned a value but never used.","line":33,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":32},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: '100%' }","line":93,"column":46,"nodeType":"ObjectExpression","endLine":93,"endColumn":63},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexGrow: 1 }","line":101,"column":32,"nodeType":"ObjectExpression","endLine":101,"endColumn":47},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.paymentCard","line":293,"column":3,"nodeType":"Property","endLine":295,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.billingCard","line":296,"column":3,"nodeType":"Property","endLine":298,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.paymentMethods","line":377,"column":3,"nodeType":"Property","endLine":380,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.paymentMethodOption","line":381,"column":3,"nodeType":"Property","endLine":391,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.selectedPaymentMethod","line":392,"column":3,"nodeType":"Property","endLine":395,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.paymentMethodText","line":396,"column":3,"nodeType":"Property","endLine":401,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.selectedPaymentMethodText","line":402,"column":3,"nodeType":"Property","endLine":404,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.cardForm","line":405,"column":3,"nodeType":"Property","endLine":407,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.cardRow","line":408,"column":3,"nodeType":"Property","endLine":411,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.cardRowItem","line":412,"column":3,"nodeType":"Property","endLine":414,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.addressRow","line":415,"column":3,"nodeType":"Property","endLine":418,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.addressRowItem","line":419,"column":3,"nodeType":"Property","endLine":421,"endColumn":4},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: styles.addressRowItemSmall","line":422,"column":3,"nodeType":"Property","endLine":424,"endColumn":4}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons, Ionicons } from '@expo/vector-icons';\n\n// Import the entire design system and use it from there\nimport DesignSystem from '../../constants/DesignSystem';\nconst { Colors, Typography, Spacing } = DesignSystem;\n\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { Input } from '../../components/ui/Input';\nimport { PaymentPolicyCard } from '../../components/payment/PaymentPolicyCard';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useBooking } from '../../context/BookingContext';\n\ntype BookingStepPaymentProps = NativeStackScreenProps<\n  RootStackParamList,\n  'BookingStepPayment'\n>;\n\nexport default function BookingStepPaymentScreen({\n  navigation,\n}: BookingStepPaymentProps) {\n  const { state, updateFormData, setStepValidity } = useBooking();\n  const [selectedQuote, setSelectedQuote] = useState<\n    'standard' | 'express' | 'premium'\n  >('standard');\n\n  // Mock quote data - in real app this would come from API\n  const quotes = {\n    standard: { price: 1250, days: '7-10', title: 'Standard Shipping' },\n    express: { price: 1650, days: '3-5', title: 'Express Shipping' },\n    premium: { price: 2100, days: '1-2', title: 'Premium Shipping' },\n  };\n\n  // Validate form data - only check if quote is selected\n  useEffect(() => {\n    // Only require quote selection since we're using Stripe for payment\n    const isValid = true;\n    setStepValidity('payment', isValid);\n  }, [selectedQuote, setStepValidity]);\n\n  const handleQuoteSelection = (quote: 'standard' | 'express' | 'premium') => {\n    setSelectedQuote(quote);\n  };\n\n  const handleSubmit = () => {\n    const quotePrice = quotes[selectedQuote].price * 100; // Convert to cents for Stripe\n\n    Alert.alert(\n      'Confirm Booking',\n      `You selected ${quotes[selectedQuote].title} for $${quotes[selectedQuote].price}. Continue to payment?`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Continue to Payment',\n          onPress: () =>\n            navigation.navigate('BookingPaymentProcessing', {\n              amount: quotePrice,\n              quote: {\n                service: quotes[selectedQuote].title,\n                price: quotes[selectedQuote].price,\n                days: quotes[selectedQuote].days,\n              },\n            }),\n        },\n      ]\n    );\n  };\n\n  const handleBack = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>Booking Summary</Text>\n        <Text style={styles.subtitle}>Step 9 of 9</Text>\n        <View style={styles.progressBar}>\n          <View style={[styles.progressFill, { width: '100%' }]} />\n        </View>\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={{ flexGrow: 1 }}\n      >\n        <View style={styles.scrollContent}>\n          {/* Booking Summary */}\n          <Card variant=\"default\" padding=\"lg\" style={styles.summaryCard}>\n            <Text style={styles.sectionTitle}>Booking Summary</Text>\n\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>Vehicle:</Text>\n              <Text style={styles.summaryValue}>\n                {state.formData.vehicleInformation.year}{' '}\n                {state.formData.vehicleInformation.make}{' '}\n                {state.formData.vehicleInformation.model}\n              </Text>\n            </View>\n\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>From:</Text>\n              <Text style={styles.summaryValue}>\n                {state.formData.pickupDetails.address || 'Not specified'}\n              </Text>\n            </View>\n\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>To:</Text>\n              <Text style={styles.summaryValue}>\n                {state.formData.deliveryDetails.address || 'Not specified'}\n              </Text>\n            </View>\n\n            <View style={styles.summaryRow}>\n              <Text style={styles.summaryLabel}>Service Type:</Text>\n              <Text style={styles.summaryValue}>Standard Transport</Text>\n            </View>\n          </Card>\n\n          {/* Quote Selection */}\n          <Card variant=\"default\" padding=\"lg\" style={styles.quoteCard}>\n            <Text style={styles.sectionTitle}>Select Your Quote</Text>\n            <Text style={styles.sectionSubtitle}>\n              Choose your preferred shipping option\n            </Text>\n\n            {Object.entries(quotes).map(([key, quote]) => (\n              <TouchableOpacity\n                key={key}\n                style={[\n                  styles.quoteOption,\n                  selectedQuote === key && styles.selectedQuoteOption,\n                ]}\n                onPress={() =>\n                  handleQuoteSelection(\n                    key as 'standard' | 'express' | 'premium'\n                  )\n                }\n              >\n                <View style={styles.quoteHeader}>\n                  <View style={styles.quoteInfo}>\n                    <Text\n                      style={[\n                        styles.quoteTitle,\n                        selectedQuote === key && styles.selectedQuoteText,\n                      ]}\n                    >\n                      {quote.title}\n                    </Text>\n                    <Text\n                      style={[\n                        styles.quoteDays,\n                        selectedQuote === key && styles.selectedQuoteText,\n                      ]}\n                    >\n                      {quote.days} business days\n                    </Text>\n                  </View>\n                  <Text\n                    style={[\n                      styles.quotePrice,\n                      selectedQuote === key && styles.selectedQuoteText,\n                    ]}\n                  >\n                    ${quote.price}\n                  </Text>\n                </View>\n                {selectedQuote === key && (\n                  <Ionicons\n                    name=\"checkmark-circle\"\n                    size={24}\n                    color={Colors.primary}\n                    style={styles.quoteCheckmark}\n                  />\n                )}\n              </TouchableOpacity>\n            ))}\n          </Card>\n\n          {/* Payment Policy Card */}\n          <PaymentPolicyCard\n            totalAmount={quotes[selectedQuote].price * 100}\n            paymentType=\"initial\"\n            isRefundable={true}\n            refundDeadline={new Date(Date.now() + 60 * 60 * 1000).toISOString()}\n          />\n\n          {/* Order Total */}\n          <Card variant=\"outlined\" padding=\"lg\" style={styles.totalCard}>\n            <View style={styles.totalRow}>\n              <Text style={styles.totalLabel}>Initial Payment (20%):</Text>\n              <Text style={styles.totalAmount}>\n                ${(quotes[selectedQuote].price * 0.2).toFixed(2)}\n              </Text>\n            </View>\n            <View style={styles.totalRow}>\n              <Text style={styles.totalLabel}>Total Shipment Value:</Text>\n              <Text style={styles.totalValue}>\n                ${quotes[selectedQuote].price.toFixed(2)}\n              </Text>\n            </View>\n            <Text style={styles.totalNote}>\n              After confirming, you will be redirected to our secure payment\n              processor to complete your booking.\n            </Text>\n          </Card>\n        </View>\n      </ScrollView>\n\n      {/* Bottom Navigation */}\n      <View style={styles.bottomNavigation}>\n        <Button\n          variant=\"outline\"\n          onPress={handleBack}\n          style={styles.backButton}\n          title=\"Back\"\n        />\n        <Button\n          variant=\"primary\"\n          onPress={handleSubmit}\n          style={styles.submitButton}\n          title={`Continue to Payment ($${quotes[selectedQuote].price})`}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.surface,\n    paddingTop: 60,\n    paddingHorizontal: Spacing[6],\n    paddingBottom: Spacing[6],\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  title: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  subtitle: {\n    fontSize: Typography.fontSize.base,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: Colors.border,\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n    borderRadius: 2,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollContent: {\n    padding: Spacing[6],\n  },\n  summaryCard: {\n    marginBottom: Spacing[6],\n  },\n  quoteCard: {\n    marginBottom: Spacing[6],\n  },\n  paymentCard: {\n    marginBottom: Spacing[6],\n  },\n  billingCard: {\n    marginBottom: Spacing[6],\n  },\n  totalCard: {\n    marginBottom: Spacing[8],\n    borderColor: Colors.primary,\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  sectionSubtitle: {\n    fontSize: Typography.fontSize.base,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[6],\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: Spacing[3],\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  summaryLabel: {\n    fontSize: Typography.fontSize.base,\n    color: Colors.text.secondary,\n    flex: 1,\n  },\n  summaryValue: {\n    fontSize: Typography.fontSize.base,\n    fontWeight: '500', // Use literal value instead of Typography.fontWeight.medium\n    color: Colors.text.primary,\n    flex: 2,\n    textAlign: 'right',\n  },\n  quoteOption: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: Spacing[6],\n    marginBottom: Spacing[4],\n    position: 'relative',\n  },\n  selectedQuoteOption: {\n    borderColor: Colors.primary,\n    backgroundColor: Colors.primaryLight,\n  },\n  quoteHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  quoteInfo: {\n    flex: 1,\n  },\n  quoteTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  quoteDays: {\n    fontSize: Typography.fontSize.base,\n    color: Colors.text.secondary,\n  },\n  quotePrice: {\n    fontSize: Typography.fontSize.xl,\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n  },\n  selectedQuoteText: {\n    color: Colors.primary,\n  },\n  quoteCheckmark: {\n    position: 'absolute',\n    top: Spacing[3],\n    right: Spacing[3],\n  },\n  paymentMethods: {\n    flexDirection: 'row',\n    marginBottom: Spacing[6],\n  },\n  paymentMethodOption: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: Spacing[4],\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    marginRight: Spacing[3],\n  },\n  selectedPaymentMethod: {\n    borderColor: Colors.primary,\n    backgroundColor: Colors.primaryLight,\n  },\n  paymentMethodText: {\n    fontSize: Typography.fontSize.base,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.secondary,\n    marginLeft: Spacing[3],\n  },\n  selectedPaymentMethodText: {\n    color: Colors.primary,\n  },\n  cardForm: {\n    marginTop: Spacing[6],\n  },\n  cardRow: {\n    flexDirection: 'row',\n    gap: Spacing[4],\n  },\n  cardRowItem: {\n    flex: 1,\n  },\n  addressRow: {\n    flexDirection: 'row',\n    gap: Spacing[4],\n  },\n  addressRowItem: {\n    flex: 2,\n  },\n  addressRowItemSmall: {\n    flex: 1,\n  },\n  totalRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: Spacing[3],\n  },\n  totalLabel: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n  },\n  totalAmount: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.primary,\n  },\n  totalValue: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n  },\n  totalNote: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n  },\n  bottomNavigation: {\n    flexDirection: 'row',\n    padding: Spacing[6],\n    backgroundColor: Colors.surface,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    gap: Spacing[4],\n  },\n  backButton: {\n    flex: 1,\n  },\n  submitButton: {\n    flex: 2,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/booking/BookingStepPickupScreen.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: '37.5%' }","line":63,"column":46,"nodeType":"ObjectExpression","endLine":63,"endColumn":64},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexGrow: 1 }","line":71,"column":32,"nodeType":"ObjectExpression","endLine":71,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { StyleSheet, View, Text, ScrollView } from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\n\nimport { Colors, Typography, Spacing } from '../../constants/DesignSystem';\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { Input } from '../../components/ui/Input';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useBooking } from '../../context/BookingContext';\n\ntype BookingStepPickupProps = NativeStackScreenProps<\n  RootStackParamList,\n  'BookingStepPickup'\n>;\n\nexport default function BookingStepPickupScreen({\n  navigation,\n}: BookingStepPickupProps) {\n  const { state, updateFormData, setStepValidity, goToNextStep } = useBooking();\n  const { pickupDetails } = state.formData;\n\n  // Validate form data\n  useEffect(() => {\n    const isValid = !!(\n      pickupDetails.address &&\n      pickupDetails.date &&\n      pickupDetails.contactPerson &&\n      pickupDetails.contactPhone\n    );\n    setStepValidity('pickup', isValid);\n  }, [pickupDetails, setStepValidity]);\n\n  const handleInputChange = (field: string, value: string) => {\n    const updatedData = {\n      ...pickupDetails,\n      [field]: value,\n    };\n    updateFormData('pickup', updatedData);\n  };\n\n  const handleNext = () => {\n    if (state.isValid.pickup) {\n      goToNextStep();\n      navigation.navigate('BookingStepDelivery');\n    }\n  };\n\n  const handleBack = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>Pickup Details</Text>\n        <Text style={styles.subtitle}>Step 3 of 8</Text>\n        <View style={styles.progressBar}>\n          <View style={[styles.progressFill, { width: '37.5%' }]} />\n        </View>\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={{ flexGrow: 1 }}\n      >\n        <View style={styles.scrollContent}>\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <Text style={styles.sectionTitle}>Pickup Information</Text>\n            <Text style={styles.sectionSubtitle}>\n              Where and when should we pick up your vehicle?\n            </Text>\n\n            <Input\n              label=\"Pickup Address\"\n              placeholder=\"Enter full pickup address\"\n              value={pickupDetails.address || ''}\n              onChangeText={value => handleInputChange('address', value)}\n              leftIcon=\"location-on\"\n              multiline\n              numberOfLines={2}\n              required\n            />\n\n            <Input\n              label=\"Pickup Date\"\n              placeholder=\"Select pickup date\"\n              value={pickupDetails.date || ''}\n              onChangeText={value => handleInputChange('date', value)}\n              leftIcon=\"calendar-today\"\n              required\n              helper=\"Preferred pickup date (flexible dates may reduce cost)\"\n            />\n\n            <Input\n              label=\"Pickup Time\"\n              placeholder=\"Preferred time window\"\n              value={pickupDetails.time || ''}\n              onChangeText={value => handleInputChange('time', value)}\n              leftIcon=\"access-time\"\n              helper=\"e.g., Morning (8AM-12PM), Afternoon (12PM-5PM)\"\n            />\n\n            <Input\n              label=\"Contact Person\"\n              placeholder=\"Name of person at pickup location\"\n              value={pickupDetails.contactPerson || ''}\n              onChangeText={value => handleInputChange('contactPerson', value)}\n              leftIcon=\"person\"\n              required\n            />\n\n            <Input\n              label=\"Contact Phone\"\n              placeholder=\"Phone number for pickup coordination\"\n              value={pickupDetails.contactPhone || ''}\n              onChangeText={value => handleInputChange('contactPhone', value)}\n              leftIcon=\"phone\"\n              keyboardType=\"phone-pad\"\n              required\n            />\n          </Card>\n\n          <View style={styles.bottomSpacing} />\n        </View>\n      </ScrollView>\n\n      {/* Navigation Buttons */}\n      <View style={styles.navigationContainer}>\n        <Button\n          title=\"Back\"\n          variant=\"outline\"\n          onPress={handleBack}\n          style={styles.backButton}\n        />\n        <Button\n          title=\"Next\"\n          variant=\"primary\"\n          onPress={handleNext}\n          disabled={!state.isValid.pickup}\n          style={styles.nextButton}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.surface,\n    paddingTop: 60,\n    paddingBottom: Spacing[6],\n    paddingHorizontal: Spacing[6],\n  },\n  title: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  subtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: Colors.neutral.gray[200],\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n    borderRadius: 2,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollContent: {\n    flex: 1,\n    paddingHorizontal: Spacing[6],\n  },\n  formCard: {\n    marginTop: Spacing[6],\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  sectionSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[6],\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  navigationContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: Spacing[6],\n    paddingVertical: Spacing[4],\n    backgroundColor: Colors.surface,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  backButton: {\n    flex: 1,\n    marginRight: Spacing[3],\n  },\n  nextButton: {\n    flex: 2,\n  },\n  bottomSpacing: {\n    height: Spacing[6],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/booking/BookingStepTermsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":1,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: '88.9%' }","line":91,"column":46,"nodeType":"ObjectExpression","endLine":91,"endColumn":64},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexGrow: 1 }","line":99,"column":32,"nodeType":"ObjectExpression","endLine":99,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Colors, Typography, Spacing } from '../../constants/DesignSystem';\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { Input } from '../../components/ui/Input';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useBooking } from '../../context/BookingContext';\n\ntype BookingStepTermsProps = NativeStackScreenProps<\n  RootStackParamList,\n  'BookingStepTerms'\n>;\n\nexport default function BookingStepTermsScreen({\n  navigation,\n}: BookingStepTermsProps) {\n  const { state, updateFormData, setStepValidity, goToNextStep } = useBooking();\n  const { termsAuthorization } = state.formData;\n\n  // Validate form data\n  useEffect(() => {\n    const isValid = !!(\n      termsAuthorization.serviceAgreementAccepted &&\n      termsAuthorization.cancellationPolicyAccepted &&\n      termsAuthorization.digitalSignature &&\n      termsAuthorization.digitalSignature.trim().length > 0\n    );\n    setStepValidity('terms', isValid);\n  }, [termsAuthorization, setStepValidity]);\n\n  const handleCheckboxToggle = (field: string, currentValue: boolean) => {\n    const updatedData = {\n      ...termsAuthorization,\n      [field]: !currentValue,\n    };\n    updateFormData('terms', updatedData);\n  };\n\n  const handleSignatureChange = (value: string) => {\n    const updatedData = {\n      ...termsAuthorization,\n      digitalSignature: value,\n      signatureDate: new Date().toISOString(),\n    };\n    updateFormData('terms', updatedData);\n  };\n\n  const handleSubmit = () => {\n    if (state.isValid.terms) {\n      // Navigate to payment step\n      goToNextStep();\n      navigation.navigate('BookingStepPayment');\n    }\n  };\n\n  const handleBack = () => {\n    navigation.goBack();\n  };\n\n  const viewDocument = (documentType: 'service' | 'cancellation') => {\n    const title =\n      documentType === 'service' ? 'Service Agreement' : 'Cancellation Policy';\n    Alert.alert(\n      title,\n      `This would show the full ${title.toLowerCase()} document. In a real app, this would open a detailed view or PDF.`,\n      [{ text: 'Close' }]\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>Terms & Authorization</Text>\n        <Text style={styles.subtitle}>Step 8 of 9</Text>\n        <View style={styles.progressBar}>\n          <View style={[styles.progressFill, { width: '88.9%' }]} />\n        </View>\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={{ flexGrow: 1 }}\n      >\n        <View style={styles.scrollContent}>\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <Text style={styles.sectionTitle}>Service Agreement</Text>\n            <Text style={styles.sectionSubtitle}>\n              Please review and accept our terms of service\n            </Text>\n\n            <View style={styles.documentSection}>\n              <View style={styles.documentPreview}>\n                <Text style={styles.documentTitle}>\n                  DriveDrop Vehicle Shipping Service Agreement\n                </Text>\n                <Text style={styles.documentExcerpt}>\n                  This agreement governs the vehicle shipping services provided\n                  by DriveDrop. Key points include:\n                  {'\\n\\n'}• Professional handling and transport of your vehicle\n                  {'\\n'}• Insurance coverage during transport\n                  {'\\n'}• Delivery timeline estimates\n                  {'\\n'}• Payment terms and conditions\n                  {'\\n'}• Liability and damage policies\n                  {'\\n\\n'}Please read the full agreement before accepting.\n                </Text>\n                <TouchableOpacity\n                  style={styles.viewDocumentButton}\n                  onPress={() => viewDocument('service')}\n                >\n                  <Text style={styles.viewDocumentText}>\n                    View Full Agreement\n                  </Text>\n                  <MaterialIcons\n                    name=\"open-in-new\"\n                    size={16}\n                    color={Colors.primary}\n                  />\n                </TouchableOpacity>\n              </View>\n\n              <TouchableOpacity\n                style={styles.checkboxRow}\n                onPress={() =>\n                  handleCheckboxToggle(\n                    'serviceAgreementAccepted',\n                    termsAuthorization.serviceAgreementAccepted || false\n                  )\n                }\n              >\n                <View\n                  style={[\n                    styles.checkbox,\n                    termsAuthorization.serviceAgreementAccepted &&\n                      styles.checkboxChecked,\n                  ]}\n                >\n                  {termsAuthorization.serviceAgreementAccepted && (\n                    <MaterialIcons\n                      name=\"check\"\n                      size={16}\n                      color={Colors.surface}\n                    />\n                  )}\n                </View>\n                <Text style={styles.checkboxText}>\n                  I have read and agree to the Service Agreement\n                  <Text style={styles.required}> *</Text>\n                </Text>\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.documentSection}>\n              <View style={styles.documentPreview}>\n                <Text style={styles.documentTitle}>Cancellation Policy</Text>\n                <Text style={styles.documentExcerpt}>\n                  Our cancellation policy outlines:\n                  {'\\n\\n'}• Free cancellation up to 24 hours before pickup\n                  {'\\n'}• Partial refund for cancellations within 24 hours\n                  {'\\n'}• Emergency cancellation procedures\n                  {'\\n'}• Rescheduling options and fees\n                </Text>\n                <TouchableOpacity\n                  style={styles.viewDocumentButton}\n                  onPress={() => viewDocument('cancellation')}\n                >\n                  <Text style={styles.viewDocumentText}>View Full Policy</Text>\n                  <MaterialIcons\n                    name=\"open-in-new\"\n                    size={16}\n                    color={Colors.primary}\n                  />\n                </TouchableOpacity>\n              </View>\n\n              <TouchableOpacity\n                style={styles.checkboxRow}\n                onPress={() =>\n                  handleCheckboxToggle(\n                    'cancellationPolicyAccepted',\n                    termsAuthorization.cancellationPolicyAccepted || false\n                  )\n                }\n              >\n                <View\n                  style={[\n                    styles.checkbox,\n                    termsAuthorization.cancellationPolicyAccepted &&\n                      styles.checkboxChecked,\n                  ]}\n                >\n                  {termsAuthorization.cancellationPolicyAccepted && (\n                    <MaterialIcons\n                      name=\"check\"\n                      size={16}\n                      color={Colors.surface}\n                    />\n                  )}\n                </View>\n                <Text style={styles.checkboxText}>\n                  I understand and accept the Cancellation Policy\n                  <Text style={styles.required}> *</Text>\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </Card>\n\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <Text style={styles.sectionTitle}>Digital Signature</Text>\n            <Text style={styles.sectionSubtitle}>\n              Please provide your digital signature to authorize this shipment\n              request\n            </Text>\n\n            <Input\n              label=\"Full Legal Name\"\n              placeholder=\"Type your full legal name as signature\"\n              value={termsAuthorization.digitalSignature || ''}\n              onChangeText={handleSignatureChange}\n              leftIcon=\"edit\"\n              required\n              helper=\"This serves as your digital signature and legal authorization\"\n            />\n\n            {termsAuthorization.signatureDate && (\n              <View style={styles.signatureInfo}>\n                <MaterialIcons\n                  name=\"schedule\"\n                  size={16}\n                  color={Colors.text.secondary}\n                />\n                <Text style={styles.signatureDate}>\n                  Signed on{' '}\n                  {new Date(\n                    termsAuthorization.signatureDate\n                  ).toLocaleDateString()}\n                </Text>\n              </View>\n            )}\n          </Card>\n\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <View style={styles.summarySection}>\n              <MaterialIcons name=\"info\" size={24} color={Colors.primary} />\n              <View style={styles.summaryContent}>\n                <Text style={styles.summaryTitle}>Next Steps</Text>\n                <Text style={styles.summaryText}>\n                  After submitting your request:\n                  {'\\n\\n'}1. You'll receive an email confirmation\n                  {'\\n'}2. Our team will review your submission\n                  {'\\n'}3. You'll get a detailed quote within 24 hours\n                  {'\\n'}4. Schedule pickup once quote is accepted\n                  {'\\n'}5. Track your shipment in real-time\n                </Text>\n              </View>\n            </View>\n          </Card>\n\n          <View style={styles.bottomSpacing} />\n        </View>\n      </ScrollView>\n\n      {/* Navigation Buttons */}\n      <View style={styles.navigationContainer}>\n        <Button\n          title=\"Back\"\n          variant=\"outline\"\n          onPress={handleBack}\n          style={styles.backButton}\n        />\n        <Button\n          title=\"Continue to Payment\"\n          variant=\"primary\"\n          onPress={handleSubmit}\n          disabled={!state.isValid.terms}\n          style={styles.submitButton}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.surface,\n    paddingTop: 60,\n    paddingBottom: Spacing[6],\n    paddingHorizontal: Spacing[6],\n  },\n  title: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  subtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: Colors.neutral.gray[200],\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n    borderRadius: 2,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollContent: {\n    flex: 1,\n    paddingHorizontal: Spacing[6],\n  },\n  formCard: {\n    marginTop: Spacing[6],\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  sectionSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[6],\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  documentSection: {\n    marginBottom: Spacing[6],\n  },\n  documentPreview: {\n    backgroundColor: Colors.neutral.gray[50],\n    padding: Spacing[4],\n    borderRadius: 8,\n    marginBottom: Spacing[4],\n  },\n  documentTitle: {\n    fontSize: Typography.fontSize.base,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[3],\n  },\n  documentExcerpt: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n    marginBottom: Spacing[3],\n  },\n  viewDocumentButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    alignSelf: 'flex-start',\n  },\n  viewDocumentText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.primary,\n    marginRight: Spacing[1],\n  },\n  checkboxRow: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n  },\n  checkbox: {\n    width: 20,\n    height: 20,\n    borderWidth: 2,\n    borderColor: Colors.border,\n    borderRadius: 4,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: Spacing[3],\n    marginTop: 2,\n  },\n  checkboxChecked: {\n    borderColor: Colors.primary,\n    backgroundColor: Colors.primary,\n  },\n  checkboxText: {\n    flex: 1,\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.primary,\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  required: {\n    color: Colors.error,\n  },\n  signatureInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: Spacing[2],\n  },\n  signatureDate: {\n    fontSize: Typography.fontSize.xs,\n    color: Colors.text.secondary,\n    marginLeft: Spacing[1],\n  },\n  summarySection: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n  },\n  summaryContent: {\n    flex: 1,\n    marginLeft: Spacing[3],\n  },\n  summaryTitle: {\n    fontSize: Typography.fontSize.base,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  summaryText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  navigationContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: Spacing[6],\n    paddingVertical: Spacing[4],\n    backgroundColor: Colors.surface,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  backButton: {\n    flex: 1,\n    marginRight: Spacing[3],\n  },\n  submitButton: {\n    flex: 2,\n  },\n  bottomSpacing: {\n    height: Spacing[6],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/booking/BookingStepTowingScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":1,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: '62.5%' }","line":113,"column":46,"nodeType":"ObjectExpression","endLine":113,"endColumn":64},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexGrow: 1 }","line":121,"column":32,"nodeType":"ObjectExpression","endLine":121,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Colors, Typography, Spacing } from '../../constants/DesignSystem';\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { Input } from '../../components/ui/Input';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useBooking } from '../../context/BookingContext';\n\ntype BookingStepTowingProps = NativeStackScreenProps<\n  RootStackParamList,\n  'BookingStepTowing'\n>;\n\nexport default function BookingStepTowingScreen({\n  navigation,\n}: BookingStepTowingProps) {\n  const { state, updateFormData, setStepValidity, goToNextStep } = useBooking();\n  const { towingTransport } = state.formData;\n\n  const operabilityOptions = [\n    {\n      value: 'running',\n      label: 'Running/Drivable',\n      description: 'Vehicle starts and drives normally',\n    },\n    {\n      value: 'not_running',\n      label: 'Not Running',\n      description: 'Vehicle does not start or run',\n    },\n    {\n      value: 'partially_running',\n      label: 'Partially Running',\n      description: 'Vehicle has mechanical issues but may start',\n    },\n  ];\n\n  const equipmentOptions = [\n    'Flatbed Carrier',\n    'Open Trailer',\n    'Enclosed Trailer',\n    'Wheel Lift Tow',\n    'Dolly Transport',\n    'Lowboy Trailer',\n  ];\n\n  // Validate form data\n  useEffect(() => {\n    const isValid = !!towingTransport.operability;\n    setStepValidity('towing', isValid);\n  }, [towingTransport, setStepValidity]);\n\n  const handleOperabilityChange = (value: string) => {\n    const updatedData = {\n      ...towingTransport,\n      operability: value as 'running' | 'not_running' | 'partially_running',\n    };\n    updateFormData('towing', updatedData);\n  };\n\n  const handleEquipmentToggle = (equipment: string) => {\n    const currentEquipment = towingTransport.equipmentNeeds || [];\n    const updatedEquipment = currentEquipment.includes(equipment)\n      ? currentEquipment.filter(item => item !== equipment)\n      : [...currentEquipment, equipment];\n\n    const updatedData = {\n      ...towingTransport,\n      equipmentNeeds: updatedEquipment,\n    };\n    updateFormData('towing', updatedData);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    const updatedData = {\n      ...towingTransport,\n      [field]: value,\n    };\n    updateFormData('towing', updatedData);\n  };\n\n  const handleNext = () => {\n    if (state.isValid.towing) {\n      goToNextStep();\n      navigation.navigate('BookingStepInsurance');\n    }\n  };\n\n  const handleBack = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>Towing & Transport</Text>\n        <Text style={styles.subtitle}>Step 5 of 8</Text>\n        <View style={styles.progressBar}>\n          <View style={[styles.progressFill, { width: '62.5%' }]} />\n        </View>\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={{ flexGrow: 1 }}\n      >\n        <View style={styles.scrollContent}>\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <Text style={styles.sectionTitle}>Vehicle Operability</Text>\n            <Text style={styles.sectionSubtitle}>\n              Is your vehicle currently drivable?\n            </Text>\n\n            {operabilityOptions.map(option => (\n              <TouchableOpacity\n                key={option.value}\n                style={[\n                  styles.optionCard,\n                  towingTransport.operability === option.value &&\n                    styles.optionCardSelected,\n                ]}\n                onPress={() => handleOperabilityChange(option.value)}\n              >\n                <View style={styles.optionContent}>\n                  <View style={styles.optionHeader}>\n                    <Text\n                      style={[\n                        styles.optionLabel,\n                        towingTransport.operability === option.value &&\n                          styles.optionLabelSelected,\n                      ]}\n                    >\n                      {option.label}\n                    </Text>\n                    <View\n                      style={[\n                        styles.radioButton,\n                        towingTransport.operability === option.value &&\n                          styles.radioButtonSelected,\n                      ]}\n                    >\n                      {towingTransport.operability === option.value && (\n                        <MaterialIcons\n                          name=\"check\"\n                          size={16}\n                          color={Colors.surface}\n                        />\n                      )}\n                    </View>\n                  </View>\n                  <Text style={styles.optionDescription}>\n                    {option.description}\n                  </Text>\n                </View>\n              </TouchableOpacity>\n            ))}\n          </Card>\n\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <Text style={styles.sectionTitle}>Equipment Preferences</Text>\n            <Text style={styles.sectionSubtitle}>\n              Select preferred transport equipment (optional)\n            </Text>\n\n            <View style={styles.equipmentGrid}>\n              {equipmentOptions.map(equipment => (\n                <TouchableOpacity\n                  key={equipment}\n                  style={[\n                    styles.equipmentChip,\n                    (towingTransport.equipmentNeeds || []).includes(\n                      equipment\n                    ) && styles.equipmentChipSelected,\n                  ]}\n                  onPress={() => handleEquipmentToggle(equipment)}\n                >\n                  <Text\n                    style={[\n                      styles.equipmentText,\n                      (towingTransport.equipmentNeeds || []).includes(\n                        equipment\n                      ) && styles.equipmentTextSelected,\n                    ]}\n                  >\n                    {equipment}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          </Card>\n\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <Input\n              label=\"Special Requirements\"\n              placeholder=\"Any special towing or transport requirements\"\n              value={towingTransport.specialRequirements || ''}\n              onChangeText={value =>\n                handleInputChange('specialRequirements', value)\n              }\n              leftIcon=\"build\"\n              multiline\n              numberOfLines={3}\n              helper=\"Oversized vehicle, modifications, accessibility needs, etc.\"\n            />\n          </Card>\n\n          <View style={styles.bottomSpacing} />\n        </View>\n      </ScrollView>\n\n      {/* Navigation Buttons */}\n      <View style={styles.navigationContainer}>\n        <Button\n          title=\"Back\"\n          variant=\"outline\"\n          onPress={handleBack}\n          style={styles.backButton}\n        />\n        <Button\n          title=\"Next\"\n          variant=\"primary\"\n          onPress={handleNext}\n          disabled={!state.isValid.towing}\n          style={styles.nextButton}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.surface,\n    paddingTop: 60,\n    paddingBottom: Spacing[6],\n    paddingHorizontal: Spacing[6],\n  },\n  title: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  subtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: Colors.neutral.gray[200],\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n    borderRadius: 2,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollContent: {\n    flex: 1,\n    paddingHorizontal: Spacing[6],\n  },\n  formCard: {\n    marginTop: Spacing[6],\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  sectionSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[6],\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  optionCard: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: Spacing[4],\n    marginBottom: Spacing[3],\n  },\n  optionCardSelected: {\n    borderColor: Colors.primary,\n    backgroundColor: Colors.brand.primary[50],\n  },\n  optionContent: {\n    flex: 1,\n  },\n  optionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: Spacing[1],\n  },\n  optionLabel: {\n    fontSize: Typography.fontSize.base,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.primary,\n  },\n  optionLabelSelected: {\n    color: Colors.primary,\n  },\n  optionDescription: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n  },\n  radioButton: {\n    width: 20,\n    height: 20,\n    borderRadius: 10,\n    borderWidth: 2,\n    borderColor: Colors.border,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radioButtonSelected: {\n    borderColor: Colors.primary,\n    backgroundColor: Colors.primary,\n  },\n  equipmentGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: Spacing[2],\n  },\n  equipmentChip: {\n    paddingHorizontal: Spacing[4],\n    paddingVertical: Spacing[2],\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    backgroundColor: Colors.surface,\n    marginBottom: Spacing[2],\n  },\n  equipmentChipSelected: {\n    borderColor: Colors.primary,\n    backgroundColor: Colors.primary,\n  },\n  equipmentText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.primary,\n  },\n  equipmentTextSelected: {\n    color: Colors.surface,\n  },\n  navigationContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: Spacing[6],\n    paddingVertical: Spacing[4],\n    backgroundColor: Colors.surface,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  backButton: {\n    flex: 1,\n    marginRight: Spacing[3],\n  },\n  nextButton: {\n    flex: 2,\n  },\n  bottomSpacing: {\n    height: Spacing[6],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/booking/BookingStepVehicleScreen.tsx","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: '25%' }","line":66,"column":46,"nodeType":"ObjectExpression","endLine":66,"endColumn":62},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexGrow: 1 }","line":74,"column":32,"nodeType":"ObjectExpression","endLine":74,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { StyleSheet, View, Text, ScrollView } from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\n\nimport { Colors, Typography, Spacing } from '../../constants/DesignSystem';\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { Input } from '../../components/ui/Input';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useBooking } from '../../context/BookingContext';\n\ntype BookingStepVehicleProps = NativeStackScreenProps<\n  RootStackParamList,\n  'BookingStepVehicle'\n>;\n\nexport default function BookingStepVehicleScreen({\n  navigation,\n}: BookingStepVehicleProps) {\n  const { state, updateFormData, setStepValidity, goToNextStep } = useBooking();\n  const { vehicleInformation } = state.formData;\n\n  // Validate form data\n  useEffect(() => {\n    const isValid = !!(\n      vehicleInformation.make &&\n      vehicleInformation.model &&\n      vehicleInformation.year &&\n      vehicleInformation.make.trim().length > 0 &&\n      vehicleInformation.model.trim().length > 0 &&\n      vehicleInformation.year.trim().length === 4\n    );\n    setStepValidity('vehicle', isValid);\n  }, [vehicleInformation, setStepValidity]);\n\n  const handleInputChange = (field: string, value: string) => {\n    console.log('Vehicle input change:', field, value);\n    const updatedData = {\n      ...vehicleInformation,\n      [field]: value,\n    };\n    updateFormData('vehicle', updatedData);\n  };\n\n  const handleNext = () => {\n    if (state.isValid.vehicle) {\n      goToNextStep();\n      navigation.navigate('BookingStepPickup');\n    }\n  };\n\n  const handleBack = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>Vehicle Information</Text>\n        <Text style={styles.subtitle}>Step 2 of 8</Text>\n        <View style={styles.progressBar}>\n          <View style={[styles.progressFill, { width: '25%' }]} />\n        </View>\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={{ flexGrow: 1 }}\n      >\n        <View style={styles.scrollContent}>\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <Text style={styles.sectionTitle}>Vehicle Details</Text>\n            <Text style={styles.sectionSubtitle}>\n              Please provide details about the vehicle to be shipped\n            </Text>\n\n            <Input\n              label=\"Make\"\n              placeholder=\"e.g., Ford, Toyota, BMW\"\n              value={vehicleInformation.make || ''}\n              onChangeText={value => handleInputChange('make', value)}\n              leftIcon=\"directions-car\"\n              required\n            />\n\n            <Input\n              label=\"Model\"\n              placeholder=\"e.g., F-150, Camry, X5\"\n              value={vehicleInformation.model || ''}\n              onChangeText={value => handleInputChange('model', value)}\n              leftIcon=\"directions-car\"\n              required\n            />\n\n            <Input\n              label=\"Year\"\n              placeholder=\"e.g., 2020\"\n              value={vehicleInformation.year || ''}\n              onChangeText={value => handleInputChange('year', value)}\n              leftIcon=\"calendar-today\"\n              keyboardType=\"numeric\"\n              maxLength={4}\n              required\n            />\n\n            <Input\n              label=\"VIN Number\"\n              placeholder=\"17-character VIN (optional)\"\n              value={vehicleInformation.vin || ''}\n              onChangeText={value =>\n                handleInputChange('vin', value.toUpperCase())\n              }\n              leftIcon=\"confirmation-number\"\n              autoCapitalize=\"characters\"\n              maxLength={17}\n              helper=\"Vehicle Identification Number helps with accurate quotes\"\n            />\n\n            <Input\n              label=\"License Plate\"\n              placeholder=\"License plate number (optional)\"\n              value={vehicleInformation.licensePlate || ''}\n              onChangeText={value =>\n                handleInputChange('licensePlate', value.toUpperCase())\n              }\n              leftIcon=\"credit-card\"\n              autoCapitalize=\"characters\"\n            />\n\n            <Input\n              label=\"Condition Notes\"\n              placeholder=\"Any special conditions, modifications, or damage to note\"\n              value={vehicleInformation.conditionNotes || ''}\n              onChangeText={value => handleInputChange('conditionNotes', value)}\n              leftIcon=\"note\"\n              multiline\n              numberOfLines={3}\n              helper=\"This helps us prepare the right equipment and handling\"\n            />\n          </Card>\n\n          <View style={styles.bottomSpacing} />\n        </View>\n      </ScrollView>\n\n      {/* Navigation Buttons */}\n      <View style={styles.navigationContainer}>\n        <Button\n          title=\"Back\"\n          variant=\"outline\"\n          onPress={handleBack}\n          style={styles.backButton}\n        />\n        <Button\n          title=\"Next\"\n          variant=\"primary\"\n          onPress={handleNext}\n          disabled={!state.isValid.vehicle}\n          style={styles.nextButton}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.surface,\n    paddingTop: 60,\n    paddingBottom: Spacing[6],\n    paddingHorizontal: Spacing[6],\n  },\n  title: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  subtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: Colors.neutral.gray[200],\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n    borderRadius: 2,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollContent: {\n    flex: 1,\n    paddingHorizontal: Spacing[6],\n  },\n  formCard: {\n    marginTop: Spacing[6],\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  sectionSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[6],\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  navigationContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: Spacing[6],\n    paddingVertical: Spacing[4],\n    backgroundColor: Colors.surface,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  backButton: {\n    flex: 1,\n    marginRight: Spacing[3],\n  },\n  nextButton: {\n    flex: 2,\n  },\n  bottomSpacing: {\n    height: Spacing[6],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/booking/BookingStepVisualScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'source' is defined but never used. Allowed unused args must match /^_/u.","line":100,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":49},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: '87.5%' }","line":149,"column":46,"nodeType":"ObjectExpression","endLine":149,"endColumn":64},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexGrow: 1 }","line":157,"column":32,"nodeType":"ObjectExpression","endLine":157,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5969,5972],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5969,5972],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Colors, Typography, Spacing } from '../../constants/DesignSystem';\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useBooking } from '../../context/BookingContext';\n\ntype BookingStepVisualProps = NativeStackScreenProps<\n  RootStackParamList,\n  'BookingStepVisual'\n>;\n\nexport default function BookingStepVisualScreen({\n  navigation,\n}: BookingStepVisualProps) {\n  const { state, updateFormData, setStepValidity, goToNextStep } = useBooking();\n  const { visualDocumentation } = state.formData;\n\n  const photoCategories = [\n    {\n      key: 'frontView',\n      title: 'Front View',\n      description: 'Clear photo of vehicle front',\n      required: true,\n      icon: 'crop-landscape',\n    },\n    {\n      key: 'rearView',\n      title: 'Rear View',\n      description: 'Clear photo of vehicle rear',\n      required: true,\n      icon: 'crop-landscape',\n    },\n    {\n      key: 'leftSide',\n      title: 'Left Side',\n      description: 'Full side view from driver side',\n      required: true,\n      icon: 'crop-landscape',\n    },\n    {\n      key: 'rightSide',\n      title: 'Right Side',\n      description: 'Full side view from passenger side',\n      required: true,\n      icon: 'crop-landscape',\n    },\n    {\n      key: 'interior',\n      title: 'Interior',\n      description: 'Dashboard and interior condition',\n      required: false,\n      icon: 'airline-seat-recline-normal',\n    },\n    {\n      key: 'damagePhotos',\n      title: 'Damage Photos',\n      description: 'Any existing damage or wear',\n      required: false,\n      icon: 'report-problem',\n    },\n  ];\n\n  // Validate form data\n  useEffect(() => {\n    const requiredCategories = photoCategories.filter(cat => cat.required);\n    const hasAllRequired = requiredCategories.every(category => {\n      const photos =\n        visualDocumentation[category.key as keyof typeof visualDocumentation] ||\n        [];\n      return photos.length > 0;\n    });\n    setStepValidity('visual', hasAllRequired);\n  }, [visualDocumentation, setStepValidity]);\n\n  const handlePhotoCapture = (category: string) => {\n    Alert.alert(\n      'Add Photos',\n      `Add photos for ${photoCategories.find(c => c.key === category)?.title}`,\n      [\n        { text: 'Camera', onPress: () => capturePhoto(category, 'camera') },\n        { text: 'Gallery', onPress: () => capturePhoto(category, 'gallery') },\n        { text: 'Cancel', style: 'cancel' },\n      ]\n    );\n  };\n\n  const capturePhoto = (category: string, source: 'camera' | 'gallery') => {\n    // Placeholder implementation - in real app, would use expo-image-picker\n    const mockPhotoUri = `file://mock-${category}-${Date.now()}.jpg`;\n    const currentPhotos =\n      visualDocumentation[category as keyof typeof visualDocumentation] || [];\n\n    const updatedData = {\n      ...visualDocumentation,\n      [category]: [...currentPhotos, mockPhotoUri],\n    };\n\n    updateFormData('visual', updatedData);\n\n    Alert.alert('Success', 'Photo added successfully!');\n  };\n\n  const removePhoto = (category: string, index: number) => {\n    const currentPhotos =\n      visualDocumentation[category as keyof typeof visualDocumentation] || [];\n    const updatedPhotos = currentPhotos.filter((_, i) => i !== index);\n\n    const updatedData = {\n      ...visualDocumentation,\n      [category]: updatedPhotos,\n    };\n\n    updateFormData('visual', updatedData);\n  };\n\n  const handleNext = () => {\n    if (state.isValid.visual) {\n      goToNextStep();\n      navigation.navigate('BookingStepTerms');\n    }\n  };\n\n  const handleBack = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>Visual Documentation</Text>\n        <Text style={styles.subtitle}>Step 7 of 8</Text>\n        <View style={styles.progressBar}>\n          <View style={[styles.progressFill, { width: '87.5%' }]} />\n        </View>\n      </View>\n\n      <ScrollView\n        style={styles.content}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={{ flexGrow: 1 }}\n      >\n        <View style={styles.scrollContent}>\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <Text style={styles.sectionTitle}>Vehicle Photos</Text>\n            <Text style={styles.sectionSubtitle}>\n              Take clear photos of your vehicle from all angles. This helps us\n              provide accurate service and document the vehicle's condition.\n            </Text>\n\n            <View style={styles.photoGrid}>\n              {photoCategories.map(category => {\n                const photos =\n                  visualDocumentation[\n                    category.key as keyof typeof visualDocumentation\n                  ] || [];\n                const hasPhotos = photos.length > 0;\n\n                return (\n                  <View key={category.key} style={styles.photoCategory}>\n                    <TouchableOpacity\n                      style={[\n                        styles.photoButton,\n                        hasPhotos && styles.photoButtonComplete,\n                        category.required &&\n                          !hasPhotos &&\n                          styles.photoButtonRequired,\n                      ]}\n                      onPress={() => handlePhotoCapture(category.key)}\n                    >\n                      <MaterialIcons\n                        name={\n                          hasPhotos ? 'check-circle' : (category.icon as any)\n                        }\n                        size={32}\n                        color={\n                          hasPhotos ? Colors.success : Colors.text.secondary\n                        }\n                      />\n                      <Text\n                        style={[\n                          styles.photoButtonText,\n                          hasPhotos && styles.photoButtonTextComplete,\n                        ]}\n                      >\n                        {category.title}\n                        {category.required && (\n                          <Text style={styles.required}> *</Text>\n                        )}\n                      </Text>\n                      <Text style={styles.photoButtonDescription}>\n                        {category.description}\n                      </Text>\n                      {hasPhotos && (\n                        <Text style={styles.photoCount}>\n                          {photos.length} photo{photos.length !== 1 ? 's' : ''}\n                        </Text>\n                      )}\n                    </TouchableOpacity>\n\n                    {hasPhotos && (\n                      <View style={styles.photoList}>\n                        {photos.map((photo, index) => (\n                          <View key={index} style={styles.photoItem}>\n                            <MaterialIcons\n                              name=\"photo\"\n                              size={16}\n                              color={Colors.text.secondary}\n                            />\n                            <Text style={styles.photoName}>\n                              Photo {index + 1}\n                            </Text>\n                            <TouchableOpacity\n                              onPress={() => removePhoto(category.key, index)}\n                              style={styles.removeButton}\n                            >\n                              <MaterialIcons\n                                name=\"close\"\n                                size={16}\n                                color={Colors.error}\n                              />\n                            </TouchableOpacity>\n                          </View>\n                        ))}\n                      </View>\n                    )}\n                  </View>\n                );\n              })}\n            </View>\n          </Card>\n\n          <Card variant=\"default\" padding=\"lg\" style={styles.formCard}>\n            <View style={styles.tipsSection}>\n              <MaterialIcons\n                name=\"lightbulb\"\n                size={24}\n                color={Colors.secondary}\n              />\n              <View style={styles.tipsContent}>\n                <Text style={styles.tipsTitle}>Photo Tips</Text>\n                <Text style={styles.tipsText}>\n                  • Take photos in good lighting{'\\n'}• Ensure the entire\n                  vehicle is visible{'\\n'}• Capture any existing damage clearly\n                  {'\\n'}• Clean photos help with faster processing{'\\n'}•\n                  Multiple angles are welcome\n                </Text>\n              </View>\n            </View>\n          </Card>\n\n          <View style={styles.bottomSpacing} />\n        </View>\n      </ScrollView>\n\n      {/* Navigation Buttons */}\n      <View style={styles.navigationContainer}>\n        <Button\n          title=\"Back\"\n          variant=\"outline\"\n          onPress={handleBack}\n          style={styles.backButton}\n        />\n        <Button\n          title=\"Next\"\n          variant=\"primary\"\n          onPress={handleNext}\n          disabled={!state.isValid.visual}\n          style={styles.nextButton}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.surface,\n    paddingTop: 60,\n    paddingBottom: Spacing[6],\n    paddingHorizontal: Spacing[6],\n  },\n  title: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[1],\n  },\n  subtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: Colors.neutral.gray[200],\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n    borderRadius: 2,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollContent: {\n    flex: 1,\n    paddingHorizontal: Spacing[6],\n  },\n  formCard: {\n    marginTop: Spacing[6],\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  sectionSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[6],\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  photoGrid: {\n    gap: Spacing[4],\n  },\n  photoCategory: {\n    marginBottom: Spacing[4],\n  },\n  photoButton: {\n    padding: Spacing[4],\n    borderWidth: 2,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    alignItems: 'center',\n    backgroundColor: Colors.surface,\n    borderStyle: 'dashed',\n  },\n  photoButtonComplete: {\n    borderColor: Colors.success,\n    backgroundColor: Colors.brand.primary[50],\n    borderStyle: 'solid',\n  },\n  photoButtonRequired: {\n    borderColor: Colors.error,\n  },\n  photoButtonText: {\n    fontSize: Typography.fontSize.base,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.primary,\n    marginTop: Spacing[2],\n    textAlign: 'center',\n  },\n  photoButtonTextComplete: {\n    color: Colors.success,\n  },\n  photoButtonDescription: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginTop: Spacing[1],\n  },\n  photoCount: {\n    fontSize: Typography.fontSize.xs,\n    color: Colors.success,\n    marginTop: Spacing[1],\n    fontWeight: Typography.fontWeight.medium,\n  },\n  required: {\n    color: Colors.error,\n  },\n  photoList: {\n    marginTop: Spacing[3],\n    paddingLeft: Spacing[4],\n  },\n  photoItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: Spacing[2],\n    backgroundColor: Colors.neutral.gray[50],\n    borderRadius: 6,\n    marginBottom: Spacing[1],\n  },\n  photoName: {\n    flex: 1,\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.primary,\n    marginLeft: Spacing[2],\n  },\n  removeButton: {\n    padding: Spacing[1],\n  },\n  tipsSection: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n  },\n  tipsContent: {\n    flex: 1,\n    marginLeft: Spacing[3],\n  },\n  tipsTitle: {\n    fontSize: Typography.fontSize.base,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  tipsText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    lineHeight: Typography.lineHeight.relaxed * Typography.fontSize.sm,\n  },\n  navigationContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: Spacing[6],\n    paddingVertical: Spacing[4],\n    backgroundColor: Colors.surface,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  backButton: {\n    flex: 1,\n    marginRight: Spacing[3],\n  },\n  nextButton: {\n    flex: 2,\n  },\n  bottomSpacing: {\n    height: Spacing[6],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/debug/TestInputScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ComponentTokens' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { View, Text, TextInput, StyleSheet, Alert } from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport {\n  Colors,\n  Typography,\n  Spacing,\n  BorderRadius,\n  ComponentTokens,\n} from '../../constants/DesignSystem';\nimport { Input } from '../../components/ui/Input';\nimport { Button } from '../../components/ui/Button';\n\nexport const TestInputScreen: React.FC = () => {\n  const [basicValue, setBasicValue] = useState('');\n  const [customValue, setCustomValue] = useState('');\n\n  const handleBasicChange = (text: string) => {\n    console.log('Basic input changed:', text);\n    setBasicValue(text);\n  };\n\n  const handleCustomChange = (text: string) => {\n    console.log('Custom input changed:', text);\n    setCustomValue(text);\n  };\n\n  const showValues = () => {\n    Alert.alert(\n      'Current Values',\n      `Basic: \"${basicValue}\"\\nCustom: \"${customValue}\"`\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.content}>\n        <Text style={styles.title}>Input Test Screen</Text>\n\n        <Text style={styles.subtitle}>Basic React Native TextInput:</Text>\n        <TextInput\n          style={styles.basicInput}\n          placeholder=\"Type here...\"\n          value={basicValue}\n          onChangeText={handleBasicChange}\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n        />\n        <Text style={styles.valueText}>Value: \"{basicValue}\"</Text>\n\n        <Text style={styles.subtitle}>Custom Input Component:</Text>\n        <Input\n          label=\"Custom Input\"\n          placeholder=\"Type here...\"\n          value={customValue}\n          onChangeText={handleCustomChange}\n          leftIcon=\"edit\"\n        />\n        <Text style={styles.valueText}>Value: \"{customValue}\"</Text>\n\n        <Button\n          title=\"Show Values\"\n          onPress={showValues}\n          style={styles.button}\n        />\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    flex: 1,\n    padding: Spacing[6],\n  },\n  title: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[6],\n    textAlign: 'center',\n  },\n  subtitle: {\n    fontSize: Typography.fontSize.base,\n    color: Colors.text.primary,\n    marginTop: Spacing[6],\n    marginBottom: Spacing[4],\n    fontWeight: Typography.fontWeight.semibold,\n  },\n  basicInput: {\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: BorderRadius.md,\n    padding: Spacing[4],\n    backgroundColor: Colors.surface,\n    fontSize: 16,\n    color: Colors.text.primary,\n  },\n  valueText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginTop: Spacing[2],\n    fontStyle: 'italic',\n  },\n  button: {\n    marginTop: Spacing[8],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/driver/AvailableJobsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[893,896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[893,896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5989,5992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5989,5992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":304,"column":11,"nodeType":"ObjectExpression","endLine":316,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":326,"column":12,"nodeType":"ObjectExpression","endLine":338,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  FlatList,\n  TouchableOpacity,\n  RefreshControl,\n  Alert,\n} from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Colors } from '../../constants/Colors';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\nimport { ShipmentService } from '../../services/shipmentService';\n\n// Define the structure of a job object\ninterface AvailableJob {\n  id: string;\n  title: string;\n  pickup_location: string;\n  delivery_location: string;\n  distance: number;\n  estimated_earnings: number;\n  vehicle_type: string;\n  pickup_date: string;\n  status: string;\n  created_at: string;\n  hasApplied?: boolean; // Track if driver has applied\n}\n\nexport default function AvailableJobsScreen({ navigation }: any) {\n  const [availableJobs, setAvailableJobs] = useState<AvailableJob[]>([]);\n  const [refreshing, setRefreshing] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const { userProfile } = useAuth();\n\n  useEffect(() => {\n    fetchAvailableJobs();\n  }, []);\n\n  const fetchAvailableJobs = async () => {\n    setLoading(true);\n    try {\n      // Query available jobs that haven't been assigned yet\n      const { data, error } = await supabase\n        .from('shipments')\n        .select('*')\n        .eq('status', 'pending')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Get driver's applications to check which jobs they've applied for\n      let appliedJobIds: string[] = [];\n      if (userProfile?.id) {\n        const { data: applications, error: appError } = await supabase\n          .from('job_applications')\n          .select('shipment_id, status')\n          .eq('driver_id', userProfile.id);\n\n        if (!appError && applications) {\n          console.log(\n            `DriverScreen: Found ${applications.length} applications for driver ${userProfile.id}:`,\n            applications.map(a => ({\n              shipment_id: a.shipment_id,\n              status: a.status,\n            }))\n          );\n          appliedJobIds = applications.map(app => app.shipment_id);\n        } else if (appError) {\n          console.error('Error fetching driver applications:', appError);\n        }\n      }\n\n      // Transform the data for our UI\n      const formattedJobs = data.map(job => ({\n        id: job.id,\n        title: `Shipment #${job.id.substring(0, 8)}`,\n        pickup_location: job.pickup_address || 'Address not specified',\n        delivery_location: job.delivery_address || 'Address not specified',\n        distance: job.distance || 0,\n        estimated_earnings: job.estimated_price || 0,\n        vehicle_type: job.vehicle_type || 'Standard',\n        pickup_date: job.pickup_date || new Date().toISOString(),\n        status: job.status,\n        created_at: job.created_at,\n        hasApplied: appliedJobIds.includes(job.id), // Check if driver has applied\n      }));\n\n      console.log(\n        `DriverScreen: Showing ${formattedJobs.length} jobs, with ${formattedJobs.filter(j => j.hasApplied).length} marked as applied`\n      );\n\n      setAvailableJobs(formattedJobs);\n    } catch (error) {\n      console.error('Error fetching available jobs:', error);\n      Alert.alert('Error', 'Failed to load available jobs. Please try again.');\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    setRefreshing(true);\n    fetchAvailableJobs();\n  };\n\n  const handleJobPress = (job: AvailableJob) => {\n    navigation.navigate('JobDetails', { jobId: job.id });\n  };\n\n  const applyForJob = async (jobId: string) => {\n    try {\n      // Check if driver is eligible\n      if (!userProfile) {\n        Alert.alert(\n          'Error',\n          'You must complete your profile before applying for jobs.'\n        );\n        return;\n      }\n\n      console.log(\n        `DriverScreen: Driver ${userProfile.id} applying for job ${jobId}`\n      );\n\n      // DIAGNOSTIC: Check if any applications already exist for this job/driver combo\n      const { data: existingApps, error: checkError } = await supabase\n        .from('job_applications')\n        .select('*')\n        .eq('shipment_id', jobId)\n        .eq('driver_id', userProfile.id);\n\n      if (checkError) {\n        console.error('Error checking existing applications:', checkError);\n      } else {\n        console.log(\n          `DriverScreen DIAGNOSTIC: Existing applications for job ${jobId} and driver ${userProfile.id}:`,\n          existingApps?.length ? existingApps : 'None found'\n        );\n      }\n\n      // Use the enhanced ShipmentService method\n      const application = await ShipmentService.applyForShipment(\n        jobId,\n        userProfile.id\n      );\n\n      console.log(\n        `DriverScreen: Successfully applied for job ${jobId}`,\n        application\n      );\n\n      // VERIFICATION: Double check the application was created\n      const { data: verifyApp, error: verifyError } = await supabase\n        .from('job_applications')\n        .select('*')\n        .eq('shipment_id', jobId)\n        .eq('driver_id', userProfile.id);\n\n      if (verifyError) {\n        console.error('Error verifying application was created:', verifyError);\n      } else {\n        console.log(\n          `DriverScreen VERIFICATION: Applications after applying for job ${jobId}:`,\n          verifyApp?.length ? verifyApp : 'None found - POSSIBLE DATA ISSUE'\n        );\n\n        if (!verifyApp?.length) {\n          Alert.alert(\n            'Warning',\n            'Your application may not have been properly recorded. Please try again.'\n          );\n          return;\n        }\n      }\n\n      Alert.alert(\n        'Success',\n        'Application submitted successfully! You will be notified when the client makes a decision.',\n        [{ text: 'OK', onPress: () => fetchAvailableJobs() }] // Refresh the list\n      );\n    } catch (error: any) {\n      console.error('Error applying for job:', error);\n      Alert.alert(\n        'Error',\n        error.message || 'Failed to apply for job. Please try again.'\n      );\n    }\n  };\n\n  const renderJobItem = ({ item }: { item: AvailableJob }) => (\n    <TouchableOpacity\n      style={styles.jobCard}\n      onPress={() => handleJobPress(item)}\n    >\n      <View style={styles.jobHeader}>\n        <Text style={styles.jobTitle}>{item.title}</Text>\n        <View style={styles.earnBadge}>\n          <Text style={styles.earnText}>\n            ${item.estimated_earnings.toFixed(2)}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.locationContainer}>\n        <View style={styles.locationRow}>\n          <MaterialIcons name=\"location-on\" size={16} color={Colors.primary} />\n          <Text style={styles.locationText}>\n            Pickup: {item.pickup_location}\n          </Text>\n        </View>\n        <View style={styles.locationRow}>\n          <MaterialIcons name=\"flag\" size={16} color={Colors.secondary} />\n          <Text style={styles.locationText}>\n            Delivery: {item.delivery_location}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.detailsRow}>\n        <View style={styles.detailItem}>\n          <MaterialIcons\n            name=\"straighten\"\n            size={16}\n            color={Colors.text.secondary}\n          />\n          <Text style={styles.detailText}>{item.distance} miles</Text>\n        </View>\n        <View style={styles.detailItem}>\n          <MaterialIcons\n            name=\"local-shipping\"\n            size={16}\n            color={Colors.text.secondary}\n          />\n          <Text style={styles.detailText}>{item.vehicle_type}</Text>\n        </View>\n        <View style={styles.detailItem}>\n          <MaterialIcons name=\"event\" size={16} color={Colors.text.secondary} />\n          <Text style={styles.detailText}>\n            {new Date(item.pickup_date).toLocaleDateString()}\n          </Text>\n        </View>\n      </View>\n\n      <TouchableOpacity\n        style={[styles.applyButton, item.hasApplied && styles.appliedButton]}\n        onPress={() => applyForJob(item.id)}\n        disabled={item.hasApplied}\n      >\n        <Text\n          style={[\n            styles.applyButtonText,\n            item.hasApplied && styles.appliedButtonText,\n          ]}\n        >\n          {item.hasApplied ? 'Applied' : 'Apply Now'}\n        </Text>\n      </TouchableOpacity>\n    </TouchableOpacity>\n  );\n\n  const renderEmptyList = () => (\n    <View style={styles.emptyContainer}>\n      <MaterialIcons name=\"search\" size={64} color={Colors.text.disabled} />\n      <Text style={styles.emptyTitle}>No Available Jobs</Text>\n      <Text style={styles.emptyMessage}>\n        Check back soon for new delivery opportunities\n      </Text>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Available Jobs</Text>\n      </View>\n\n      <FlatList\n        data={availableJobs}\n        renderItem={renderJobItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.listContainer}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />\n        }\n        ListEmptyComponent={loading ? null : renderEmptyList()}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.secondary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 24,\n    borderBottomLeftRadius: 15,\n    borderBottomRightRadius: 15,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  headerTitle: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: Colors.text.inverse,\n  },\n  listContainer: {\n    padding: 16,\n    paddingBottom: 80,\n  },\n  jobCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 16,\n    padding: 20,\n    marginBottom: 16,\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  jobHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 14,\n  },\n  jobTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text.primary,\n    flex: 1,\n  },\n  earnBadge: {\n    backgroundColor: Colors.secondary + '20', // 20% opacity\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 20,\n  },\n  earnText: {\n    color: Colors.secondary,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  locationContainer: {\n    marginBottom: 16,\n    borderLeftWidth: 2,\n    borderLeftColor: Colors.primary,\n    paddingLeft: 12,\n  },\n  locationRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  locationText: {\n    fontSize: 15,\n    color: Colors.text.primary,\n    marginLeft: 8,\n    flex: 1,\n  },\n  detailsRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 12,\n  },\n  detailItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 5,\n  },\n  detailText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 6,\n    fontWeight: '500',\n  },\n  applyButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 12,\n    paddingVertical: 14,\n    alignItems: 'center',\n    shadowColor: Colors.primaryDark,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n    elevation: 2,\n  },\n  applyButtonText: {\n    color: Colors.text.inverse,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  appliedButton: {\n    backgroundColor: Colors.text.disabled,\n    borderRadius: 12,\n    paddingVertical: 14,\n    alignItems: 'center',\n  },\n  appliedButtonText: {\n    color: Colors.text.secondary,\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  emptyContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginTop: 16,\n  },\n  emptyMessage: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginTop: 8,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/driver/AvailableShipmentsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ShipmentService' is defined but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[961,964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[961,964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2308,2311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2308,2311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":322,"column":17,"nodeType":"ObjectExpression","endLine":334,"endColumn":4}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  FlatList,\n  TouchableOpacity,\n  RefreshControl,\n  Alert,\n} from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Colors } from '../../constants/Colors';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\nimport { ShipmentService } from '../../services/shipmentService';\nimport { getApiUrl } from '../../utils/environment';\n\n// Define the structure of a shipment object\ninterface AvailableShipment {\n  id: string;\n  title: string;\n  pickup_location: string;\n  delivery_location: string;\n  distance: number;\n  estimated_earnings: number;\n  vehicle_type: string;\n  pickup_date: string;\n  status: string;\n  created_at: string;\n  hasApplied?: boolean; // Track if driver has applied\n}\n\nexport default function AvailableShipmentsScreen({ navigation }: any) {\n  const [availableShipments, setAvailableShipments] = useState<\n    AvailableShipment[]\n  >([]);\n  const [refreshing, setRefreshing] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const { userProfile, session } = useAuth();\n\n  useEffect(() => {\n    fetchAvailableShipments();\n  }, []);\n\n  const fetchAvailableShipments = async () => {\n    setLoading(true);\n    try {\n      // Query available shipments that haven't been assigned yet\n      const { data, error } = await supabase\n        .from('shipments')\n        .select('*')\n        .eq('status', 'pending')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Get driver's applications to check which shipments they've applied for\n      let appliedShipmentIds: string[] = [];\n      if (userProfile?.id) {\n        const { data: applications, error: appError } = await supabase\n          .from('job_applications')\n          .select('shipment_id')\n          .eq('driver_id', userProfile.id);\n\n        if (appError) {\n          console.error('Error fetching applications:', appError);\n        } else {\n          appliedShipmentIds = applications.map(app => app.shipment_id);\n        }\n      }\n\n      // Transform data and add application status\n      const transformedShipments: AvailableShipment[] = data.map(\n        (shipment: any) => ({\n          id: shipment.id,\n          title: shipment.title || 'Delivery Service',\n          pickup_location: shipment.pickup_address || 'Unknown pickup',\n          delivery_location: shipment.delivery_address || 'Unknown delivery',\n          distance: shipment.distance || 0,\n          estimated_earnings: shipment.estimated_price || 0,\n          vehicle_type: shipment.vehicle_type || 'Any',\n          pickup_date: shipment.pickup_date || shipment.created_at,\n          status: shipment.status,\n          created_at: shipment.created_at,\n          hasApplied: appliedShipmentIds.includes(shipment.id),\n        })\n      );\n\n      setAvailableShipments(transformedShipments);\n    } catch (error) {\n      console.error('Error fetching available shipments:', error);\n      Alert.alert('Error', 'Failed to load available shipments.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    setRefreshing(true);\n    fetchAvailableShipments().finally(() => setRefreshing(false));\n  };\n\n  const applyForShipment = async (shipmentId: string) => {\n    try {\n      if (!userProfile?.id) {\n        Alert.alert('Error', 'You must be logged in to apply for shipments.');\n        return;\n      }\n\n      // Check if already applied\n      const shipment = availableShipments.find(s => s.id === shipmentId);\n      if (shipment?.hasApplied) {\n        Alert.alert(\n          'Already Applied',\n          'You have already applied for this shipment.'\n        );\n        return;\n      }\n\n      // Use the backend API endpoint to apply for shipment\n      const apiUrl = getApiUrl();\n      const response = await fetch(\n        `${apiUrl}/api/v1/shipments/${shipmentId}/apply`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${session?.access_token}`,\n          },\n          body: JSON.stringify({\n            notes: 'Application submitted via mobile app',\n          }),\n        }\n      );\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        Alert.alert('Success', 'Application submitted successfully!');\n\n        // Update local state to reflect application\n        setAvailableShipments(prev =>\n          prev.map(s => (s.id === shipmentId ? { ...s, hasApplied: true } : s))\n        );\n      } else {\n        throw new Error(\n          result.error?.message || 'Failed to submit application'\n        );\n      }\n    } catch (error) {\n      console.error('Error applying for shipment:', error);\n      Alert.alert('Error', 'Failed to submit application. Please try again.');\n    }\n  };\n\n  const viewShipmentDetails = (shipmentId: string) => {\n    navigation.navigate('ShipmentDetails_Driver', { shipmentId });\n  };\n\n  const renderShipmentItem = ({ item }: { item: AvailableShipment }) => (\n    <TouchableOpacity\n      style={styles.shipmentCard}\n      onPress={() => viewShipmentDetails(item.id)}\n    >\n      <View style={styles.shipmentHeader}>\n        <Text style={styles.shipmentTitle}>{item.title}</Text>\n        <Text style={styles.earningsText}>${item.estimated_earnings}</Text>\n      </View>\n\n      <View style={styles.locationContainer}>\n        <View style={styles.locationRow}>\n          <MaterialIcons\n            name=\"location-on\"\n            size={16}\n            color={Colors.secondary}\n          />\n          <Text style={styles.locationText} numberOfLines={1}>\n            From: {item.pickup_location}\n          </Text>\n        </View>\n        <View style={styles.locationRow}>\n          <MaterialIcons name=\"flag\" size={16} color={Colors.primary} />\n          <Text style={styles.locationText} numberOfLines={1}>\n            To: {item.delivery_location}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.detailsContainer}>\n        <Text style={styles.detailText}>\n          <MaterialIcons\n            name=\"directions-car\"\n            size={14}\n            color={Colors.text.secondary}\n          />{' '}\n          {item.vehicle_type}\n        </Text>\n        <Text style={styles.detailText}>\n          <MaterialIcons\n            name=\"schedule\"\n            size={14}\n            color={Colors.text.secondary}\n          />{' '}\n          {new Date(item.pickup_date).toLocaleDateString()}\n        </Text>\n        {item.distance > 0 && (\n          <Text style={styles.detailText}>\n            <MaterialIcons\n              name=\"straighten\"\n              size={14}\n              color={Colors.text.secondary}\n            />{' '}\n            {item.distance.toFixed(1)} mi\n          </Text>\n        )}\n      </View>\n\n      <View style={styles.actionContainer}>\n        {item.hasApplied ? (\n          <View style={styles.appliedBadge}>\n            <MaterialIcons\n              name=\"check-circle\"\n              size={16}\n              color={Colors.success}\n            />\n            <Text style={styles.appliedText}>Applied</Text>\n          </View>\n        ) : (\n          <TouchableOpacity\n            style={styles.applyButton}\n            onPress={() => applyForShipment(item.id)}\n          >\n            <MaterialIcons name=\"send\" size={16} color={Colors.background} />\n            <Text style={styles.applyButtonText}>Apply for Job</Text>\n          </TouchableOpacity>\n        )}\n\n        <TouchableOpacity\n          style={styles.detailsButton}\n          onPress={() => viewShipmentDetails(item.id)}\n        >\n          <Text style={styles.detailsButtonText}>View Details</Text>\n          <MaterialIcons\n            name=\"arrow-forward\"\n            size={16}\n            color={Colors.primary}\n          />\n        </TouchableOpacity>\n      </View>\n    </TouchableOpacity>\n  );\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Available Shipments</Text>\n        <Text style={styles.headerSubtitle}>\n          {availableShipments.length} shipments available\n        </Text>\n      </View>\n\n      <FlatList\n        data={availableShipments}\n        renderItem={renderShipmentItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.listContainer}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={handleRefresh}\n            colors={[Colors.primary]}\n            tintColor={Colors.primary}\n          />\n        }\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={\n          <View style={styles.emptyContainer}>\n            <MaterialIcons\n              name=\"search-off\"\n              size={64}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.emptyTitle}>No Shipments Available</Text>\n            <Text style={styles.emptyText}>\n              Check back later for new delivery opportunities.\n            </Text>\n          </View>\n        }\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    backgroundColor: Colors.background,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text.primary,\n    marginBottom: 4,\n  },\n  headerSubtitle: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n  },\n  listContainer: {\n    padding: 16,\n  },\n  shipmentCard: {\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  shipmentHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  shipmentTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    flex: 1,\n  },\n  earningsText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.success,\n  },\n  locationContainer: {\n    marginBottom: 12,\n  },\n  locationRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 4,\n  },\n  locationText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 8,\n    flex: 1,\n  },\n  detailsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  detailText: {\n    fontSize: 12,\n    color: Colors.text.secondary,\n    flex: 1,\n  },\n  actionContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  applyButton: {\n    backgroundColor: Colors.secondary,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n  },\n  applyButtonText: {\n    color: Colors.background,\n    fontWeight: '600',\n    marginLeft: 4,\n  },\n  appliedBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    backgroundColor: Colors.success + '20',\n    borderRadius: 16,\n  },\n  appliedText: {\n    color: Colors.success,\n    fontWeight: '600',\n    marginLeft: 4,\n    fontSize: 12,\n  },\n  detailsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  detailsButtonText: {\n    color: Colors.primary,\n    fontWeight: '600',\n    marginRight: 4,\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: 100,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    paddingHorizontal: 32,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/driver/DriverDashboardScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[532,535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[532,535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[757,760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[757,760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":27,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4310,4313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4310,4313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":574,"column":12,"nodeType":"ObjectExpression","endLine":587,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":607,"column":17,"nodeType":"ObjectExpression","endLine":611,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":635,"column":19,"nodeType":"ObjectExpression","endLine":639,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#E8F5E8' }","line":643,"column":17,"nodeType":"ObjectExpression","endLine":652,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: '#FFFFFF' }","line":672,"column":20,"nodeType":"ObjectExpression","endLine":676,"endColumn":4}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Colors } from '../../constants/Colors';\nimport { useAuth } from '../../context/AuthContext';\nimport { supabase } from '../../lib/supabase';\nimport { ShipmentService } from '../../services/shipmentService';\n\nexport default function DriverDashboardScreen({ navigation }: any) {\n  const { userProfile } = useAuth();\n  const [stats, setStats] = useState({\n    activeJobs: 0,\n    pendingJobs: 0,\n    completedJobs: 0,\n    totalEarnings: 0,\n  });\n  const [availableJobs, setAvailableJobs] = useState<any[]>([]);\n  const [isAvailable, setIsAvailable] = useState(true);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n\n  const fetchDashboardData = async () => {\n    if (!userProfile) return;\n\n    try {\n      setLoading(true);\n\n      // Fetch driver stats\n      const [activeJobsResult, completedJobsResult] = await Promise.all([\n        // Active jobs count\n        supabase\n          .from('shipments')\n          .select('*', { count: 'exact', head: true })\n          .eq('driver_id', userProfile.id)\n          .in('status', ['accepted', 'in_transit']),\n\n        // Completed jobs count and earnings\n        supabase\n          .from('shipments')\n          .select('estimated_price')\n          .eq('driver_id', userProfile.id)\n          .eq('status', 'delivered'),\n      ]);\n\n      // Get available jobs using ShipmentService\n      const availableJobsData = await ShipmentService.getAvailableShipments(\n        userProfile.id\n      );\n\n      // Get all applications for this driver for tracking purposes\n      const { data: applications, error: appsError } = await supabase\n        .from('job_applications')\n        .select('shipment_id, status')\n        .eq('driver_id', userProfile.id);\n\n      if (appsError) {\n        console.error('Error fetching driver applications:', appsError);\n      } else {\n        console.log(\n          `DriverScreen: Found ${applications?.length || 0} applications for driver ${userProfile.id}:`,\n          applications\n        );\n\n        // Update the pendingJobs count in stats\n        setStats({\n          activeJobs: activeJobsResult.count || 0,\n          pendingJobs:\n            applications?.filter(app => app.status === 'pending').length || 0,\n          completedJobs: completedJobsResult.data?.length || 0,\n          totalEarnings:\n            completedJobsResult.data?.reduce(\n              (sum, job) => sum + (job.estimated_price || 0),\n              0\n            ) || 0,\n        });\n      }\n\n      // availableJobsData already excludes jobs the driver has applied for\n      console.log(\n        `DriverScreen: Showing ${availableJobsData.length} jobs, with ${0} marked as applied`\n      );\n      setAvailableJobs(availableJobsData);\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleStartShift = async () => {\n    try {\n      setIsAvailable(!isAvailable);\n      // Update driver settings in the database\n      await supabase.from('driver_settings').upsert({\n        driver_id: userProfile?.id,\n        available_for_jobs: !isAvailable,\n        updated_at: new Date().toISOString(),\n      });\n\n      Alert.alert(\n        'Shift Status Updated',\n        isAvailable\n          ? 'You are now offline and will not receive new job requests.'\n          : 'You are now online and available for jobs!'\n      );\n    } catch (error) {\n      console.error('Error updating shift status:', error);\n      Alert.alert('Error', 'Failed to update shift status. Please try again.');\n    }\n  };\n\n  const handleQuickApply = async (jobId: string) => {\n    if (!userProfile?.id) {\n      Alert.alert('Error', 'User not authenticated');\n      return;\n    }\n\n    try {\n      await ShipmentService.applyForShipment(jobId, userProfile.id);\n      Alert.alert(\n        'Success',\n        'Application submitted successfully! You will be notified when the client makes a decision.'\n      );\n      fetchDashboardData(); // Refresh data to show updated job lists\n    } catch (error: any) {\n      console.error('Error applying to job:', error);\n      Alert.alert(\n        'Error',\n        error.message || 'Failed to apply to job. Please try again.'\n      );\n    }\n  };\n\n  const getDriverInitial = () => {\n    if (userProfile?.first_name) {\n      return userProfile.first_name.charAt(0).toUpperCase();\n    }\n    return 'D';\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <View style={styles.headerContent}>\n          <View style={styles.avatar}>\n            <Text style={styles.avatarText}>{getDriverInitial()}</Text>\n          </View>\n          <View style={styles.headerInfo}>\n            <Text style={styles.greeting}>Welcome back,</Text>\n            <Text style={styles.driverName}>\n              {userProfile?.first_name || 'Driver'}\n            </Text>\n          </View>\n        </View>\n        <TouchableOpacity style={styles.notificationButton}>\n          <MaterialIcons\n            name=\"notifications\"\n            size={24}\n            color={Colors.text.inverse}\n          />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Status Card */}\n        <View style={styles.statusCard}>\n          <View style={styles.statusHeader}>\n            <MaterialIcons\n              name={isAvailable ? 'local-shipping' : 'do-not-disturb'}\n              size={24}\n              color={isAvailable ? Colors.success : Colors.text.disabled}\n            />\n            <Text style={styles.statusTitle}>\n              {isAvailable ? 'Available for Deliveries' : 'Offline'}\n            </Text>\n          </View>\n          <Text style={styles.statusSubtitle}>\n            {isAvailable\n              ? 'Ready to accept new shipments'\n              : 'Not receiving new job requests'}\n          </Text>\n          <TouchableOpacity\n            style={[\n              styles.shiftButton,\n              !isAvailable && styles.shiftButtonOffline,\n            ]}\n            onPress={handleStartShift}\n          >\n            <MaterialIcons\n              name={isAvailable ? 'pause' : 'play-arrow'}\n              size={20}\n              color={Colors.text.inverse}\n            />\n            <Text style={styles.shiftButtonText}>\n              {isAvailable ? 'End Shift' : 'Start Shift'}\n            </Text>\n          </TouchableOpacity>\n        </View>\n\n        {/* Quick Stats */}\n        <View style={styles.statsContainer}>\n          <View style={styles.statCard}>\n            <MaterialIcons name=\"assignment\" size={32} color={Colors.primary} />\n            <Text style={styles.statNumber}>{stats.activeJobs}</Text>\n            <Text style={styles.statLabel}>Active Jobs</Text>\n          </View>\n          <View style={styles.statCard}>\n            <MaterialIcons name=\"schedule\" size={32} color={Colors.warning} />\n            <Text style={styles.statNumber}>{availableJobs.length}</Text>\n            <Text style={styles.statLabel}>Available</Text>\n          </View>\n          <View style={styles.statCard}>\n            <MaterialIcons\n              name=\"check-circle\"\n              size={32}\n              color={Colors.success}\n            />\n            <Text style={styles.statNumber}>{stats.completedJobs}</Text>\n            <Text style={styles.statLabel}>Completed</Text>\n          </View>\n        </View>\n\n        {/* Available Shipments */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Available Jobs</Text>\n            <TouchableOpacity\n              onPress={() => navigation.navigate('AvailableShipments')}\n            >\n              <Text style={styles.viewAllText}>View All</Text>\n            </TouchableOpacity>\n          </View>\n\n          {availableJobs.length > 0 ? (\n            availableJobs.slice(0, 3).map(job => (\n              <View key={job.id} style={styles.jobCard}>\n                <View style={styles.jobHeader}>\n                  <Text style={styles.jobTitle}>\n                    {job.title || `Shipment #${job.id.substring(0, 8)}`}\n                  </Text>\n                  <View style={styles.earningsBadge}>\n                    <Text style={styles.earningsText}>\n                      ${job.estimated_price || 0}\n                    </Text>\n                  </View>\n                </View>\n\n                {job.hasApplied && (\n                  <View style={styles.appliedBadge}>\n                    <MaterialIcons\n                      name=\"check-circle\"\n                      size={16}\n                      color={Colors.success}\n                    />\n                    <Text style={styles.appliedText}>Applied</Text>\n                  </View>\n                )}\n\n                <View style={styles.jobDetails}>\n                  <View style={styles.jobDetailRow}>\n                    <MaterialIcons\n                      name=\"location-on\"\n                      size={16}\n                      color={Colors.primary}\n                    />\n                    <Text style={styles.jobDetailText} numberOfLines={1}>\n                      {job.pickup_address}\n                    </Text>\n                  </View>\n                  <View style={styles.jobDetailRow}>\n                    <MaterialIcons\n                      name=\"flag\"\n                      size={16}\n                      color={Colors.secondary}\n                    />\n                    <Text style={styles.jobDetailText} numberOfLines={1}>\n                      {job.delivery_address}\n                    </Text>\n                  </View>\n                  {job.description && (\n                    <View style={styles.jobDetailRow}>\n                      <MaterialIcons\n                        name=\"info\"\n                        size={16}\n                        color={Colors.text.secondary}\n                      />\n                      <Text style={styles.jobDetailText} numberOfLines={2}>\n                        {job.description}\n                      </Text>\n                    </View>\n                  )}\n                </View>\n\n                <TouchableOpacity\n                  style={[\n                    styles.quickApplyButton,\n                    job.hasApplied && styles.quickApplyButtonDisabled,\n                  ]}\n                  onPress={() => handleQuickApply(job.id)}\n                  disabled={job.hasApplied}\n                >\n                  <Text\n                    style={[\n                      styles.quickApplyText,\n                      job.hasApplied && styles.quickApplyTextDisabled,\n                    ]}\n                  >\n                    {job.hasApplied ? 'Applied' : 'Accept Job'}\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            ))\n          ) : (\n            <View style={styles.emptyState}>\n              <MaterialIcons\n                name=\"inbox\"\n                size={48}\n                color={Colors.text.disabled}\n              />\n              <Text style={styles.emptyTitle}>No jobs available</Text>\n              <Text style={styles.emptySubtitle}>\n                New delivery requests will appear here\n              </Text>\n            </View>\n          )}\n        </View>\n\n        {/* Quick Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n\n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={() => navigation.navigate('MyShipments')}\n          >\n            <MaterialIcons name=\"route\" size={20} color={Colors.primary} />\n            <Text style={styles.actionText}>View My Jobs</Text>\n            <MaterialIcons\n              name=\"chevron-right\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={() => navigation.navigate('Messages')}\n          >\n            <MaterialIcons name=\"chat\" size={20} color={Colors.primary} />\n            <Text style={styles.actionText}>Messages</Text>\n            <MaterialIcons\n              name=\"chevron-right\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={() => navigation.navigate('Profile')}\n          >\n            <MaterialIcons\n              name=\"account-balance-wallet\"\n              size={20}\n              color={Colors.primary}\n            />\n            <Text style={styles.actionText}>View Payouts</Text>\n            <MaterialIcons\n              name=\"chevron-right\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={() => navigation.navigate('AvailableShipments')}\n          >\n            <MaterialIcons name=\"search\" size={20} color={Colors.primary} />\n            <Text style={styles.actionText}>Browse Jobs</Text>\n            <MaterialIcons\n              name=\"chevron-right\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={() => navigation.navigate('Profile')}\n          >\n            <MaterialIcons name=\"settings\" size={20} color={Colors.primary} />\n            <Text style={styles.actionText}>Driver Settings</Text>\n            <MaterialIcons\n              name=\"chevron-right\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.secondary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 24,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  headerContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  avatar: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    backgroundColor: Colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  avatarText: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: Colors.text.inverse,\n  },\n  headerInfo: {\n    flex: 1,\n  },\n  greeting: {\n    fontSize: 14,\n    color: Colors.text.inverse,\n    opacity: 0.8,\n  },\n  driverName: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: Colors.text.inverse,\n  },\n  notificationButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 24,\n  },\n  statusCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 20,\n    marginTop: 20,\n    borderLeftWidth: 4,\n    borderLeftColor: Colors.success,\n  },\n  statusHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  statusTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginLeft: 12,\n  },\n  statusSubtitle: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 36,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 20,\n  },\n  statCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    flex: 1,\n    marginHorizontal: 4,\n  },\n  statNumber: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text.primary,\n    marginTop: 8,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.text.secondary,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  section: {\n    marginTop: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 16,\n  },\n  emptyState: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 40,\n    alignItems: 'center',\n  },\n  emptyTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginTop: 16,\n  },\n  emptySubtitle: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginTop: 8,\n  },\n  actionButton: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  actionText: {\n    fontSize: 16,\n    color: Colors.text.primary,\n    marginLeft: 12,\n    flex: 1,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  viewAllText: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '600',\n  },\n  jobCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  jobHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  jobTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    flex: 1,\n    marginRight: 8,\n  },\n  earningsBadge: {\n    backgroundColor: Colors.success,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  earningsText: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n  },\n  jobDetails: {\n    marginBottom: 12,\n  },\n  jobDetailRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 4,\n  },\n  jobDetailText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 8,\n  },\n  quickApplyButton: {\n    backgroundColor: Colors.primary,\n    paddingVertical: 10,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  quickApplyButtonDisabled: {\n    backgroundColor: Colors.text.disabled,\n  },\n  quickApplyText: {\n    color: '#FFFFFF',\n    fontWeight: '600',\n    fontSize: 14,\n  },\n  quickApplyTextDisabled: {\n    color: Colors.surface,\n  },\n  appliedBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#E8F5E8',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n    marginBottom: 8,\n    alignSelf: 'flex-start',\n  },\n  appliedText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.success,\n    marginLeft: 4,\n  },\n  shiftButton: {\n    backgroundColor: Colors.success,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  shiftButtonOffline: {\n    backgroundColor: Colors.surface,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  shiftButtonText: {\n    color: '#FFFFFF',\n    fontWeight: '600',\n    marginLeft: 4,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/driver/DriverProfileScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RootStackParamList' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[908,911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[908,911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'refreshProfile' is assigned a value but never used.","line":38,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'count' is assigned a value but never used.","line":126,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":20},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginTop: 12 }","line":584,"column":45,"nodeType":"ObjectExpression","endLine":584,"endColumn":62},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { height: 40 }","line":602,"column":22,"nodeType":"ObjectExpression","endLine":602,"endColumn":36},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":613,"column":11,"nodeType":"ObjectExpression","endLine":625,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":635,"column":16,"nodeType":"ObjectExpression","endLine":648,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":731,"column":21,"nodeType":"ObjectExpression","endLine":741,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":772,"column":17,"nodeType":"ObjectExpression","endLine":782,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":808,"column":17,"nodeType":"ObjectExpression","endLine":817,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":862,"column":16,"nodeType":"ObjectExpression","endLine":870,"endColumn":4}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n  ActivityIndicator,\n  Image,\n  TextInput,\n  Switch,\n} from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Colors } from '../../constants/Colors';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\nimport { RootStackParamList } from '../../navigation/types';\n\ninterface DriverStats {\n  completedJobs: number;\n  activeJobs: number;\n  totalEarnings: number;\n  averageRating: number;\n  onTimeRate: number;\n}\n\ninterface DriverSettings {\n  availableForJobs: boolean;\n  notificationsEnabled: boolean;\n  preferredRadius: number;\n  allowLocationTracking: boolean;\n  preferredJobTypes: string[];\n}\n\nexport default function DriverProfileScreen({ navigation }: any) {\n  const { userProfile, refreshProfile } = useAuth();\n  const [stats, setStats] = useState<DriverStats>({\n    completedJobs: 0,\n    activeJobs: 0,\n    totalEarnings: 0,\n    averageRating: 0,\n    onTimeRate: 0,\n  });\n  const [settings, setSettings] = useState<DriverSettings>({\n    availableForJobs: true,\n    notificationsEnabled: true,\n    preferredRadius: 50,\n    allowLocationTracking: true,\n    preferredJobTypes: ['standard', 'express'],\n  });\n  const [loading, setLoading] = useState(true);\n  const [savingSettings, setSavingSettings] = useState(false);\n\n  useEffect(() => {\n    if (userProfile) {\n      fetchDriverData();\n      fetchDriverSettings();\n    }\n  }, [userProfile]);\n\n  const fetchDriverData = async () => {\n    try {\n      setLoading(true);\n\n      // Fetch completed jobs count\n      const { count: completedJobs } = await supabase\n        .from('shipments')\n        .select('*', { count: 'exact', head: true })\n        .eq('driver_id', userProfile?.id)\n        .eq('status', 'delivered');\n\n      // Fetch active jobs count\n      const { count: activeJobs } = await supabase\n        .from('shipments')\n        .select('*', { count: 'exact', head: true })\n        .eq('driver_id', userProfile?.id)\n        .in('status', ['accepted', 'picked_up', 'in_transit']);\n\n      // Fetch total earnings\n      const { data: earnings } = await supabase\n        .from('shipments')\n        .select('price')\n        .eq('driver_id', userProfile?.id)\n        .eq('status', 'delivered');\n\n      const totalEarnings =\n        earnings?.reduce((sum, job) => sum + (job.price || 0), 0) || 0;\n\n      // Fetch ratings\n      const { data: ratings } = await supabase\n        .from('driver_ratings')\n        .select('rating')\n        .eq('driver_id', userProfile?.id);\n\n      const averageRating =\n        ratings && ratings.length > 0\n          ? ratings.reduce((sum, item) => sum + item.rating, 0) / ratings.length\n          : 0;\n\n      // Calculate on-time rate (simplified for now)\n      const onTimeRate = 100; // This would be calculated based on delivery times vs. promised times\n\n      setStats({\n        completedJobs: completedJobs || 0,\n        activeJobs: activeJobs || 0,\n        totalEarnings,\n        averageRating,\n        onTimeRate,\n      });\n    } catch (error) {\n      console.error('Error fetching driver data:', error);\n      Alert.alert(\n        'Error',\n        'Failed to load your profile data. Please try again.'\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchDriverSettings = async () => {\n    try {\n      // Check if driver_settings table exists by attempting to count records\n      const { count, error: countError } = await supabase\n        .from('driver_settings')\n        .select('*', { count: 'exact', head: true });\n\n      // If the table doesn't exist, we'll get a specific error\n      if (countError && countError.code === '42P01') {\n        console.log(\n          'Driver settings table does not exist yet, using default settings'\n        );\n        // We'll continue with the default settings\n        return;\n      }\n\n      // Fetch driver settings from driver_settings table\n      const { data, error } = await supabase\n        .from('driver_settings')\n        .select('*')\n        .eq('driver_id', userProfile?.id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        throw error;\n      }\n\n      if (data) {\n        setSettings({\n          availableForJobs: data.available_for_jobs,\n          notificationsEnabled: data.notifications_enabled,\n          preferredRadius: data.preferred_radius || 50,\n          allowLocationTracking: data.allow_location_tracking,\n          preferredJobTypes: data.preferred_job_types || [\n            'standard',\n            'express',\n          ],\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching driver settings:', error);\n      // Continue with default settings if there's an error\n    }\n  };\n\n  const saveDriverSettings = async () => {\n    if (!userProfile) return;\n\n    try {\n      setSavingSettings(true);\n\n      // Check if settings exist first\n      const { data: existingSettings, error: checkError } = await supabase\n        .from('driver_settings')\n        .select('id')\n        .eq('driver_id', userProfile.id)\n        .maybeSingle();\n\n      if (checkError && checkError.code !== 'PGRST116') {\n        throw checkError;\n      }\n\n      let result;\n\n      if (existingSettings) {\n        // Update existing settings\n        result = await supabase\n          .from('driver_settings')\n          .update({\n            available_for_jobs: settings.availableForJobs,\n            notifications_enabled: settings.notificationsEnabled,\n            preferred_radius: settings.preferredRadius,\n            allow_location_tracking: settings.allowLocationTracking,\n            preferred_job_types: settings.preferredJobTypes,\n            updated_at: new Date().toISOString(),\n          })\n          .eq('driver_id', userProfile.id);\n      } else {\n        // Insert new settings\n        result = await supabase.from('driver_settings').insert({\n          driver_id: userProfile.id,\n          available_for_jobs: settings.availableForJobs,\n          notifications_enabled: settings.notificationsEnabled,\n          preferred_radius: settings.preferredRadius,\n          allow_location_tracking: settings.allowLocationTracking,\n          preferred_job_types: settings.preferredJobTypes,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        });\n      }\n\n      const { error } = result;\n\n      if (error) {\n        // If the table doesn't exist, show a specific message\n        if (error.code === '42P01') {\n          Alert.alert(\n            'Settings Not Available',\n            'Driver settings are not yet available. Please contact support.',\n            [{ text: 'OK' }]\n          );\n        } else {\n          throw error;\n        }\n        return;\n      }\n\n      Alert.alert('Success', 'Your settings have been saved.');\n    } catch (error) {\n      console.error('Error saving driver settings:', error);\n      Alert.alert('Error', 'Failed to save your settings. Please try again.');\n    } finally {\n      setSavingSettings(false);\n    }\n  };\n\n  const handleSignOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error signing out:', error);\n      Alert.alert('Error', 'Failed to sign out. Please try again.');\n    }\n  };\n\n  const handleToggleAvailability = (value: boolean) => {\n    setSettings(prev => ({ ...prev, availableForJobs: value }));\n    // Save immediately when toggling availability\n    setTimeout(() => {\n      saveDriverSettings();\n    }, 100);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return amount.toLocaleString('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n    });\n  };\n\n  if (loading && !userProfile) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading profile...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Driver Profile</Text>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Profile Card */}\n        <View style={styles.profileCard}>\n          <View style={styles.avatarContainer}>\n            {userProfile?.avatar_url ? (\n              <Image\n                source={{ uri: userProfile.avatar_url }}\n                style={styles.avatar}\n              />\n            ) : (\n              <View style={styles.avatarPlaceholder}>\n                <Text style={styles.avatarText}>\n                  {userProfile?.first_name?.charAt(0)?.toUpperCase() || 'D'}\n                </Text>\n              </View>\n            )}\n            <TouchableOpacity style={styles.editAvatarButton}>\n              <MaterialIcons\n                name=\"edit\"\n                size={16}\n                color={Colors.text.inverse}\n              />\n            </TouchableOpacity>\n          </View>\n\n          <Text style={styles.profileName}>\n            {userProfile?.first_name} {userProfile?.last_name}\n          </Text>\n\n          <View style={styles.profileBadge}>\n            <MaterialIcons name=\"verified\" size={16} color={Colors.secondary} />\n            <Text style={styles.profileBadgeText}>Verified Driver</Text>\n          </View>\n\n          <View style={styles.profileStats}>\n            <View style={styles.statItem}>\n              <Text style={styles.statValue}>{stats.completedJobs}</Text>\n              <Text style={styles.statLabel}>Completed</Text>\n            </View>\n            <View style={styles.statDivider} />\n            <View style={styles.statItem}>\n              <Text style={styles.statValue}>\n                {stats.averageRating.toFixed(1)}\n              </Text>\n              <Text style={styles.statLabel}>Rating</Text>\n            </View>\n            <View style={styles.statDivider} />\n            <View style={styles.statItem}>\n              <Text style={styles.statValue}>{stats.onTimeRate}%</Text>\n              <Text style={styles.statLabel}>On-time</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Availability Toggle */}\n        <View style={styles.availabilityCard}>\n          <View style={styles.availabilityHeader}>\n            <MaterialIcons\n              name={\n                settings.availableForJobs ? 'check-circle' : 'do-not-disturb'\n              }\n              size={24}\n              color={\n                settings.availableForJobs\n                  ? Colors.success\n                  : Colors.text.disabled\n              }\n            />\n            <Text style={styles.availabilityTitle}>\n              {settings.availableForJobs\n                ? 'Available for Jobs'\n                : 'Not Available'}\n            </Text>\n          </View>\n          <Text style={styles.availabilityDescription}>\n            {settings.availableForJobs\n              ? \"You're currently visible to clients and can receive new job requests.\"\n              : \"You're currently not receiving any new job requests.\"}\n          </Text>\n          <Switch\n            value={settings.availableForJobs}\n            onValueChange={handleToggleAvailability}\n            trackColor={{\n              false: Colors.text.disabled,\n              true: Colors.success + '80',\n            }}\n            thumbColor={\n              settings.availableForJobs ? Colors.success : Colors.text.secondary\n            }\n            ios_backgroundColor={Colors.text.disabled}\n            style={styles.availabilitySwitch}\n          />\n        </View>\n\n        {/* Earnings Summary */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Earnings Summary</Text>\n          <View style={styles.earningsCard}>\n            <Text style={styles.earningsTotal}>\n              {formatCurrency(stats.totalEarnings)}\n            </Text>\n            <Text style={styles.earningsLabel}>Total Earnings</Text>\n            <TouchableOpacity style={styles.earningsButton}>\n              <MaterialIcons\n                name=\"account-balance-wallet\"\n                size={16}\n                color={Colors.primary}\n              />\n              <Text style={styles.earningsButtonText}>\n                View Earnings History\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Settings */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Driver Settings</Text>\n\n          <View style={styles.settingsCard}>\n            <View style={styles.settingItem}>\n              <View style={styles.settingLabelContainer}>\n                <MaterialIcons\n                  name=\"notifications\"\n                  size={20}\n                  color={Colors.primary}\n                />\n                <Text style={styles.settingLabel}>Push Notifications</Text>\n              </View>\n              <Switch\n                value={settings.notificationsEnabled}\n                onValueChange={value =>\n                  setSettings(prev => ({\n                    ...prev,\n                    notificationsEnabled: value,\n                  }))\n                }\n                trackColor={{\n                  false: Colors.text.disabled,\n                  true: Colors.primary + '80',\n                }}\n                thumbColor={\n                  settings.notificationsEnabled\n                    ? Colors.primary\n                    : Colors.text.secondary\n                }\n                ios_backgroundColor={Colors.text.disabled}\n              />\n            </View>\n\n            <View style={styles.settingItem}>\n              <View style={styles.settingLabelContainer}>\n                <MaterialIcons name=\"place\" size={20} color={Colors.primary} />\n                <Text style={styles.settingLabel}>Allow Location Tracking</Text>\n              </View>\n              <Switch\n                value={settings.allowLocationTracking}\n                onValueChange={value =>\n                  setSettings(prev => ({\n                    ...prev,\n                    allowLocationTracking: value,\n                  }))\n                }\n                trackColor={{\n                  false: Colors.text.disabled,\n                  true: Colors.primary + '80',\n                }}\n                thumbColor={\n                  settings.allowLocationTracking\n                    ? Colors.primary\n                    : Colors.text.secondary\n                }\n                ios_backgroundColor={Colors.text.disabled}\n              />\n            </View>\n\n            <View style={styles.settingItem}>\n              <View style={styles.settingLabelContainer}>\n                <MaterialIcons\n                  name=\"explore\"\n                  size={20}\n                  color={Colors.primary}\n                />\n                <Text style={styles.settingLabel}>Preferred Job Radius</Text>\n              </View>\n              <View style={styles.radiusInputContainer}>\n                <TextInput\n                  style={styles.radiusInput}\n                  value={settings.preferredRadius.toString()}\n                  onChangeText={value => {\n                    const num = parseInt(value);\n                    if (!isNaN(num) && num > 0) {\n                      setSettings(prev => ({ ...prev, preferredRadius: num }));\n                    } else if (value === '') {\n                      setSettings(prev => ({ ...prev, preferredRadius: 0 }));\n                    }\n                  }}\n                  keyboardType=\"number-pad\"\n                />\n                <Text style={styles.radiusUnit}>miles</Text>\n              </View>\n            </View>\n\n            <TouchableOpacity\n              style={styles.saveButton}\n              onPress={saveDriverSettings}\n              disabled={savingSettings}\n            >\n              {savingSettings ? (\n                <ActivityIndicator size=\"small\" color={Colors.text.inverse} />\n              ) : (\n                <Text style={styles.saveButtonText}>Save Settings</Text>\n              )}\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Account Options */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Account</Text>\n\n          <View style={styles.optionsCard}>\n            <TouchableOpacity style={styles.optionItem}>\n              <MaterialIcons name=\"person\" size={20} color={Colors.primary} />\n              <Text style={styles.optionText}>Edit Profile</Text>\n              <MaterialIcons\n                name=\"chevron-right\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.optionItem}>\n              <MaterialIcons name=\"security\" size={20} color={Colors.primary} />\n              <Text style={styles.optionText}>Security & Privacy</Text>\n              <MaterialIcons\n                name=\"chevron-right\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.optionItem}>\n              <MaterialIcons name=\"help\" size={20} color={Colors.primary} />\n              <Text style={styles.optionText}>Help & Support</Text>\n              <MaterialIcons\n                name=\"chevron-right\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.optionItem}\n              onPress={() => navigation.navigate('NetworkDiagnostic')}\n            >\n              <MaterialIcons\n                name=\"wifi-tethering\"\n                size={20}\n                color={Colors.primary}\n              />\n              <Text style={styles.optionText}>Network Diagnostics</Text>\n              <MaterialIcons\n                name=\"chevron-right\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.optionItem} onPress={handleSignOut}>\n              <MaterialIcons name=\"logout\" size={20} color={Colors.error} />\n              <Text style={[styles.optionText, { color: Colors.error }]}>\n                Sign Out\n              </Text>\n              <MaterialIcons\n                name=\"chevron-right\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Admin Assignment Option - Only shown to admin users */}\n        {userProfile?.role === 'admin' && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Admin Functions</Text>\n            <View style={styles.settingsCard}>\n              <TouchableOpacity\n                style={styles.adminButton}\n                onPress={() => navigation.navigate('AdminDashboard')}\n              >\n                <MaterialIcons\n                  name=\"dashboard\"\n                  size={20}\n                  color={Colors.primary}\n                />\n                <Text style={styles.adminButtonText}>Admin Dashboard</Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity\n                style={[styles.adminButton, { marginTop: 12 }]}\n                onPress={() => navigation.navigate('AdminAssignment')}\n              >\n                <MaterialIcons\n                  name=\"assignment\"\n                  size={20}\n                  color={Colors.primary}\n                />\n                <Text style={styles.adminButtonText}>Driver Assignment</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        )}\n\n        {/* Version */}\n        <Text style={styles.versionText}>DriveDrop v1.0.0</Text>\n\n        {/* Bottom padding for scroll */}\n        <View style={{ height: 40 }} />\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.secondary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 24,\n    borderBottomLeftRadius: 15,\n    borderBottomRightRadius: 15,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  headerTitle: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: Colors.text.inverse,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  profileCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 16,\n    padding: 24,\n    alignItems: 'center',\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    marginBottom: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  avatarContainer: {\n    position: 'relative',\n    marginBottom: 16,\n  },\n  avatar: {\n    width: 100,\n    height: 100,\n    borderRadius: 50,\n  },\n  avatarPlaceholder: {\n    width: 100,\n    height: 100,\n    borderRadius: 50,\n    backgroundColor: Colors.secondary,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  avatarText: {\n    fontSize: 40,\n    fontWeight: '700',\n    color: Colors.text.inverse,\n  },\n  editAvatarButton: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    backgroundColor: Colors.primary,\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: Colors.surface,\n  },\n  profileName: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: Colors.text.primary,\n    marginBottom: 8,\n  },\n  profileBadge: {\n    flexDirection: 'row',\n    backgroundColor: Colors.secondary + '20',\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 16,\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  profileBadgeText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.secondary,\n    marginLeft: 4,\n  },\n  profileStats: {\n    flexDirection: 'row',\n    width: '100%',\n    justifyContent: 'space-around',\n    paddingTop: 16,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  statItem: {\n    alignItems: 'center',\n  },\n  statValue: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: Colors.text.primary,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.text.secondary,\n    marginTop: 4,\n  },\n  statDivider: {\n    width: 1,\n    height: '100%',\n    backgroundColor: Colors.border,\n  },\n  availabilityCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  availabilityHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  availabilityTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginLeft: 12,\n  },\n  availabilityDescription: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 36,\n    marginBottom: 12,\n  },\n  availabilitySwitch: {\n    alignSelf: 'flex-start',\n    marginLeft: 36,\n  },\n  section: {\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 8,\n  },\n  earningsCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  earningsTotal: {\n    fontSize: 28,\n    fontWeight: '700',\n    color: Colors.primary,\n    marginBottom: 4,\n  },\n  earningsLabel: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 16,\n  },\n  earningsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 20,\n  },\n  earningsButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.primary,\n    marginLeft: 8,\n  },\n  settingsCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 16,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  settingItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  settingLabelContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  settingLabel: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    marginLeft: 12,\n  },\n  radiusInputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  radiusInput: {\n    backgroundColor: Colors.background,\n    borderRadius: 4,\n    paddingVertical: 4,\n    paddingHorizontal: 8,\n    width: 60,\n    textAlign: 'center',\n  },\n  radiusUnit: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 8,\n  },\n  saveButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n    marginTop: 8,\n  },\n  saveButtonText: {\n    color: Colors.text.inverse,\n    fontWeight: '600',\n    fontSize: 14,\n  },\n  optionsCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  optionItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  optionText: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    marginLeft: 12,\n    flex: 1,\n  },\n  adminButton: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.primary + '15',\n    paddingVertical: 14,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    marginVertical: 4,\n    borderWidth: 1,\n    borderColor: Colors.primary + '30',\n  },\n  adminButtonText: {\n    color: Colors.primary,\n    fontWeight: '600',\n    fontSize: 16,\n    marginLeft: 8,\n  },\n  versionText: {\n    fontSize: 12,\n    color: Colors.text.disabled,\n    textAlign: 'center',\n    marginTop: 24,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.text.primary,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/driver/JobDetailsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1116,1119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1116,1119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { height: 100 }","line":568,"column":22,"nodeType":"ObjectExpression","endLine":568,"endColumn":37},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":605,"column":11,"nodeType":"ObjectExpression","endLine":617,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":646,"column":19,"nodeType":"ObjectExpression","endLine":659,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":679,"column":13,"nodeType":"ObjectExpression","endLine":690,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { StatusBar } from 'expo-status-bar';\nimport * as Location from 'expo-location';\nimport { Colors } from '../../constants/Colors';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\n\ninterface JobDetails {\n  id: string;\n  title: string;\n  status: string;\n  client_id: string;\n  client_name: string;\n  client_phone: string;\n  pickup_address: string;\n  pickup_city: string;\n  pickup_state: string;\n  pickup_zip: string;\n  pickup_date: string;\n  pickup_notes: string;\n  delivery_address: string;\n  delivery_city: string;\n  delivery_state: string;\n  delivery_zip: string;\n  delivery_date: string;\n  delivery_notes: string;\n  distance: number;\n  price: number;\n  vehicle_type: string;\n  cargo_type: string;\n  weight: number;\n  dimensions: string;\n  created_at: string;\n}\n\nexport default function JobDetailsScreen({ route, navigation }: any) {\n  const { jobId } = route.params;\n  const [job, setJob] = useState<JobDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [statusUpdating, setStatusUpdating] = useState(false);\n  const { userProfile } = useAuth();\n\n  useEffect(() => {\n    fetchJobDetails();\n  }, [jobId]);\n\n  const fetchJobDetails = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('shipments')\n        .select(\n          `\n          *,\n          profiles:client_id(first_name, last_name, phone)\n        `\n        )\n        .eq('id', jobId)\n        .single();\n\n      if (error) throw error;\n\n      if (data) {\n        setJob({\n          id: data.id,\n          title: `Shipment #${data.id.substring(0, 8)}`,\n          status: data.status,\n          client_id: data.client_id,\n          client_name: data.profiles\n            ? `${data.profiles.first_name} ${data.profiles.last_name}`\n            : 'Client',\n          client_phone: data.profiles?.phone || 'Not provided',\n          pickup_address: data.pickup_address || 'Address not specified',\n          pickup_city: data.pickup_city || '',\n          pickup_state: data.pickup_state || '',\n          pickup_zip: data.pickup_zip || '',\n          pickup_date: data.pickup_date || new Date().toISOString(),\n          pickup_notes: data.pickup_notes || 'No additional notes',\n          delivery_address: data.delivery_address || 'Address not specified',\n          delivery_city: data.delivery_city || '',\n          delivery_state: data.delivery_state || '',\n          delivery_zip: data.delivery_zip || '',\n          delivery_date: data.delivery_date || '',\n          delivery_notes: data.delivery_notes || 'No additional notes',\n          distance: data.distance || 0,\n          price: data.price || 0,\n          vehicle_type: data.vehicle_type || 'Standard',\n          cargo_type: data.cargo_type || 'General',\n          weight: data.weight || 0,\n          dimensions: data.dimensions || 'Not specified',\n          created_at: data.created_at,\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching job details:', error);\n      Alert.alert('Error', 'Failed to load job details. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateJobStatus = async (newStatus: string) => {\n    if (!job || !userProfile) return;\n\n    try {\n      setStatusUpdating(true);\n\n      // For status transitions that require location\n      let locationData: Record<string, number | string> = {};\n      if (['in_transit', 'delivered'].includes(newStatus)) {\n        try {\n          const { status } = await Location.requestForegroundPermissionsAsync();\n          if (status !== 'granted') {\n            Alert.alert(\n              'Permission Denied',\n              'Location permission is required to update job status.'\n            );\n            setStatusUpdating(false);\n            return;\n          }\n\n          const location = await Location.getCurrentPositionAsync({});\n          locationData = {\n            [`${newStatus}_lat`]: location.coords.latitude,\n            [`${newStatus}_lng`]: location.coords.longitude,\n            [`${newStatus}_time`]: new Date().toISOString(),\n          };\n        } catch (err) {\n          console.error('Error getting location:', err);\n          Alert.alert(\n            'Location Error',\n            'Unable to get your current location. Please try again.'\n          );\n          setStatusUpdating(false);\n          return;\n        }\n      }\n\n      // Update the shipment status\n      const { error } = await supabase\n        .from('shipments')\n        .update({\n          status: newStatus,\n          updated_at: new Date().toISOString(),\n          ...locationData,\n        })\n        .eq('id', job.id);\n\n      if (error) throw error;\n\n      // Log the status change\n      await supabase.from('shipment_status_history').insert([\n        {\n          shipment_id: job.id,\n          status: newStatus,\n          changed_by: userProfile.id,\n          changed_at: new Date().toISOString(),\n          notes: `Status updated to ${newStatus} by driver`,\n          location_lat: locationData[`${newStatus}_lat`] || null,\n          location_lng: locationData[`${newStatus}_lng`] || null,\n        },\n      ]);\n\n      Alert.alert(\n        'Success',\n        `Job status updated to ${getStatusLabel(newStatus)}`\n      );\n\n      // Refresh job details\n      fetchJobDetails();\n    } catch (error) {\n      console.error('Error updating job status:', error);\n      Alert.alert('Error', 'Failed to update job status. Please try again.');\n    } finally {\n      setStatusUpdating(false);\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'Pending';\n      case 'accepted':\n        return 'Accepted';\n      case 'in_transit':\n        return 'In Transit';\n      case 'delivered':\n        return 'Delivered';\n      case 'cancelled':\n        return 'Cancelled';\n      default:\n        return status.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    return (\n      Colors.status[status as keyof typeof Colors.status] ||\n      Colors.text.secondary\n    );\n  };\n\n  const getNextActionText = () => {\n    if (!job) return '';\n\n    switch (job.status) {\n      case 'accepted':\n        return 'Start Transit';\n      case 'in_transit':\n        return 'Mark as Delivered';\n      default:\n        return '';\n    }\n  };\n\n  const handleNextAction = () => {\n    if (!job) return;\n\n    let nextStatus = '';\n    let confirmMessage = '';\n\n    switch (job.status) {\n      case 'accepted':\n        nextStatus = 'in_transit';\n        confirmMessage = 'Start transit for this shipment?';\n        break;\n      case 'in_transit':\n        nextStatus = 'delivered';\n        confirmMessage = 'Confirm that you have delivered the shipment?';\n        break;\n      default:\n        return;\n    }\n\n    Alert.alert('Update Status', confirmMessage, [\n      { text: 'Cancel', style: 'cancel' },\n      { text: 'Confirm', onPress: () => updateJobStatus(nextStatus) },\n    ]);\n  };\n\n  const formatFullAddress = (\n    address: string,\n    city: string,\n    state: string,\n    zip: string\n  ) => {\n    const parts = [address];\n\n    if (city || state || zip) {\n      const cityStateZip = [city, state, zip].filter(Boolean).join(', ');\n      if (cityStateZip) parts.push(cityStateZip);\n    }\n\n    return parts.join('\\n');\n  };\n\n  const openNavigationApp = (address: string) => {\n    // Navigation functionality would be implemented here\n    Alert.alert('Navigation', `Opening directions to: ${address}`);\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading job details...</Text>\n      </View>\n    );\n  }\n\n  if (!job) {\n    return (\n      <View style={styles.errorContainer}>\n        <MaterialIcons name=\"error-outline\" size={64} color={Colors.error} />\n        <Text style={styles.errorTitle}>Job Not Found</Text>\n        <Text style={styles.errorMessage}>\n          The requested job could not be found.\n        </Text>\n        <TouchableOpacity\n          style={styles.errorButton}\n          onPress={() => navigation.goBack()}\n        >\n          <Text style={styles.errorButtonText}>Go Back</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <View style={styles.headerTop}>\n          <TouchableOpacity\n            style={styles.backButton}\n            onPress={() => navigation.goBack()}\n          >\n            <MaterialIcons\n              name=\"arrow-back\"\n              size={24}\n              color={Colors.text.inverse}\n            />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>{job.title}</Text>\n        </View>\n\n        <View\n          style={[\n            styles.statusBadge,\n            { backgroundColor: getStatusColor(job.status) + '20' },\n          ]}\n        >\n          <Text\n            style={[styles.statusText, { color: getStatusColor(job.status) }]}\n          >\n            {getStatusLabel(job.status)}\n          </Text>\n        </View>\n      </View>\n\n      <ScrollView style={styles.content}>\n        {/* Earning Summary */}\n        <View style={styles.earningSummary}>\n          <Text style={styles.earningSummaryLabel}>Earnings</Text>\n          <Text style={styles.earningSummaryValue}>\n            ${job.price.toFixed(2)}\n          </Text>\n        </View>\n\n        {/* Client Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Client Information</Text>\n          <View style={styles.infoCard}>\n            <View style={styles.infoRow}>\n              <MaterialIcons name=\"person\" size={20} color={Colors.primary} />\n              <Text style={styles.infoLabel}>Name:</Text>\n              <Text style={styles.infoValue}>{job.client_name}</Text>\n            </View>\n            <View style={styles.infoRow}>\n              <MaterialIcons name=\"phone\" size={20} color={Colors.primary} />\n              <Text style={styles.infoLabel}>Phone:</Text>\n              <Text style={styles.infoValue}>{job.client_phone}</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Pickup Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Pickup Information</Text>\n          <View style={styles.infoCard}>\n            <View style={styles.locationHeader}>\n              <MaterialIcons\n                name=\"location-on\"\n                size={20}\n                color={Colors.primary}\n              />\n              <Text style={styles.locationHeaderText}>Pickup Location</Text>\n            </View>\n            <Text style={styles.addressText}>\n              {formatFullAddress(\n                job.pickup_address,\n                job.pickup_city,\n                job.pickup_state,\n                job.pickup_zip\n              )}\n            </Text>\n            <TouchableOpacity\n              style={styles.navigationButton}\n              onPress={() => openNavigationApp(job.pickup_address)}\n            >\n              <MaterialIcons\n                name=\"directions\"\n                size={16}\n                color={Colors.primary}\n              />\n              <Text style={styles.navigationButtonText}>Get Directions</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={[\n                styles.navigationButton,\n                { backgroundColor: Colors.secondary + '20' },\n              ]}\n              onPress={() => navigation.navigate('RouteMap', { jobId: job.id })}\n            >\n              <MaterialIcons name=\"map\" size={16} color={Colors.secondary} />\n              <Text\n                style={[\n                  styles.navigationButtonText,\n                  { color: Colors.secondary },\n                ]}\n              >\n                View Route Map\n              </Text>\n            </TouchableOpacity>\n\n            <View style={styles.infoRow}>\n              <MaterialIcons name=\"event\" size={20} color={Colors.primary} />\n              <Text style={styles.infoLabel}>Date:</Text>\n              <Text style={styles.infoValue}>\n                {new Date(job.pickup_date).toLocaleDateString()}\n              </Text>\n            </View>\n\n            <View style={styles.notesContainer}>\n              <Text style={styles.notesLabel}>Notes:</Text>\n              <Text style={styles.notesText}>{job.pickup_notes}</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Delivery Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Delivery Information</Text>\n          <View style={styles.infoCard}>\n            <View style={styles.locationHeader}>\n              <MaterialIcons name=\"flag\" size={20} color={Colors.secondary} />\n              <Text style={styles.locationHeaderText}>Delivery Location</Text>\n            </View>\n            <Text style={styles.addressText}>\n              {formatFullAddress(\n                job.delivery_address,\n                job.delivery_city,\n                job.delivery_state,\n                job.delivery_zip\n              )}\n            </Text>\n            <TouchableOpacity\n              style={styles.navigationButton}\n              onPress={() => openNavigationApp(job.delivery_address)}\n            >\n              <MaterialIcons\n                name=\"directions\"\n                size={16}\n                color={Colors.secondary}\n              />\n              <Text style={styles.navigationButtonText}>Get Directions</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={[\n                styles.navigationButton,\n                { backgroundColor: Colors.secondary + '20' },\n              ]}\n              onPress={() => navigation.navigate('RouteMap', { jobId: job.id })}\n            >\n              <MaterialIcons name=\"map\" size={16} color={Colors.secondary} />\n              <Text\n                style={[\n                  styles.navigationButtonText,\n                  { color: Colors.secondary },\n                ]}\n              >\n                View Route Map\n              </Text>\n            </TouchableOpacity>\n\n            {job.delivery_date && (\n              <View style={styles.infoRow}>\n                <MaterialIcons\n                  name=\"event\"\n                  size={20}\n                  color={Colors.secondary}\n                />\n                <Text style={styles.infoLabel}>Expected Date:</Text>\n                <Text style={styles.infoValue}>\n                  {new Date(job.delivery_date).toLocaleDateString()}\n                </Text>\n              </View>\n            )}\n\n            <View style={styles.notesContainer}>\n              <Text style={styles.notesLabel}>Notes:</Text>\n              <Text style={styles.notesText}>{job.delivery_notes}</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Shipment Details */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Shipment Details</Text>\n          <View style={styles.infoCard}>\n            <View style={styles.detailsGrid}>\n              <View style={styles.detailItem}>\n                <MaterialIcons\n                  name=\"straighten\"\n                  size={20}\n                  color={Colors.text.secondary}\n                />\n                <Text style={styles.detailLabel}>Distance</Text>\n                <Text style={styles.detailValue}>{job.distance} miles</Text>\n              </View>\n              <View style={styles.detailItem}>\n                <MaterialIcons\n                  name=\"local-shipping\"\n                  size={20}\n                  color={Colors.text.secondary}\n                />\n                <Text style={styles.detailLabel}>Vehicle Type</Text>\n                <Text style={styles.detailValue}>{job.vehicle_type}</Text>\n              </View>\n              <View style={styles.detailItem}>\n                <MaterialIcons\n                  name=\"category\"\n                  size={20}\n                  color={Colors.text.secondary}\n                />\n                <Text style={styles.detailLabel}>Cargo Type</Text>\n                <Text style={styles.detailValue}>{job.cargo_type}</Text>\n              </View>\n              <View style={styles.detailItem}>\n                <MaterialIcons\n                  name=\"fitness-center\"\n                  size={20}\n                  color={Colors.text.secondary}\n                />\n                <Text style={styles.detailLabel}>Weight</Text>\n                <Text style={styles.detailValue}>{job.weight} lbs</Text>\n              </View>\n              <View style={styles.detailItem}>\n                <MaterialIcons\n                  name=\"aspect-ratio\"\n                  size={20}\n                  color={Colors.text.secondary}\n                />\n                <Text style={styles.detailLabel}>Dimensions</Text>\n                <Text style={styles.detailValue}>{job.dimensions}</Text>\n              </View>\n              <View style={styles.detailItem}>\n                <MaterialIcons\n                  name=\"today\"\n                  size={20}\n                  color={Colors.text.secondary}\n                />\n                <Text style={styles.detailLabel}>Created On</Text>\n                <Text style={styles.detailValue}>\n                  {new Date(job.created_at).toLocaleDateString()}\n                </Text>\n              </View>\n            </View>\n          </View>\n        </View>\n\n        {/* Message Client Button */}\n        <TouchableOpacity\n          style={styles.messageButton}\n          onPress={() =>\n            navigation.navigate('Messages', { contactId: job.client_id })\n          }\n        >\n          <MaterialIcons name=\"chat\" size={20} color={Colors.text.inverse} />\n          <Text style={styles.messageButtonText}>Message Client</Text>\n        </TouchableOpacity>\n\n        {/* Spacer for bottom actions */}\n        <View style={{ height: 100 }} />\n      </ScrollView>\n\n      {/* Next Action Button - Only show for certain statuses */}\n      {['accepted', 'picked_up', 'in_transit'].includes(job.status) && (\n        <View style={styles.actionContainer}>\n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={handleNextAction}\n            disabled={statusUpdating}\n          >\n            {statusUpdating ? (\n              <ActivityIndicator color={Colors.text.inverse} />\n            ) : (\n              <>\n                <Text style={styles.actionButtonText}>\n                  {getNextActionText()}\n                </Text>\n                <MaterialIcons\n                  name=\"arrow-forward\"\n                  size={20}\n                  color={Colors.text.inverse}\n                />\n              </>\n            )}\n          </TouchableOpacity>\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.secondary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 24,\n    borderBottomLeftRadius: 15,\n    borderBottomRightRadius: 15,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  headerTop: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  backButton: {\n    marginRight: 16,\n  },\n  headerTitle: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: Colors.text.inverse,\n    flex: 1,\n  },\n  statusBadge: {\n    alignSelf: 'flex-start',\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 16,\n  },\n  statusText: {\n    fontWeight: '600',\n    fontSize: 12,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  earningSummary: {\n    backgroundColor: Colors.surface,\n    borderRadius: 16,\n    padding: 20,\n    marginBottom: 20,\n    alignItems: 'center',\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  earningSummaryLabel: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 8,\n  },\n  earningSummaryValue: {\n    fontSize: 28,\n    fontWeight: '700',\n    color: Colors.primary,\n  },\n  section: {\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text.primary,\n    marginBottom: 12,\n  },\n  infoCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 16,\n    padding: 20,\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  infoRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  infoLabel: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 8,\n    marginRight: 8,\n    width: 60,\n  },\n  infoValue: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    flex: 1,\n  },\n  locationHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  locationHeaderText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginLeft: 8,\n  },\n  addressText: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    marginLeft: 28,\n    marginBottom: 12,\n  },\n  navigationButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    marginLeft: 28,\n    marginBottom: 16,\n    alignSelf: 'flex-start',\n  },\n  navigationButtonText: {\n    fontSize: 12,\n    color: Colors.primary,\n    fontWeight: '600',\n    marginLeft: 4,\n  },\n  notesContainer: {\n    marginTop: 8,\n    marginLeft: 28,\n  },\n  notesLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text.secondary,\n    marginBottom: 4,\n  },\n  notesText: {\n    fontSize: 14,\n    color: Colors.text.primary,\n  },\n  detailsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  detailItem: {\n    width: '48%',\n    marginBottom: 16,\n  },\n  detailLabel: {\n    fontSize: 12,\n    color: Colors.text.secondary,\n    marginTop: 4,\n  },\n  detailValue: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    fontWeight: '500',\n    marginTop: 2,\n  },\n  messageButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 14,\n    marginBottom: 16,\n    shadowColor: Colors.primaryDark,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n    elevation: 2,\n  },\n  messageButtonText: {\n    color: Colors.text.inverse,\n    fontWeight: 'bold',\n    fontSize: 16,\n    marginLeft: 8,\n  },\n  actionContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: Colors.surface,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    paddingVertical: 16,\n    paddingHorizontal: 24,\n  },\n  actionButton: {\n    backgroundColor: Colors.secondary,\n    borderRadius: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 16,\n    shadowColor: Colors.secondaryDark,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n    elevation: 2,\n  },\n  actionButtonText: {\n    color: Colors.text.inverse,\n    fontWeight: 'bold',\n    fontSize: 16,\n    marginRight: 8,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.text.primary,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    padding: 24,\n  },\n  errorTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginTop: 16,\n  },\n  errorMessage: {\n    fontSize: 16,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginTop: 8,\n  },\n  errorButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    marginTop: 24,\n  },\n  errorButtonText: {\n    color: Colors.text.inverse,\n    fontWeight: '600',\n    fontSize: 14,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/driver/MessagesScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'realtimeService' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigation' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[898,901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[898,901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1531,1534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1531,1534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1583,1586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1583,1586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":562,"column":11,"nodeType":"ObjectExpression","endLine":574,"endColumn":4}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  FlatList,\n  TextInput,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  Platform,\n  ActivityIndicator,\n  Alert,\n} from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Colors } from '../../constants/Colors';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\nimport { realtimeService } from '../../services/RealtimeService';\n\ninterface Contact {\n  id: string;\n  name: string;\n  avatar?: string;\n  lastMessage?: string;\n  lastMessageTime?: string;\n  unreadCount?: number;\n}\n\ninterface Message {\n  id: string;\n  sender_id: string;\n  receiver_id: string;\n  content: string;\n  created_at: string;\n  is_read: boolean;\n}\n\nexport default function MessagesScreen({ route, navigation }: any) {\n  // If contactId is provided in route params, we'll open that conversation directly\n  const initialContactId = route.params?.contactId;\n\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [sendingMessage, setSendingMessage] = useState(false);\n  const { userProfile } = useAuth();\n\n  const messageListRef = useRef<FlatList>(null);\n  const messageSubscriptionRef = useRef<any>(null);\n  const contactSubscriptionRef = useRef<any>(null);\n\n  useEffect(() => {\n    fetchContacts();\n\n    // Set up real-time subscription for new contacts/messages\n    setupContactsSubscription();\n\n    return () => {\n      // Clean up subscriptions on unmount\n      if (messageSubscriptionRef.current) {\n        supabase.removeChannel(messageSubscriptionRef.current);\n      }\n\n      if (contactSubscriptionRef.current) {\n        supabase.removeChannel(contactSubscriptionRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (initialContactId && contacts.length > 0) {\n      const contact = contacts.find(c => c.id === initialContactId);\n      if (contact) {\n        handleSelectContact(contact);\n      }\n    }\n  }, [initialContactId, contacts]);\n\n  const setupContactsSubscription = () => {\n    if (!userProfile) return;\n\n    // Set up real-time subscription for new messages that might create new contacts\n    contactSubscriptionRef.current = supabase\n      .channel('new-contacts')\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'messages',\n          filter: `receiver_id=eq.${userProfile.id}`,\n        },\n        () => {\n          // When a new message comes in, refresh contacts\n          fetchContacts();\n        }\n      )\n      .subscribe();\n  };\n\n  const fetchContacts = async () => {\n    if (!userProfile) return;\n\n    setLoading(true);\n    try {\n      // For drivers, contacts would primarily be clients they've worked with\n      // This would typically come from shipments they've been assigned to\n      const { data: shipments, error: shipmentsError } = await supabase\n        .from('shipments')\n        .select(\n          `\n          *,\n          profiles:client_id(id, first_name, last_name, avatar_url)\n        `\n        )\n        .eq('driver_id', userProfile.id);\n\n      if (shipmentsError) throw shipmentsError;\n\n      // Extract unique clients from shipments\n      const uniqueClients: Record<string, Contact> = {};\n\n      shipments.forEach(shipment => {\n        if (shipment.profiles && !uniqueClients[shipment.profiles.id]) {\n          uniqueClients[shipment.profiles.id] = {\n            id: shipment.profiles.id,\n            name: `${shipment.profiles.first_name} ${shipment.profiles.last_name}`,\n            avatar: shipment.profiles.avatar_url,\n          };\n        }\n      });\n\n      // Also fetch any system contacts or support staff (could be added later)\n\n      // Get last messages and unread counts for each contact in parallel for better performance\n      const contactsArray = Object.values(uniqueClients);\n      await Promise.all(\n        contactsArray.map(async contact => {\n          try {\n            // Get last message for this contact\n            const { data: lastMessage } = await supabase\n              .from('messages')\n              .select('*')\n              .or(\n                `and(sender_id.eq.${userProfile.id},receiver_id.eq.${contact.id}),and(sender_id.eq.${contact.id},receiver_id.eq.${userProfile.id})`\n              )\n              .order('created_at', { ascending: false })\n              .limit(1);\n\n            // Get unread count for this contact using our new function\n            const { data: unreadCountData } = await supabase.rpc(\n              'count_unread_messages',\n              {\n                p_user_id: userProfile.id,\n                p_contact_id: contact.id,\n              }\n            );\n\n            const unreadCount = unreadCountData || 0;\n\n            if (lastMessage && lastMessage.length > 0) {\n              contact.lastMessage = lastMessage[0].content;\n              contact.lastMessageTime = lastMessage[0].created_at;\n              contact.unreadCount = unreadCount;\n            }\n          } catch (error) {\n            console.error('Error fetching contact details:', error);\n          }\n        })\n      );\n\n      // Sort contacts by last message time (most recent first)\n      contactsArray.sort((a, b) => {\n        if (!a.lastMessageTime) return 1;\n        if (!b.lastMessageTime) return -1;\n        return (\n          new Date(b.lastMessageTime).getTime() -\n          new Date(a.lastMessageTime).getTime()\n        );\n      });\n\n      // Update state with the enhanced contacts information\n      setContacts(contactsArray);\n    } catch (error) {\n      console.error('Error fetching contacts:', error);\n      Alert.alert('Error', 'Failed to load your contacts. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchMessages = async (contactId: string) => {\n    if (!userProfile) return;\n\n    try {\n      // Fetch message history between current user and selected contact\n      const { data, error } = await supabase\n        .from('messages')\n        .select('*')\n        .or(\n          `and(sender_id.eq.${userProfile.id},receiver_id.eq.${contactId}),and(sender_id.eq.${contactId},receiver_id.eq.${userProfile.id})`\n        )\n        .order('created_at', { ascending: true });\n\n      if (error) throw error;\n\n      setMessages(data || []);\n\n      // Mark unread messages as read using our new function\n      if (data) {\n        const unreadMessages = data.filter(\n          msg => msg.sender_id === contactId && !msg.is_read\n        );\n\n        for (const msg of unreadMessages) {\n          await supabase.rpc('mark_message_as_read', {\n            p_message_id: msg.id,\n            p_user_id: userProfile.id,\n          });\n        }\n      }\n\n      // Set up real-time subscription for new messages using our RealtimeService\n      if (messageSubscriptionRef.current) {\n        supabase.removeChannel(messageSubscriptionRef.current);\n      }\n\n      // Create a new real-time channel for messages between these users\n      messageSubscriptionRef.current = supabase\n        .channel(`messages-${userProfile.id}-${contactId}`)\n        .on(\n          'postgres_changes',\n          {\n            event: 'INSERT',\n            schema: 'public',\n            table: 'messages',\n            filter: `or(and(sender_id.eq.${userProfile.id},receiver_id.eq.${contactId}),and(sender_id.eq.${contactId},receiver_id.eq.${userProfile.id}))`,\n          },\n          payload => {\n            // Add new message to the list\n            setMessages(prev => [...prev, payload.new as Message]);\n\n            // Mark message as read if it's from the contact\n            if (\n              payload.new.sender_id === contactId &&\n              payload.new.receiver_id === userProfile.id\n            ) {\n              supabase.rpc('mark_message_as_read', {\n                p_message_id: payload.new.id,\n                p_user_id: userProfile.id,\n              });\n            }\n\n            // Scroll to bottom\n            setTimeout(() => {\n              messageListRef.current?.scrollToEnd({ animated: true });\n            }, 100);\n          }\n        )\n        .subscribe();\n\n      // Scroll to bottom of message list\n      setTimeout(() => {\n        messageListRef.current?.scrollToEnd({ animated: false });\n      }, 100);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      Alert.alert('Error', 'Failed to load messages. Please try again.');\n    }\n  };\n\n  const handleSelectContact = (contact: Contact) => {\n    setSelectedContact(contact);\n    fetchMessages(contact.id);\n  };\n\n  const handleSendMessage = async () => {\n    if (!userProfile || !selectedContact || !newMessage.trim()) return;\n\n    try {\n      setSendingMessage(true);\n\n      // Create message data\n      const messageData = {\n        sender_id: userProfile.id,\n        receiver_id: selectedContact.id,\n        shipment_id: null, // Optional: can be linked to a specific shipment\n        content: newMessage.trim(),\n        is_read: false,\n        created_at: new Date().toISOString(),\n      };\n\n      // Insert the new message\n      const { error } = await supabase.from('messages').insert([messageData]);\n\n      if (error) throw error;\n\n      // Clear the input\n      setNewMessage('');\n\n      // Update the contact's last message in the contacts list\n      setContacts(prevContacts => {\n        return prevContacts.map(contact => {\n          if (contact.id === selectedContact.id) {\n            return {\n              ...contact,\n              lastMessage: messageData.content,\n              lastMessageTime: messageData.created_at,\n            };\n          }\n          return contact;\n        });\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      Alert.alert('Error', 'Failed to send message. Please try again.');\n    } finally {\n      setSendingMessage(false);\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const formatDate = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const today = new Date();\n\n    if (date.toDateString() === today.toDateString()) {\n      return 'Today';\n    }\n\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    if (date.toDateString() === yesterday.toDateString()) {\n      return 'Yesterday';\n    }\n\n    return date.toLocaleDateString();\n  };\n\n  const renderContactItem = ({ item }: { item: Contact }) => (\n    <TouchableOpacity\n      style={[\n        styles.contactItem,\n        selectedContact?.id === item.id && styles.selectedContactItem,\n      ]}\n      onPress={() => handleSelectContact(item)}\n    >\n      <View style={styles.contactAvatar}>\n        <Text style={styles.contactInitial}>\n          {item.name.charAt(0).toUpperCase()}\n        </Text>\n      </View>\n      <View style={styles.contactInfo}>\n        <Text style={styles.contactName}>{item.name}</Text>\n        {item.lastMessage && (\n          <Text\n            style={styles.lastMessage}\n            numberOfLines={1}\n            ellipsizeMode=\"tail\"\n          >\n            {item.lastMessage}\n          </Text>\n        )}\n      </View>\n      <View style={styles.contactMeta}>\n        {item.lastMessageTime && (\n          <Text style={styles.messageTime}>\n            {formatDate(item.lastMessageTime) === 'Today'\n              ? formatTime(item.lastMessageTime)\n              : formatDate(item.lastMessageTime)}\n          </Text>\n        )}\n        {(item.unreadCount || 0) > 0 && (\n          <View style={styles.unreadBadge}>\n            <Text style={styles.unreadText}>{item.unreadCount}</Text>\n          </View>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n\n  const renderMessageItem = ({ item }: { item: Message }) => {\n    const isFromMe = item.sender_id === userProfile?.id;\n\n    return (\n      <View\n        style={[\n          styles.messageContainer,\n          isFromMe ? styles.myMessageContainer : styles.theirMessageContainer,\n        ]}\n      >\n        <View\n          style={[\n            styles.messageBubble,\n            isFromMe ? styles.myMessageBubble : styles.theirMessageBubble,\n          ]}\n        >\n          <Text\n            style={[\n              styles.messageText,\n              isFromMe ? styles.myMessageText : styles.theirMessageText,\n            ]}\n          >\n            {item.content}\n          </Text>\n        </View>\n        <Text\n          style={[\n            styles.messageTime,\n            isFromMe ? styles.myMessageTime : styles.theirMessageTime,\n          ]}\n        >\n          {formatTime(item.created_at)}\n        </Text>\n      </View>\n    );\n  };\n\n  const renderEmptyContactsList = () => (\n    <View style={styles.emptyContainer}>\n      <MaterialIcons name=\"forum\" size={64} color={Colors.text.disabled} />\n      <Text style={styles.emptyTitle}>No Contacts Yet</Text>\n      <Text style={styles.emptyMessage}>\n        You'll see your message contacts here after you're assigned to jobs.\n      </Text>\n    </View>\n  );\n\n  const renderEmptyMessagesList = () => (\n    <View style={styles.emptyContainer}>\n      <MaterialIcons name=\"chat\" size={64} color={Colors.text.disabled} />\n      <Text style={styles.emptyTitle}>No Messages Yet</Text>\n      <Text style={styles.emptyMessage}>\n        Start the conversation by sending a message below.\n      </Text>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>Messages</Text>\n      </View>\n\n      <View style={styles.content}>\n        {/* Contacts List */}\n        <View style={styles.contactsColumn}>\n          {loading ? (\n            <ActivityIndicator\n              style={styles.loader}\n              size=\"large\"\n              color={Colors.primary}\n            />\n          ) : (\n            <FlatList\n              data={contacts}\n              renderItem={renderContactItem}\n              keyExtractor={item => item.id}\n              ListEmptyComponent={renderEmptyContactsList}\n            />\n          )}\n        </View>\n\n        {/* Messages Area */}\n        <View style={styles.messagesColumn}>\n          {selectedContact ? (\n            <KeyboardAvoidingView\n              style={styles.messagesContent}\n              behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n              keyboardVerticalOffset={100}\n            >\n              {/* Selected Contact Header */}\n              <View style={styles.chatHeader}>\n                <View style={styles.chatContactAvatar}>\n                  <Text style={styles.chatContactInitial}>\n                    {selectedContact.name.charAt(0).toUpperCase()}\n                  </Text>\n                </View>\n                <Text style={styles.chatContactName}>\n                  {selectedContact.name}\n                </Text>\n              </View>\n\n              {/* Messages List */}\n              <FlatList\n                ref={messageListRef}\n                style={styles.messagesList}\n                data={messages}\n                renderItem={renderMessageItem}\n                keyExtractor={item => item.id}\n                contentContainerStyle={styles.messagesListContent}\n                ListEmptyComponent={renderEmptyMessagesList}\n              />\n\n              {/* Message Input */}\n              <View style={styles.inputContainer}>\n                <TextInput\n                  style={styles.messageInput}\n                  placeholder=\"Type a message...\"\n                  value={newMessage}\n                  onChangeText={setNewMessage}\n                  multiline\n                  maxLength={500}\n                />\n                <TouchableOpacity\n                  style={[\n                    styles.sendButton,\n                    (!newMessage.trim() || sendingMessage) &&\n                      styles.disabledSendButton,\n                  ]}\n                  onPress={handleSendMessage}\n                  disabled={!newMessage.trim() || sendingMessage}\n                >\n                  {sendingMessage ? (\n                    <ActivityIndicator\n                      size=\"small\"\n                      color={Colors.text.inverse}\n                    />\n                  ) : (\n                    <MaterialIcons\n                      name=\"send\"\n                      size={20}\n                      color={Colors.text.inverse}\n                    />\n                  )}\n                </TouchableOpacity>\n              </View>\n            </KeyboardAvoidingView>\n          ) : (\n            <View style={styles.noSelectedContactContainer}>\n              <MaterialIcons\n                name=\"forum\"\n                size={80}\n                color={Colors.text.disabled}\n              />\n              <Text style={styles.noSelectedContactText}>\n                Select a contact to start messaging\n              </Text>\n            </View>\n          )}\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.secondary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 24,\n    borderBottomLeftRadius: 15,\n    borderBottomRightRadius: 15,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  headerTitle: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: Colors.text.inverse,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n  contactsColumn: {\n    width: '35%',\n    borderRightWidth: 1,\n    borderRightColor: Colors.border,\n  },\n  messagesColumn: {\n    flex: 1,\n  },\n  contactItem: {\n    flexDirection: 'row',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  selectedContactItem: {\n    backgroundColor: Colors.primary + '10', // 10% opacity\n  },\n  contactAvatar: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    backgroundColor: Colors.secondary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  contactInitial: {\n    color: Colors.text.inverse,\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  contactInfo: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  contactName: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 4,\n  },\n  lastMessage: {\n    fontSize: 12,\n    color: Colors.text.secondary,\n  },\n  contactMeta: {\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n  },\n  messageTime: {\n    fontSize: 11,\n    color: Colors.text.secondary,\n    marginBottom: 4,\n  },\n  unreadBadge: {\n    backgroundColor: Colors.primary,\n    borderRadius: 10,\n    minWidth: 20,\n    height: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  unreadText: {\n    color: Colors.text.inverse,\n    fontSize: 10,\n    fontWeight: '600',\n    paddingHorizontal: 4,\n  },\n  messagesContent: {\n    flex: 1,\n  },\n  chatHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n    backgroundColor: Colors.surface,\n  },\n  chatContactAvatar: {\n    width: 36,\n    height: 36,\n    borderRadius: 18,\n    backgroundColor: Colors.secondary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  chatContactInitial: {\n    color: Colors.text.inverse,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  chatContactName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n  },\n  messagesList: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  messagesListContent: {\n    padding: 16,\n    paddingBottom: 24,\n  },\n  messageContainer: {\n    marginBottom: 12,\n    maxWidth: '80%',\n  },\n  myMessageContainer: {\n    alignSelf: 'flex-end',\n  },\n  theirMessageContainer: {\n    alignSelf: 'flex-start',\n  },\n  messageBubble: {\n    borderRadius: 16,\n    padding: 12,\n  },\n  myMessageBubble: {\n    backgroundColor: Colors.primary,\n    borderBottomRightRadius: 4,\n  },\n  theirMessageBubble: {\n    backgroundColor: Colors.surface,\n    borderBottomLeftRadius: 4,\n  },\n  messageText: {\n    fontSize: 14,\n    lineHeight: 20,\n  },\n  myMessageText: {\n    color: Colors.text.inverse,\n  },\n  theirMessageText: {\n    color: Colors.text.primary,\n  },\n  myMessageTime: {\n    textAlign: 'right',\n    marginRight: 8,\n    marginTop: 4,\n  },\n  theirMessageTime: {\n    marginLeft: 8,\n    marginTop: 4,\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    padding: 12,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    backgroundColor: Colors.surface,\n  },\n  messageInput: {\n    flex: 1,\n    backgroundColor: Colors.background,\n    borderRadius: 20,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    maxHeight: 100,\n    marginRight: 8,\n  },\n  sendButton: {\n    backgroundColor: Colors.primary,\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  disabledSendButton: {\n    backgroundColor: Colors.text.disabled,\n  },\n  noSelectedContactContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n  },\n  noSelectedContactText: {\n    fontSize: 16,\n    color: Colors.text.secondary,\n    marginTop: 16,\n    textAlign: 'center',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginTop: 16,\n  },\n  emptyMessage: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginTop: 8,\n  },\n  loader: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 24,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/driver/MyJobsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[943,946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[943,946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":225,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6622,6625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6622,6625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":420,"column":11,"nodeType":"ObjectExpression","endLine":432,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":446,"column":12,"nodeType":"ObjectExpression","endLine":458,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  FlatList,\n  TouchableOpacity,\n  RefreshControl,\n  Alert,\n} from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport { Colors } from '../../constants/Colors';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\n\n// Define the tabs for the top navigation\nconst Tab = createMaterialTopTabNavigator();\n\n// Define the structure of a job object\ninterface Job {\n  id: string;\n  title: string;\n  pickup_location: string;\n  delivery_location: string;\n  distance: number;\n  earnings: number;\n  customer_name: string;\n  status: string;\n  pickup_date: string;\n  created_at: string;\n}\n\n// Component for the Active Jobs tab\nfunction ActiveJobsTab({ navigation }: any) {\n  const [activeJobs, setActiveJobs] = useState<Job[]>([]);\n  const [refreshing, setRefreshing] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const { userProfile } = useAuth();\n\n  useEffect(() => {\n    fetchActiveJobs();\n  }, []);\n\n  const fetchActiveJobs = async () => {\n    if (!userProfile) return;\n\n    setLoading(true);\n    try {\n      // Query jobs assigned to this driver that are in active statuses\n      const { data, error } = await supabase\n        .from('shipments')\n        .select(\n          `\n          *,\n          profiles:client_id(first_name, last_name)\n        `\n        )\n        .eq('driver_id', userProfile.id)\n        .in('status', ['accepted', 'in_transit'])\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Transform the data for our UI\n      const formattedJobs = data.map(job => ({\n        id: job.id,\n        title: `Shipment #${job.id.substring(0, 8)}`,\n        pickup_location: job.pickup_address || 'Address not specified',\n        delivery_location: job.delivery_address || 'Address not specified',\n        distance: job.distance || 0,\n        earnings: job.price || 0,\n        customer_name: job.profiles\n          ? `${job.profiles.first_name} ${job.profiles.last_name}`\n          : 'Customer',\n        status: job.status,\n        pickup_date: job.pickup_date || new Date().toISOString(),\n        created_at: job.created_at,\n      }));\n\n      setActiveJobs(formattedJobs);\n    } catch (error) {\n      console.error('Error fetching active jobs:', error);\n      Alert.alert(\n        'Error',\n        'Failed to load your active jobs. Please try again.'\n      );\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    setRefreshing(true);\n    fetchActiveJobs();\n  };\n\n  const handleJobPress = (job: Job) => {\n    navigation.navigate('JobDetails', { jobId: job.id });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return Colors.status.accepted;\n      case 'in_transit':\n        return Colors.status.in_transit;\n      default:\n        return Colors.text.secondary;\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return 'Accepted';\n      case 'in_transit':\n        return 'In Transit';\n      case 'delivered':\n        return 'Delivered';\n      case 'cancelled':\n        return 'Cancelled';\n      default:\n        return status.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n    }\n  };\n\n  const renderJobItem = ({ item }: { item: Job }) => (\n    <TouchableOpacity\n      style={styles.jobCard}\n      onPress={() => handleJobPress(item)}\n    >\n      <View style={styles.jobHeader}>\n        <Text style={styles.jobTitle}>{item.title}</Text>\n        <View\n          style={[\n            styles.statusBadge,\n            { backgroundColor: getStatusColor(item.status) + '20' },\n          ]}\n        >\n          <Text\n            style={[styles.statusText, { color: getStatusColor(item.status) }]}\n          >\n            {getStatusLabel(item.status)}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.locationContainer}>\n        <View style={styles.locationRow}>\n          <MaterialIcons name=\"location-on\" size={16} color={Colors.primary} />\n          <Text style={styles.locationText}>\n            Pickup: {item.pickup_location}\n          </Text>\n        </View>\n        <View style={styles.locationRow}>\n          <MaterialIcons name=\"flag\" size={16} color={Colors.secondary} />\n          <Text style={styles.locationText}>\n            Delivery: {item.delivery_location}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.customerRow}>\n        <MaterialIcons name=\"person\" size={16} color={Colors.text.secondary} />\n        <Text style={styles.customerText}>Customer: {item.customer_name}</Text>\n      </View>\n\n      <View style={styles.detailsRow}>\n        <View style={styles.detailItem}>\n          <MaterialIcons\n            name=\"straighten\"\n            size={16}\n            color={Colors.text.secondary}\n          />\n          <Text style={styles.detailText}>{item.distance} miles</Text>\n        </View>\n        <View style={styles.detailItem}>\n          <MaterialIcons\n            name=\"attach-money\"\n            size={16}\n            color={Colors.text.secondary}\n          />\n          <Text style={styles.detailText}>${item.earnings.toFixed(2)}</Text>\n        </View>\n        <View style={styles.detailItem}>\n          <MaterialIcons name=\"event\" size={16} color={Colors.text.secondary} />\n          <Text style={styles.detailText}>\n            {new Date(item.pickup_date).toLocaleDateString()}\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const renderEmptyList = () => (\n    <View style={styles.emptyContainer}>\n      <MaterialIcons name=\"assignment\" size={64} color={Colors.text.disabled} />\n      <Text style={styles.emptyTitle}>No Active Jobs</Text>\n      <Text style={styles.emptyMessage}>\n        You don't have any active jobs at the moment.\n      </Text>\n    </View>\n  );\n\n  return (\n    <View style={styles.tabContainer}>\n      <FlatList\n        data={activeJobs}\n        renderItem={renderJobItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.listContainer}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />\n        }\n        ListEmptyComponent={loading ? null : renderEmptyList()}\n      />\n    </View>\n  );\n}\n\n// Component for the Completed Jobs tab\nfunction CompletedJobsTab({ navigation }: any) {\n  const [completedJobs, setCompletedJobs] = useState<Job[]>([]);\n  const [refreshing, setRefreshing] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const { userProfile } = useAuth();\n\n  useEffect(() => {\n    fetchCompletedJobs();\n  }, []);\n\n  const fetchCompletedJobs = async () => {\n    if (!userProfile) return;\n\n    setLoading(true);\n    try {\n      // Query jobs assigned to this driver that are completed\n      const { data, error } = await supabase\n        .from('shipments')\n        .select(\n          `\n          *,\n          profiles:client_id(first_name, last_name)\n        `\n        )\n        .eq('driver_id', userProfile.id)\n        .eq('status', 'delivered')\n        .order('updated_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Transform the data for our UI\n      const formattedJobs = data.map(job => ({\n        id: job.id,\n        title: `Shipment #${job.id.substring(0, 8)}`,\n        pickup_location: job.pickup_address || 'Address not specified',\n        delivery_location: job.delivery_address || 'Address not specified',\n        distance: job.distance || 0,\n        earnings: job.price || 0,\n        customer_name: job.profiles\n          ? `${job.profiles.first_name} ${job.profiles.last_name}`\n          : 'Customer',\n        status: job.status,\n        pickup_date: job.pickup_date || new Date().toISOString(),\n        created_at: job.created_at,\n      }));\n\n      setCompletedJobs(formattedJobs);\n    } catch (error) {\n      console.error('Error fetching completed jobs:', error);\n      Alert.alert(\n        'Error',\n        'Failed to load your completed jobs. Please try again.'\n      );\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    setRefreshing(true);\n    fetchCompletedJobs();\n  };\n\n  const handleJobPress = (job: Job) => {\n    navigation.navigate('JobDetails', { jobId: job.id });\n  };\n\n  const renderJobItem = ({ item }: { item: Job }) => (\n    <TouchableOpacity\n      style={styles.jobCard}\n      onPress={() => handleJobPress(item)}\n    >\n      <View style={styles.jobHeader}>\n        <Text style={styles.jobTitle}>{item.title}</Text>\n        <View\n          style={[\n            styles.statusBadge,\n            { backgroundColor: Colors.status.delivered + '20' },\n          ]}\n        >\n          <Text style={[styles.statusText, { color: Colors.status.delivered }]}>\n            Delivered\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.locationContainer}>\n        <View style={styles.locationRow}>\n          <MaterialIcons name=\"location-on\" size={16} color={Colors.primary} />\n          <Text style={styles.locationText}>\n            Pickup: {item.pickup_location}\n          </Text>\n        </View>\n        <View style={styles.locationRow}>\n          <MaterialIcons name=\"flag\" size={16} color={Colors.secondary} />\n          <Text style={styles.locationText}>\n            Delivery: {item.delivery_location}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.customerRow}>\n        <MaterialIcons name=\"person\" size={16} color={Colors.text.secondary} />\n        <Text style={styles.customerText}>Customer: {item.customer_name}</Text>\n      </View>\n\n      <View style={styles.detailsRow}>\n        <View style={styles.detailItem}>\n          <MaterialIcons\n            name=\"straighten\"\n            size={16}\n            color={Colors.text.secondary}\n          />\n          <Text style={styles.detailText}>{item.distance} miles</Text>\n        </View>\n        <View style={styles.detailItem}>\n          <MaterialIcons\n            name=\"attach-money\"\n            size={16}\n            color={Colors.text.secondary}\n          />\n          <Text style={styles.detailText}>${item.earnings.toFixed(2)}</Text>\n        </View>\n        <View style={styles.detailItem}>\n          <MaterialIcons name=\"event\" size={16} color={Colors.text.secondary} />\n          <Text style={styles.detailText}>\n            {new Date(item.pickup_date).toLocaleDateString()}\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const renderEmptyList = () => (\n    <View style={styles.emptyContainer}>\n      <MaterialIcons\n        name=\"check-circle\"\n        size={64}\n        color={Colors.text.disabled}\n      />\n      <Text style={styles.emptyTitle}>No Completed Jobs</Text>\n      <Text style={styles.emptyMessage}>\n        Your completed jobs will appear here.\n      </Text>\n    </View>\n  );\n\n  return (\n    <View style={styles.tabContainer}>\n      <FlatList\n        data={completedJobs}\n        renderItem={renderJobItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.listContainer}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />\n        }\n        ListEmptyComponent={loading ? null : renderEmptyList()}\n      />\n    </View>\n  );\n}\n\nexport default function MyJobsScreen() {\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.headerTitle}>My Jobs</Text>\n      </View>\n\n      <Tab.Navigator\n        screenOptions={{\n          tabBarStyle: { backgroundColor: Colors.background },\n          tabBarActiveTintColor: Colors.secondary,\n          tabBarInactiveTintColor: Colors.text.secondary,\n          tabBarIndicatorStyle: { backgroundColor: Colors.secondary },\n          tabBarLabelStyle: { fontWeight: '600' },\n        }}\n      >\n        <Tab.Screen name=\"Active\" component={ActiveJobsTab} />\n        <Tab.Screen name=\"Completed\" component={CompletedJobsTab} />\n      </Tab.Navigator>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.secondary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 24,\n    borderBottomLeftRadius: 15,\n    borderBottomRightRadius: 15,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  headerTitle: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: Colors.text.inverse,\n  },\n  tabContainer: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  listContainer: {\n    padding: 16,\n    paddingBottom: 80,\n  },\n  jobCard: {\n    backgroundColor: Colors.surface,\n    borderRadius: 16,\n    padding: 20,\n    marginBottom: 16,\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  jobHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 14,\n  },\n  jobTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.text.primary,\n    flex: 1,\n  },\n  statusBadge: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 20,\n  },\n  statusText: {\n    fontWeight: 'bold',\n    fontSize: 14,\n  },\n  locationContainer: {\n    marginBottom: 16,\n    borderLeftWidth: 2,\n    borderLeftColor: Colors.primary,\n    paddingLeft: 12,\n  },\n  locationRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  locationText: {\n    fontSize: 15,\n    color: Colors.text.primary,\n    marginLeft: 8,\n    flex: 1,\n  },\n  customerRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  customerText: {\n    fontSize: 15,\n    color: Colors.text.primary,\n    marginLeft: 8,\n    fontWeight: '500',\n  },\n  detailsRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 12,\n  },\n  detailItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 5,\n  },\n  detailText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 6,\n    fontWeight: '500',\n  },\n  emptyContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginTop: 16,\n  },\n  emptyMessage: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginTop: 8,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/driver/MyShipmentsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1016,1019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1016,1019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":40,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'session' is assigned a value but never used.","line":41,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1956,1959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1956,1959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7461,7464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7461,7464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":291,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8785,8788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8785,8788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":294,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":294,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'session' is assigned a value but never used.","line":295,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":295,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":321,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":321,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9681,9684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9681,9684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigation' is defined but never used. Allowed unused args must match /^_/u.","line":438,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":438,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":438,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":438,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13427,13430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13427,13430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":439,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":439,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13485,13488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13485,13488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":441,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":441,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":562,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":562,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17232,17235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17232,17235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":713,"column":17,"nodeType":"ObjectExpression","endLine":725,"endColumn":4}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  FlatList,\n  TouchableOpacity,\n  RefreshControl,\n  Alert,\n} from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport { Colors } from '../../constants/Colors';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\nimport { getApiUrl } from '../../utils/environment';\n\n// Define the tabs for the top navigation\nconst Tab = createMaterialTopTabNavigator();\n\n// Define the structure of a shipment object\ninterface Shipment {\n  id: string;\n  title: string;\n  pickup_location: string;\n  delivery_location: string;\n  distance: number;\n  earnings: number;\n  customer_name: string;\n  status: string;\n  pickup_date: string;\n  created_at: string;\n}\n\n// Component for the Active Shipments tab\nfunction ActiveShipmentsTab({ navigation }: any) {\n  const [activeShipments, setActiveShipments] = useState<Shipment[]>([]);\n  const [refreshing, setRefreshing] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const { userProfile, session } = useAuth();\n\n  useEffect(() => {\n    fetchActiveShipments();\n  }, []);\n\n  const fetchActiveShipments = async () => {\n    if (!userProfile) return;\n\n    setLoading(true);\n    try {\n      // Query shipments assigned to this driver that are in active statuses\n      const { data, error } = await supabase\n        .from('shipments')\n        .select(\n          `\n          *,\n          profiles:client_id(first_name, last_name)\n        `\n        )\n        .eq('driver_id', userProfile.id)\n        .in('status', ['assigned', 'picked_up', 'in_transit'])\n        .order('pickup_date', { ascending: true });\n\n      if (error) throw error;\n\n      // Transform data\n      const transformedShipments: Shipment[] = data.map((shipment: any) => ({\n        id: shipment.id,\n        title: shipment.title || 'Delivery Service',\n        pickup_location: shipment.pickup_address || 'Unknown pickup',\n        delivery_location: shipment.delivery_address || 'Unknown delivery',\n        distance: shipment.distance || 0,\n        earnings: shipment.estimated_price || 0,\n        customer_name: shipment.profiles\n          ? `${shipment.profiles.first_name} ${shipment.profiles.last_name}`\n          : 'Unknown Customer',\n        status: shipment.status,\n        pickup_date: shipment.pickup_date || shipment.created_at,\n        created_at: shipment.created_at,\n      }));\n\n      setActiveShipments(transformedShipments);\n    } catch (error) {\n      console.error('Error fetching active shipments:', error);\n      Alert.alert('Error', 'Failed to load active shipments.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    setRefreshing(true);\n    fetchActiveShipments().finally(() => setRefreshing(false));\n  };\n\n  const updateShipmentStatus = async (\n    shipmentId: string,\n    newStatus: string\n  ) => {\n    try {\n      const { error } = await supabase\n        .from('shipments')\n        .update({\n          status: newStatus,\n          updated_at: new Date().toISOString(),\n          updated_by: userProfile?.id, // Add the user ID who is updating\n        })\n        .eq('id', shipmentId);\n\n      if (error) throw error;\n\n      // Refresh the list\n      fetchActiveShipments();\n      Alert.alert('Success', `Shipment status updated to ${newStatus}`);\n    } catch (error) {\n      console.error('Error updating shipment status:', error);\n      Alert.alert('Error', 'Failed to update shipment status.');\n    }\n  };\n\n  const viewShipmentDetails = (shipmentId: string) => {\n    navigation.navigate('ShipmentDetails_Driver', { shipmentId });\n  };\n\n  const openRouteMap = (shipmentId: string) => {\n    navigation.navigate('RouteMap', { shipmentId });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'assigned':\n        return Colors.warning;\n      case 'picked_up':\n        return Colors.info;\n      case 'in_transit':\n        return Colors.secondary;\n      default:\n        return Colors.text.secondary;\n    }\n  };\n\n  const getStatusAction = (shipment: Shipment) => {\n    switch (shipment.status) {\n      case 'assigned':\n        return {\n          label: 'Mark Picked Up',\n          action: () => updateShipmentStatus(shipment.id, 'picked_up'),\n          icon: 'check-circle',\n          color: Colors.success,\n        };\n      case 'picked_up':\n        return {\n          label: 'Start Transit',\n          action: () => updateShipmentStatus(shipment.id, 'in_transit'),\n          icon: 'local-shipping',\n          color: Colors.secondary,\n        };\n      case 'in_transit':\n        return {\n          label: 'Complete Delivery',\n          action: () => updateShipmentStatus(shipment.id, 'delivered'),\n          icon: 'flag',\n          color: Colors.primary,\n        };\n      default:\n        return null;\n    }\n  };\n\n  const renderShipmentItem = ({ item }: { item: Shipment }) => {\n    const statusAction = getStatusAction(item);\n\n    return (\n      <TouchableOpacity\n        style={styles.shipmentCard}\n        onPress={() => viewShipmentDetails(item.id)}\n      >\n        <View style={styles.shipmentHeader}>\n          <Text style={styles.shipmentTitle}>{item.title}</Text>\n          <View\n            style={[\n              styles.statusBadge,\n              { backgroundColor: getStatusColor(item.status) + '20' },\n            ]}\n          >\n            <Text\n              style={[\n                styles.statusText,\n                { color: getStatusColor(item.status) },\n              ]}\n            >\n              {item.status.replace('_', ' ').toUpperCase()}\n            </Text>\n          </View>\n        </View>\n\n        <Text style={styles.customerName}>Customer: {item.customer_name}</Text>\n\n        <View style={styles.locationContainer}>\n          <View style={styles.locationRow}>\n            <MaterialIcons\n              name=\"location-on\"\n              size={16}\n              color={Colors.secondary}\n            />\n            <Text style={styles.locationText} numberOfLines={1}>\n              From: {item.pickup_location}\n            </Text>\n          </View>\n          <View style={styles.locationRow}>\n            <MaterialIcons name=\"flag\" size={16} color={Colors.primary} />\n            <Text style={styles.locationText} numberOfLines={1}>\n              To: {item.delivery_location}\n            </Text>\n          </View>\n        </View>\n\n        <View style={styles.detailsContainer}>\n          <Text style={styles.earningsText}>${item.earnings}</Text>\n          <Text style={styles.dateText}>\n            {new Date(item.pickup_date).toLocaleDateString()}\n          </Text>\n        </View>\n\n        <View style={styles.actionContainer}>\n          <TouchableOpacity\n            style={styles.mapButton}\n            onPress={() => openRouteMap(item.id)}\n          >\n            <MaterialIcons name=\"map\" size={16} color={Colors.primary} />\n            <Text style={styles.mapButtonText}>Route</Text>\n          </TouchableOpacity>\n\n          {statusAction && (\n            <TouchableOpacity\n              style={[\n                styles.actionButton,\n                { backgroundColor: statusAction.color },\n              ]}\n              onPress={statusAction.action}\n            >\n              <MaterialIcons\n                name={statusAction.icon as any}\n                size={16}\n                color={Colors.background}\n              />\n              <Text style={styles.actionButtonText}>{statusAction.label}</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={activeShipments}\n        renderItem={renderShipmentItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.listContainer}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={handleRefresh}\n            colors={[Colors.primary]}\n            tintColor={Colors.primary}\n          />\n        }\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={\n          <View style={styles.emptyContainer}>\n            <MaterialIcons\n              name=\"assignment\"\n              size={64}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.emptyTitle}>No Active Shipments</Text>\n            <Text style={styles.emptyText}>\n              Your assigned shipments will appear here.\n            </Text>\n          </View>\n        }\n      />\n    </View>\n  );\n}\n\n// Component for the Completed Shipments tab\nfunction CompletedShipmentsTab({ navigation }: any) {\n  const [completedShipments, setCompletedShipments] = useState<Shipment[]>([]);\n  const [refreshing, setRefreshing] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const { userProfile, session } = useAuth();\n\n  useEffect(() => {\n    fetchCompletedShipments();\n  }, []);\n\n  const fetchCompletedShipments = async () => {\n    if (!userProfile) return;\n\n    setLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('shipments')\n        .select(\n          `\n          *,\n          profiles:client_id(first_name, last_name)\n        `\n        )\n        .eq('driver_id', userProfile.id)\n        .in('status', ['delivered', 'completed'])\n        .order('updated_at', { ascending: false })\n        .limit(50); // Limit to recent completed shipments\n\n      if (error) throw error;\n\n      const transformedShipments: Shipment[] = data.map((shipment: any) => ({\n        id: shipment.id,\n        title: shipment.title || 'Delivery Service',\n        pickup_location: shipment.pickup_address || 'Unknown pickup',\n        delivery_location: shipment.delivery_address || 'Unknown delivery',\n        distance: shipment.distance || 0,\n        earnings: shipment.estimated_price || 0,\n        customer_name: shipment.profiles\n          ? `${shipment.profiles.first_name} ${shipment.profiles.last_name}`\n          : 'Unknown Customer',\n        status: shipment.status,\n        pickup_date: shipment.pickup_date || shipment.created_at,\n        created_at: shipment.created_at,\n      }));\n\n      setCompletedShipments(transformedShipments);\n    } catch (error) {\n      console.error('Error fetching completed shipments:', error);\n      Alert.alert('Error', 'Failed to load completed shipments.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    setRefreshing(true);\n    fetchCompletedShipments().finally(() => setRefreshing(false));\n  };\n\n  const viewShipmentDetails = (shipmentId: string) => {\n    navigation.navigate('ShipmentDetails_Driver', { shipmentId });\n  };\n\n  const renderShipmentItem = ({ item }: { item: Shipment }) => (\n    <TouchableOpacity\n      style={styles.shipmentCard}\n      onPress={() => viewShipmentDetails(item.id)}\n    >\n      <View style={styles.shipmentHeader}>\n        <Text style={styles.shipmentTitle}>{item.title}</Text>\n        <View\n          style={[\n            styles.statusBadge,\n            { backgroundColor: Colors.success + '20' },\n          ]}\n        >\n          <Text style={[styles.statusText, { color: Colors.success }]}>\n            COMPLETED\n          </Text>\n        </View>\n      </View>\n\n      <Text style={styles.customerName}>Customer: {item.customer_name}</Text>\n\n      <View style={styles.locationContainer}>\n        <View style={styles.locationRow}>\n          <MaterialIcons\n            name=\"location-on\"\n            size={16}\n            color={Colors.secondary}\n          />\n          <Text style={styles.locationText} numberOfLines={1}>\n            From: {item.pickup_location}\n          </Text>\n        </View>\n        <View style={styles.locationRow}>\n          <MaterialIcons name=\"flag\" size={16} color={Colors.primary} />\n          <Text style={styles.locationText} numberOfLines={1}>\n            To: {item.delivery_location}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.detailsContainer}>\n        <Text style={styles.earningsText}>${item.earnings}</Text>\n        <Text style={styles.dateText}>\n          Completed: {new Date(item.pickup_date).toLocaleDateString()}\n        </Text>\n      </View>\n    </TouchableOpacity>\n  );\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={completedShipments}\n        renderItem={renderShipmentItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.listContainer}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={handleRefresh}\n            colors={[Colors.primary]}\n            tintColor={Colors.primary}\n          />\n        }\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={\n          <View style={styles.emptyContainer}>\n            <MaterialIcons\n              name=\"history\"\n              size={64}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.emptyTitle}>No Completed Shipments</Text>\n            <Text style={styles.emptyText}>\n              Your completed deliveries will appear here.\n            </Text>\n          </View>\n        }\n      />\n    </View>\n  );\n}\n\n// Component for the Applications tab\nfunction ApplicationsTab({ navigation }: any) {\n  const [applications, setApplications] = useState<any[]>([]);\n  const [refreshing, setRefreshing] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const { userProfile, session } = useAuth();\n\n  useEffect(() => {\n    fetchApplications();\n  }, []);\n\n  const fetchApplications = async () => {\n    if (!userProfile) return;\n\n    setLoading(true);\n    try {\n      // Check if API URL is configured\n      const apiUrl = getApiUrl();\n      if (!apiUrl) {\n        throw new Error(\n          'API URL is not configured. Please check your environment variables.'\n        );\n      }\n\n      console.log('Fetching from:', `${apiUrl}/api/v1/drivers/applications`);\n\n      // Use the backend API to get driver applications\n      const response = await fetch(`${apiUrl}/api/v1/drivers/applications`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${session?.access_token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Handle response (even if it's not JSON)\n      let result;\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        result = await response.json();\n      } else {\n        const text = await response.text();\n        throw new Error(`Invalid response format: ${text}`);\n      }\n\n      if (response.ok && result.success) {\n        setApplications(result.data || []);\n      } else {\n        throw new Error(\n          result.error?.message ||\n            `Failed to fetch applications: ${response.status} ${response.statusText}`\n        );\n      }\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n      // More detailed error message\n      let errorMessage = 'Failed to load applications.';\n      if (error instanceof Error) {\n        if (error.message.includes('Network request failed')) {\n          errorMessage =\n            'Network request failed. Please check your internet connection and make sure the API server is running.';\n        } else {\n          errorMessage = `Error: ${error.message}`;\n        }\n      }\n      Alert.alert('Error Loading Applications', errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    setRefreshing(true);\n    fetchApplications().finally(() => setRefreshing(false));\n  };\n\n  const cancelApplication = async (applicationId: string) => {\n    try {\n      const apiUrl = getApiUrl();\n      const response = await fetch(\n        `${apiUrl}/api/v1/applications/${applicationId}/status`,\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${session?.access_token}`,\n          },\n          body: JSON.stringify({\n            status: 'cancelled',\n            notes: 'Cancelled by driver via mobile app',\n          }),\n        }\n      );\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        Alert.alert('Success', 'Application cancelled successfully.');\n        fetchApplications(); // Refresh the list\n      } else {\n        throw new Error(\n          result.error?.message || 'Failed to cancel application'\n        );\n      }\n    } catch (error) {\n      console.error('Error cancelling application:', error);\n      Alert.alert('Error', 'Failed to cancel application.');\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return Colors.warning;\n      case 'accepted':\n        return Colors.success;\n      case 'rejected':\n        return Colors.error;\n      case 'cancelled':\n        return Colors.text.secondary;\n      default:\n        return Colors.text.secondary;\n    }\n  };\n\n  const renderApplicationItem = ({ item }: { item: any }) => (\n    <View style={styles.shipmentCard}>\n      <View style={styles.shipmentHeader}>\n        <Text style={styles.shipmentTitle}>\n          {item.shipment_title || 'Delivery Service'}\n        </Text>\n        <View\n          style={[\n            styles.statusBadge,\n            { backgroundColor: getStatusColor(item.status) + '20' },\n          ]}\n        >\n          <Text\n            style={[styles.statusText, { color: getStatusColor(item.status) }]}\n          >\n            {item.status.toUpperCase()}\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.locationContainer}>\n        <View style={styles.locationRow}>\n          <MaterialIcons\n            name=\"location-on\"\n            size={16}\n            color={Colors.secondary}\n          />\n          <Text style={styles.locationText} numberOfLines={1}>\n            From: {item.shipment_pickup_address}\n          </Text>\n        </View>\n        <View style={styles.locationRow}>\n          <MaterialIcons name=\"flag\" size={16} color={Colors.primary} />\n          <Text style={styles.locationText} numberOfLines={1}>\n            To: {item.shipment_delivery_address}\n          </Text>\n        </View>\n      </View>\n\n      {item.notes && <Text style={styles.notesText}>Notes: {item.notes}</Text>}\n\n      <View style={styles.detailsContainer}>\n        <Text style={styles.earningsText}>\n          ${item.shipment_estimated_price}\n        </Text>\n        <Text style={styles.dateText}>\n          Applied: {new Date(item.applied_at).toLocaleDateString()}\n        </Text>\n      </View>\n\n      {item.status === 'pending' && (\n        <TouchableOpacity\n          style={styles.cancelButton}\n          onPress={() => cancelApplication(item.id)}\n        >\n          <MaterialIcons name=\"cancel\" size={16} color={Colors.error} />\n          <Text style={styles.cancelButtonText}>Cancel Application</Text>\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={applications}\n        renderItem={renderApplicationItem}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.listContainer}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={handleRefresh}\n            colors={[Colors.primary]}\n            tintColor={Colors.primary}\n          />\n        }\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={\n          <View style={styles.emptyContainer}>\n            <MaterialIcons\n              name=\"send\"\n              size={64}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.emptyTitle}>No Applications</Text>\n            <Text style={styles.emptyText}>\n              Your shipment applications will appear here.\n            </Text>\n          </View>\n        }\n      />\n    </View>\n  );\n}\n\n// Main component with tab navigation\nexport default function MyShipmentsScreen() {\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n      <Tab.Navigator\n        screenOptions={{\n          tabBarActiveTintColor: Colors.primary,\n          tabBarInactiveTintColor: Colors.text.secondary,\n          tabBarStyle: {\n            backgroundColor: Colors.background,\n            elevation: 0,\n            shadowOpacity: 0,\n            borderBottomWidth: 1,\n            borderBottomColor: Colors.border,\n          },\n          tabBarIndicatorStyle: {\n            backgroundColor: Colors.primary,\n            height: 3,\n          },\n          tabBarLabelStyle: {\n            fontSize: 12,\n            fontWeight: '600',\n            textTransform: 'none',\n          },\n        }}\n      >\n        <Tab.Screen\n          name=\"Active\"\n          component={ActiveShipmentsTab}\n          options={{ tabBarLabel: 'Active' }}\n        />\n        <Tab.Screen\n          name=\"Completed\"\n          component={CompletedShipmentsTab}\n          options={{ tabBarLabel: 'Completed' }}\n        />\n        <Tab.Screen\n          name=\"Applications\"\n          component={ApplicationsTab}\n          options={{ tabBarLabel: 'Applications' }}\n        />\n      </Tab.Navigator>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  listContainer: {\n    padding: 16,\n  },\n  shipmentCard: {\n    backgroundColor: Colors.background,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  shipmentHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  shipmentTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    flex: 1,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  statusText: {\n    fontSize: 10,\n    fontWeight: 'bold',\n  },\n  customerName: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 8,\n  },\n  locationContainer: {\n    marginBottom: 12,\n  },\n  locationRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 4,\n  },\n  locationText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 8,\n    flex: 1,\n  },\n  detailsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  earningsText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: Colors.success,\n  },\n  dateText: {\n    fontSize: 12,\n    color: Colors.text.secondary,\n  },\n  actionContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  mapButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 16,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n  },\n  mapButtonText: {\n    color: Colors.primary,\n    fontWeight: '600',\n    marginLeft: 4,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 16,\n  },\n  actionButtonText: {\n    color: Colors.background,\n    fontWeight: '600',\n    marginLeft: 4,\n  },\n  cancelButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 8,\n    marginTop: 8,\n  },\n  cancelButtonText: {\n    color: Colors.error,\n    fontWeight: '600',\n    marginLeft: 4,\n  },\n  notesText: {\n    fontSize: 12,\n    color: Colors.text.secondary,\n    fontStyle: 'italic',\n    marginBottom: 8,\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: 100,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    paddingHorizontal: 32,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/driver/RouteMapScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1076,1079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1076,1079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1103,1106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1103,1106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1125,1128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1125,1128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1266,1269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1266,1269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1719,1722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1719,1722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5692,5695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5692,5695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(0, 0, 0, 0.5)' }","line":612,"column":20,"nodeType":"ObjectExpression","endLine":623,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { shadowColor: '#000' }","line":633,"column":18,"nodeType":"ObjectExpression","endLine":646,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: 'rgba(255, 255, 255, 0.9)', shadowColor: '#000' }","line":709,"column":28,"nodeType":"ObjectExpression","endLine":725,"endColumn":4}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TouchableOpacity,\n  Dimensions,\n  ActivityIndicator,\n  Alert,\n  Switch,\n} from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport MapView, { Marker, Polyline, PROVIDER_GOOGLE } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport { Colors } from '../../constants/Colors';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\nimport { getCurrentLocation, getRoute } from '../../utils/maps';\nimport { realtimeService } from '../../services/RealtimeService';\n\nconst { width, height } = Dimensions.get('window');\n\n// Define a type for shipment data\ninterface ShipmentData {\n  id: string;\n  title?: string;\n  status: string;\n  driver_id?: string;\n  client_id?: string;\n  pickup_address?: string;\n  delivery_address?: string;\n  pickup_lat?: number;\n  pickup_lng?: number;\n  delivery_lat?: number;\n  delivery_lng?: number;\n  pickup_location?: any;\n  delivery_location?: any;\n  [key: string]: any; // For other properties\n}\n\ninterface RouteMapScreenProps {\n  route: {\n    params: {\n      shipmentId: string;\n    };\n  };\n  navigation: any;\n}\n\nexport default function RouteMapScreen({\n  route,\n  navigation,\n}: RouteMapScreenProps) {\n  const { shipmentId } = route.params;\n  const { userProfile } = useAuth();\n\n  const [loading, setLoading] = useState(true);\n  const [shipment, setShipment] = useState<ShipmentData | null>(null);\n  const [currentLocation, setCurrentLocation] =\n    useState<Location.LocationObject | null>(null);\n  const [routeCoordinates, setRouteCoordinates] = useState<any[]>([]);\n  const [routeInfo, setRouteInfo] = useState<{\n    distance: string;\n    duration: string;\n  } | null>(null);\n  const [locationTrackingEnabled, setLocationTrackingEnabled] = useState(false);\n  const [isLocationPermissionGranted, setIsLocationPermissionGranted] =\n    useState(false);\n\n  const mapRef = useRef<MapView>(null);\n  const locationWatchId = useRef<Location.LocationSubscription | null>(null);\n\n  useEffect(() => {\n    fetchShipmentDetails();\n    checkLocationPermission();\n\n    return () => {\n      // Clean up location subscription\n      if (locationWatchId.current) {\n        locationWatchId.current.remove();\n      }\n\n      // Stop location tracking when component unmounts\n      realtimeService.stopLocationTracking();\n    };\n  }, [shipmentId]);\n\n  const checkLocationPermission = async () => {\n    const { status } = await Location.getForegroundPermissionsAsync();\n    setIsLocationPermissionGranted(status === 'granted');\n  };\n\n  const fetchShipmentDetails = async () => {\n    try {\n      setLoading(true);\n\n      const { data, error } = await supabase\n        .from('shipments')\n        .select('*')\n        .eq('id', shipmentId)\n        .single();\n\n      if (error) throw error;\n\n      setShipment(data);\n\n      // Get current location\n      const location = await getCurrentLocation();\n      if (location) {\n        setCurrentLocation(location);\n\n        // Generate route if we have pickup/delivery coordinates\n        if (data.pickup_location && data.delivery_location) {\n          // Extract coordinates from location objects\n          const pickupCoords = extractCoordinates(data.pickup_location);\n          const deliveryCoords = extractCoordinates(data.delivery_location);\n\n          if (pickupCoords && deliveryCoords) {\n            // For shipments that are already picked up, route from current location to delivery\n            if (data.status === 'picked_up' || data.status === 'in_transit') {\n              calculateRoute(\n                location.coords.latitude,\n                location.coords.longitude,\n                deliveryCoords.latitude,\n                deliveryCoords.longitude\n              );\n            } else {\n              // For shipments not yet picked up, route from current location to pickup\n              calculateRoute(\n                location.coords.latitude,\n                location.coords.longitude,\n                pickupCoords.latitude,\n                pickupCoords.longitude\n              );\n            }\n          }\n        }\n      }\n\n      // Auto-enable location tracking for in-transit shipments\n      if (\n        (data.status === 'picked_up' || data.status === 'in_transit') &&\n        data.driver_id === userProfile?.id\n      ) {\n        toggleLocationTracking(true);\n      }\n    } catch (error) {\n      console.error('Error fetching shipment details:', error);\n      Alert.alert('Error', 'Failed to load shipment details.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleLocationTracking = async (enabled: boolean) => {\n    setLocationTrackingEnabled(enabled);\n\n    if (enabled) {\n      // Start tracking location\n      startLocationTracking();\n\n      // Start sending location updates to database if we're the driver\n      if (shipment && userProfile && shipment.driver_id === userProfile.id) {\n        realtimeService.startLocationTracking(\n          shipment.id,\n          userProfile.id,\n          () => {\n            Alert.alert(\n              'Permission Required',\n              'Location permission is needed to track your position during delivery.'\n            );\n            setLocationTrackingEnabled(false);\n          }\n        );\n      }\n    } else {\n      // Stop location tracking\n      if (locationWatchId.current) {\n        locationWatchId.current.remove();\n        locationWatchId.current = null;\n      }\n\n      // Stop sending location updates\n      realtimeService.stopLocationTracking();\n    }\n  };\n\n  const extractCoordinates = (locationObject: any) => {\n    if (!locationObject) return null;\n\n    try {\n      // Handle different possible formats of location data\n      if (typeof locationObject === 'string') {\n        // Try to parse JSON string\n        const parsed = JSON.parse(locationObject);\n        if (parsed.lat !== undefined && parsed.lng !== undefined) {\n          return { latitude: parsed.lat, longitude: parsed.lng };\n        }\n        if (parsed.latitude !== undefined && parsed.longitude !== undefined) {\n          return { latitude: parsed.latitude, longitude: parsed.longitude };\n        }\n      } else if (typeof locationObject === 'object') {\n        // Handle object format\n        if (\n          locationObject.lat !== undefined &&\n          locationObject.lng !== undefined\n        ) {\n          return {\n            latitude: locationObject.lat,\n            longitude: locationObject.lng,\n          };\n        }\n        if (\n          locationObject.latitude !== undefined &&\n          locationObject.longitude !== undefined\n        ) {\n          return {\n            latitude: locationObject.latitude,\n            longitude: locationObject.longitude,\n          };\n        }\n        // Handle PostGIS point format (assuming it's stored in coordinates property)\n        if (\n          locationObject.coordinates &&\n          Array.isArray(locationObject.coordinates) &&\n          locationObject.coordinates.length === 2\n        ) {\n          // PostGIS typically stores as [longitude, latitude]\n          return {\n            latitude: locationObject.coordinates[1],\n            longitude: locationObject.coordinates[0],\n          };\n        }\n      }\n    } catch (e) {\n      console.error('Error parsing location:', e);\n    }\n\n    return null;\n  };\n\n  const startLocationTracking = async () => {\n    try {\n      // Request location permissions if not already granted\n      if (!isLocationPermissionGranted) {\n        const { status } = await Location.requestForegroundPermissionsAsync();\n        if (status !== 'granted') {\n          Alert.alert(\n            'Permission Required',\n            'Location permission is needed to track your position during delivery.'\n          );\n          setLocationTrackingEnabled(false);\n          return;\n        }\n        setIsLocationPermissionGranted(true);\n      }\n\n      // Get initial location\n      const location = await Location.getCurrentPositionAsync({\n        accuracy: Location.Accuracy.High,\n      });\n\n      setCurrentLocation(location);\n\n      // Set up location tracking\n      locationWatchId.current = await Location.watchPositionAsync(\n        {\n          accuracy: Location.Accuracy.High,\n          distanceInterval: 10, // Update every 10 meters\n        },\n        newLocation => {\n          setCurrentLocation(newLocation);\n\n          // Update route if needed\n          if (\n            shipment &&\n            (shipment.status === 'picked_up' ||\n              shipment.status === 'in_transit')\n          ) {\n            if (\n              shipment.delivery_lat !== undefined &&\n              shipment.delivery_lng !== undefined\n            ) {\n              calculateRoute(\n                newLocation.coords.latitude,\n                newLocation.coords.longitude,\n                shipment.delivery_lat,\n                shipment.delivery_lng\n              );\n            } else if (shipment.delivery_location) {\n              const deliveryCoords = extractCoordinates(\n                shipment.delivery_location\n              );\n              if (deliveryCoords) {\n                calculateRoute(\n                  newLocation.coords.latitude,\n                  newLocation.coords.longitude,\n                  deliveryCoords.latitude,\n                  deliveryCoords.longitude\n                );\n              }\n            }\n          } else if (shipment) {\n            if (\n              shipment.pickup_lat !== undefined &&\n              shipment.pickup_lng !== undefined\n            ) {\n              calculateRoute(\n                newLocation.coords.latitude,\n                newLocation.coords.longitude,\n                shipment.pickup_lat,\n                shipment.pickup_lng\n              );\n            } else if (shipment.pickup_location) {\n              const pickupCoords = extractCoordinates(shipment.pickup_location);\n              if (pickupCoords) {\n                calculateRoute(\n                  newLocation.coords.latitude,\n                  newLocation.coords.longitude,\n                  pickupCoords.latitude,\n                  pickupCoords.longitude\n                );\n              }\n            }\n          }\n        }\n      );\n    } catch (error) {\n      console.error('Error tracking location:', error);\n    }\n  };\n\n  const calculateRoute = async (\n    startLat: number,\n    startLng: number,\n    endLat: number,\n    endLng: number\n  ) => {\n    try {\n      const routeData = await getRoute(startLat, startLng, endLat, endLng);\n\n      // Generate a simple route for now\n      const steps = routeData.steps || [];\n      const coords = [];\n\n      // Add starting point\n      coords.push({\n        latitude: startLat,\n        longitude: startLng,\n      });\n\n      // Add intermediate points\n      for (const step of steps) {\n        if (step.end_location) {\n          coords.push({\n            latitude: step.end_location.lat,\n            longitude: step.end_location.lng,\n          });\n        }\n      }\n\n      // Add ending point\n      coords.push({\n        latitude: endLat,\n        longitude: endLng,\n      });\n\n      setRouteCoordinates(coords);\n\n      // Set route info\n      setRouteInfo({\n        distance: routeData.distance?.text || 'Unknown',\n        duration: routeData.duration?.text || 'Unknown',\n      });\n\n      // Fit map to show all coordinates\n      if (mapRef.current && coords.length > 0) {\n        mapRef.current.fitToCoordinates(coords, {\n          edgePadding: { top: 50, right: 50, bottom: 50, left: 50 },\n          animated: true,\n        });\n      }\n    } catch (error) {\n      console.error('Error calculating route:', error);\n      Alert.alert('Route Error', 'Failed to calculate route.');\n    }\n  };\n\n  const renderDestinationMarker = () => {\n    if (!shipment) return null;\n\n    // For shipments that are already picked up, show delivery location\n    if (shipment.status === 'picked_up' || shipment.status === 'in_transit') {\n      // Try to get delivery coordinates either from direct lat/lng fields or from location object\n      let deliveryCoords;\n\n      if (\n        shipment.delivery_lat !== undefined &&\n        shipment.delivery_lng !== undefined\n      ) {\n        deliveryCoords = {\n          latitude: shipment.delivery_lat,\n          longitude: shipment.delivery_lng,\n        };\n      } else if (shipment.delivery_location) {\n        deliveryCoords = extractCoordinates(shipment.delivery_location);\n      }\n\n      if (deliveryCoords) {\n        return (\n          <Marker\n            coordinate={deliveryCoords}\n            title=\"Delivery Location\"\n            description={shipment.delivery_address}\n          >\n            <MaterialIcons name=\"flag\" size={30} color={Colors.secondary} />\n          </Marker>\n        );\n      }\n    } else {\n      // For shipments not yet picked up, show pickup location\n      let pickupCoords;\n\n      if (\n        shipment.pickup_lat !== undefined &&\n        shipment.pickup_lng !== undefined\n      ) {\n        pickupCoords = {\n          latitude: shipment.pickup_lat,\n          longitude: shipment.pickup_lng,\n        };\n      } else if (shipment.pickup_location) {\n        pickupCoords = extractCoordinates(shipment.pickup_location);\n      }\n\n      if (pickupCoords) {\n        return (\n          <Marker\n            coordinate={pickupCoords}\n            title=\"Pickup Location\"\n            description={shipment.pickup_address}\n          >\n            <MaterialIcons\n              name=\"location-on\"\n              size={30}\n              color={Colors.primary}\n            />\n          </Marker>\n        );\n      }\n    }\n\n    return null;\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading route map...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n\n      <MapView\n        ref={mapRef}\n        style={styles.map}\n        provider={PROVIDER_GOOGLE}\n        showsUserLocation\n        showsMyLocationButton\n        followsUserLocation\n        initialRegion={\n          currentLocation\n            ? {\n                latitude: currentLocation.coords.latitude,\n                longitude: currentLocation.coords.longitude,\n                latitudeDelta: 0.05,\n                longitudeDelta: 0.05,\n              }\n            : undefined\n        }\n      >\n        {/* Current Location Marker */}\n        {currentLocation && (\n          <Marker\n            coordinate={{\n              latitude: currentLocation.coords.latitude,\n              longitude: currentLocation.coords.longitude,\n            }}\n            title=\"Current Location\"\n          >\n            <View style={styles.currentLocationMarker}>\n              <MaterialIcons\n                name=\"my-location\"\n                size={20}\n                color={Colors.text.inverse}\n              />\n            </View>\n          </Marker>\n        )}\n\n        {/* Destination Marker */}\n        {renderDestinationMarker()}\n\n        {/* Route Line */}\n        {routeCoordinates.length > 1 && (\n          <Polyline\n            coordinates={routeCoordinates}\n            strokeColor={Colors.primary}\n            strokeWidth={4}\n          />\n        )}\n      </MapView>\n\n      {/* Header */}\n      <View style={styles.headerContainer}>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n        >\n          <MaterialIcons\n            name=\"arrow-back\"\n            size={24}\n            color={Colors.text.inverse}\n          />\n        </TouchableOpacity>\n        <Text style={styles.headerTitle}>\n          {shipment\n            ? shipment.title || `Shipment #${shipment.id.substring(0, 8)}`\n            : 'Route Map'}\n        </Text>\n      </View>\n\n      {/* Location Tracking Toggle - Only show for drivers */}\n      {shipment && userProfile && shipment.driver_id === userProfile.id && (\n        <View style={styles.trackingToggleContainer}>\n          <Text style={styles.trackingToggleLabel}>\n            Location Tracking {locationTrackingEnabled ? 'On' : 'Off'}\n          </Text>\n          <Switch\n            value={locationTrackingEnabled}\n            onValueChange={toggleLocationTracking}\n            trackColor={{ false: '#767577', true: Colors.primary + '80' }}\n            thumbColor={locationTrackingEnabled ? Colors.primary : '#f4f3f4'}\n          />\n        </View>\n      )}\n\n      {/* Route Info Card */}\n      {routeInfo && (\n        <View style={styles.routeInfoCard}>\n          <View style={styles.routeInfoHeader}>\n            <MaterialIcons name=\"directions\" size={24} color={Colors.primary} />\n            <Text style={styles.routeInfoTitle}>Route Information</Text>\n          </View>\n\n          <View style={styles.routeDetails}>\n            <View style={styles.routeDetailItem}>\n              <MaterialIcons\n                name=\"straighten\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.routeDetailLabel}>Distance:</Text>\n              <Text style={styles.routeDetailValue}>{routeInfo.distance}</Text>\n            </View>\n\n            <View style={styles.routeDetailItem}>\n              <MaterialIcons\n                name=\"schedule\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.routeDetailLabel}>Estimated Time:</Text>\n              <Text style={styles.routeDetailValue}>{routeInfo.duration}</Text>\n            </View>\n          </View>\n\n          <TouchableOpacity\n            style={styles.startNavigationButton}\n            onPress={() => {\n              // This would typically open external navigation app\n              Alert.alert('Navigation', 'Opening external navigation app...');\n            }}\n          >\n            <MaterialIcons\n              name=\"navigation\"\n              size={16}\n              color={Colors.text.inverse}\n            />\n            <Text style={styles.startNavigationText}>Start Navigation</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  map: {\n    width,\n    height,\n  },\n  headerContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 16,\n  },\n  backButton: {\n    padding: 8,\n    marginRight: 16,\n  },\n  headerTitle: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: Colors.text.inverse,\n  },\n  routeInfoCard: {\n    position: 'absolute',\n    bottom: 24,\n    left: 16,\n    right: 16,\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 16,\n    elevation: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n  },\n  routeInfoHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  routeInfoTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginLeft: 8,\n  },\n  routeDetails: {\n    marginBottom: 16,\n  },\n  routeDetailItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  routeDetailLabel: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 8,\n    marginRight: 8,\n    width: 100,\n  },\n  routeDetailValue: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text.primary,\n  },\n  startNavigationButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 8,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n  },\n  startNavigationText: {\n    color: Colors.text.inverse,\n    fontWeight: '600',\n    fontSize: 14,\n    marginLeft: 8,\n  },\n  currentLocationMarker: {\n    backgroundColor: Colors.primary,\n    borderRadius: 20,\n    padding: 6,\n    borderWidth: 2,\n    borderColor: Colors.text.inverse,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.text.primary,\n  },\n  trackingToggleContainer: {\n    position: 'absolute',\n    top: 120,\n    right: 16,\n    backgroundColor: 'rgba(255, 255, 255, 0.9)',\n    borderRadius: 8,\n    padding: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    width: 200,\n  },\n  trackingToggleLabel: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    fontWeight: '500',\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/driver/ShipmentDetailsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Location' is defined but never used.","line":14,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1268,1271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1268,1271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":589,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":589,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18598,18601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18598,18601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n  ActivityIndicator,\n  Linking,\n} from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { StatusBar } from 'expo-status-bar';\nimport * as Location from 'expo-location';\nimport { Colors } from '../../constants/Colors';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\nimport { RealtimeChannel } from '@supabase/supabase-js';\nimport { realtimeService } from '../../services/RealtimeService';\n\ninterface ShipmentDetails {\n  id: string;\n  title: string;\n  status: string;\n  client_id: string;\n  client_name: string;\n  client_phone: string;\n  pickup_address: string;\n  pickup_city: string;\n  pickup_state: string;\n  pickup_zip: string;\n  pickup_date: string;\n  pickup_notes: string;\n  delivery_address: string;\n  delivery_city: string;\n  delivery_state: string;\n  delivery_zip: string;\n  delivery_date: string;\n  delivery_notes: string;\n  distance: number;\n  price: number;\n  vehicle_type: string;\n  cargo_type: string;\n  weight: number;\n  dimensions: string;\n  created_at: string;\n}\n\nexport default function ShipmentDetailsScreen({ route, navigation }: any) {\n  const { shipmentId } = route.params;\n  const [shipment, setShipment] = useState<ShipmentDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [statusUpdating, setStatusUpdating] = useState(false);\n  const { userProfile } = useAuth();\n  const realtimeChannelRef = useRef<RealtimeChannel | null>(null);\n\n  useEffect(() => {\n    fetchShipmentDetails();\n\n    // Set up real-time subscription\n    if (shipmentId && userProfile) {\n      setupRealtimeSubscription();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (realtimeChannelRef.current) {\n        realtimeService.unsubscribeFromShipment(shipmentId);\n        realtimeChannelRef.current = null;\n      }\n    };\n  }, [shipmentId, userProfile?.id]);\n\n  const setupRealtimeSubscription = () => {\n    // Subscribe to real-time updates for this shipment\n    realtimeChannelRef.current = realtimeService.subscribeToShipment(\n      shipmentId,\n      // Shipment update handler\n      updatedShipment => {\n        console.log('Received real-time shipment update:', updatedShipment);\n\n        // Transform data to match our expected format\n        if (updatedShipment && shipment) {\n          const transformedShipment: ShipmentDetails = {\n            ...shipment,\n            status: updatedShipment.status,\n            // Update other fields as needed\n          };\n\n          setShipment(transformedShipment);\n        } else {\n          // If we don't have the shipment yet, fetch it\n          fetchShipmentDetails();\n        }\n      },\n      // New message handler (not needed in this screen)\n      () => {},\n      // Tracking event handler (not needed in this screen)\n      () => {}\n    );\n  };\n\n  const fetchShipmentDetails = async () => {\n    try {\n      setLoading(true);\n\n      const { data, error } = await supabase\n        .from('shipments')\n        .select(\n          `\n          *,\n          profiles:client_id(first_name, last_name, phone)\n        `\n        )\n        .eq('id', shipmentId)\n        .single();\n\n      if (error) throw error;\n\n      // Transform data\n      const transformedShipment: ShipmentDetails = {\n        id: data.id,\n        title: data.title || 'Delivery Service',\n        status: data.status,\n        client_id: data.client_id,\n        client_name: data.profiles\n          ? `${data.profiles.first_name} ${data.profiles.last_name}`\n          : 'Unknown Customer',\n        client_phone: data.profiles?.phone || '',\n        pickup_address: data.pickup_address || '',\n        pickup_city: data.pickup_city || '',\n        pickup_state: data.pickup_state || '',\n        pickup_zip: data.pickup_zip || '',\n        pickup_date: data.pickup_date || data.created_at,\n        pickup_notes: data.pickup_notes || '',\n        delivery_address: data.delivery_address || '',\n        delivery_city: data.delivery_city || '',\n        delivery_state: data.delivery_state || '',\n        delivery_zip: data.delivery_zip || '',\n        delivery_date: data.delivery_date || '',\n        delivery_notes: data.delivery_notes || '',\n        distance: data.distance || 0,\n        price: data.estimated_price || 0,\n        vehicle_type: data.vehicle_type || 'Any',\n        cargo_type: data.cargo_type || 'General',\n        weight: data.weight || 0,\n        dimensions: data.dimensions || '',\n        created_at: data.created_at,\n      };\n\n      setShipment(transformedShipment);\n    } catch (error) {\n      console.error('Error fetching shipment details:', error);\n      Alert.alert('Error', 'Failed to load shipment details.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateShipmentStatus = async (newStatus: string) => {\n    if (!shipment) return;\n\n    setStatusUpdating(true);\n    try {\n      // Import NetworkUtil on-demand\n      const NetworkUtil = (await import('../../utils/NetworkUtil')).default;\n\n      // Check for internet connection first\n      const isConnected = await NetworkUtil.isConnected();\n      if (!isConnected) {\n        Alert.alert(\n          'No Internet Connection',\n          'Please check your internet connection and try again.'\n        );\n        setStatusUpdating(false);\n        return;\n      }\n\n      // Validate status against schema\n      const validStatuses = [\n        'pending',\n        'accepted',\n        'assigned',\n        'in_transit',\n        'in_progress',\n        'delivered',\n        'completed',\n        'cancelled',\n      ];\n      if (!validStatuses.includes(newStatus)) {\n        Alert.alert(\n          'Error',\n          `Invalid status: ${newStatus}. Please contact support.`\n        );\n        setStatusUpdating(false);\n        return;\n      }\n\n      const { error } = await supabase\n        .from('shipments')\n        .update({\n          status: newStatus,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', shipment.id);\n\n      if (error) {\n        if (error.message.includes('invalid input value for enum')) {\n          Alert.alert(\n            'Error',\n            'The status value is not valid. Please contact support about this database issue.',\n            [{ text: 'OK' }]\n          );\n        } else {\n          throw error;\n        }\n        return;\n      }\n\n      // Start location tracking if status is in_transit\n      if (newStatus === 'in_transit' && userProfile) {\n        realtimeService.startLocationTracking(shipment.id, userProfile.id, () =>\n          Alert.alert(\n            'Location Permission',\n            'Location permission is required to track delivery progress.'\n          )\n        );\n      }\n\n      // Stop location tracking if delivered\n      if (\n        newStatus === 'delivered' ||\n        newStatus === 'completed' ||\n        newStatus === 'cancelled'\n      ) {\n        realtimeService.stopLocationTracking();\n      }\n\n      // Local state will be updated via real-time subscription\n      Alert.alert('Success', `Shipment status updated to ${newStatus}`);\n    } catch (error) {\n      console.error('Error updating shipment status:', error);\n      Alert.alert(\n        'Error',\n        'Failed to update shipment status. Please check your connection and try again.'\n      );\n    } finally {\n      setStatusUpdating(false);\n    }\n  };\n\n  const openNavigationApp = (address: string) => {\n    const encodedAddress = encodeURIComponent(address);\n    const url = `https://maps.google.com/maps?q=${encodedAddress}`;\n    Linking.openURL(url);\n  };\n\n  const callCustomer = () => {\n    if (shipment?.client_phone) {\n      Linking.openURL(`tel:${shipment.client_phone}`);\n    } else {\n      Alert.alert('No Phone Number', 'Customer phone number is not available.');\n    }\n  };\n\n  const openRouteMap = () => {\n    if (shipment) {\n      navigation.navigate('RouteMap', { shipmentId: shipment.id });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return Colors.warning;\n      case 'assigned':\n        return Colors.info;\n      case 'picked_up':\n        return Colors.secondary;\n      case 'in_transit':\n        return Colors.primary;\n      case 'delivered':\n        return Colors.success;\n      case 'completed':\n        return Colors.success;\n      default:\n        return Colors.text.secondary;\n    }\n  };\n\n  const getNextStatusAction = () => {\n    if (!shipment) return null;\n\n    switch (shipment.status) {\n      case 'assigned':\n        return {\n          label: 'Mark as Picked Up',\n          status: 'picked_up',\n          icon: 'check-circle',\n          color: Colors.success,\n        };\n      case 'picked_up':\n        return {\n          label: 'Start Transit',\n          status: 'in_transit',\n          icon: 'local-shipping',\n          color: Colors.secondary,\n        };\n      case 'in_transit':\n        return {\n          label: 'Mark as Delivered',\n          status: 'delivered',\n          icon: 'flag',\n          color: Colors.primary,\n        };\n      default:\n        return null;\n    }\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading shipment details...</Text>\n      </View>\n    );\n  }\n\n  if (!shipment) {\n    return (\n      <View style={styles.errorContainer}>\n        <MaterialIcons name=\"error-outline\" size={64} color={Colors.error} />\n        <Text style={styles.errorTitle}>Shipment Not Found</Text>\n        <Text style={styles.errorText}>\n          The requested shipment could not be loaded.\n        </Text>\n        <TouchableOpacity\n          style={styles.retryButton}\n          onPress={fetchShipmentDetails}\n        >\n          <Text style={styles.retryButtonText}>Retry</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  const nextAction = getNextStatusAction();\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      <ScrollView\n        style={styles.scrollView}\n        showsVerticalScrollIndicator={false}\n      >\n        {/* Header */}\n        <View style={styles.header}>\n          <Text style={styles.shipmentTitle}>{shipment.title}</Text>\n          <View\n            style={[\n              styles.statusBadge,\n              { backgroundColor: getStatusColor(shipment.status) + '20' },\n            ]}\n          >\n            <Text\n              style={[\n                styles.statusText,\n                { color: getStatusColor(shipment.status) },\n              ]}\n            >\n              {shipment.status.replace('_', ' ').toUpperCase()}\n            </Text>\n          </View>\n        </View>\n\n        {/* Customer Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Customer Information</Text>\n          <View style={styles.infoRow}>\n            <MaterialIcons name=\"person\" size={20} color={Colors.primary} />\n            <Text style={styles.infoText}>{shipment.client_name}</Text>\n          </View>\n          {shipment.client_phone && (\n            <TouchableOpacity style={styles.infoRow} onPress={callCustomer}>\n              <MaterialIcons name=\"phone\" size={20} color={Colors.success} />\n              <Text style={[styles.infoText, styles.phoneText]}>\n                {shipment.client_phone}\n              </Text>\n              <MaterialIcons name=\"call\" size={16} color={Colors.success} />\n            </TouchableOpacity>\n          )}\n        </View>\n\n        {/* Pickup Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Pickup Details</Text>\n          <TouchableOpacity\n            style={styles.addressContainer}\n            onPress={() => openNavigationApp(shipment.pickup_address)}\n          >\n            <View style={styles.addressHeader}>\n              <MaterialIcons\n                name=\"location-on\"\n                size={20}\n                color={Colors.secondary}\n              />\n              <Text style={styles.addressTitle}>Pickup Location</Text>\n              <MaterialIcons\n                name=\"directions\"\n                size={16}\n                color={Colors.primary}\n              />\n            </View>\n            <Text style={styles.addressText}>{shipment.pickup_address}</Text>\n            {(shipment.pickup_city ||\n              shipment.pickup_state ||\n              shipment.pickup_zip) && (\n              <Text style={styles.addressText}>\n                {`${shipment.pickup_city}, ${shipment.pickup_state} ${shipment.pickup_zip}`.trim()}\n              </Text>\n            )}\n          </TouchableOpacity>\n\n          <View style={styles.infoRow}>\n            <MaterialIcons name=\"schedule\" size={20} color={Colors.warning} />\n            <Text style={styles.infoText}>\n              {new Date(shipment.pickup_date).toLocaleDateString()} at{' '}\n              {new Date(shipment.pickup_date).toLocaleTimeString()}\n            </Text>\n          </View>\n\n          {shipment.pickup_notes && (\n            <View style={styles.notesContainer}>\n              <MaterialIcons\n                name=\"note\"\n                size={16}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.notesText}>{shipment.pickup_notes}</Text>\n            </View>\n          )}\n        </View>\n\n        {/* Delivery Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Delivery Details</Text>\n          <TouchableOpacity\n            style={styles.addressContainer}\n            onPress={() => openNavigationApp(shipment.delivery_address)}\n          >\n            <View style={styles.addressHeader}>\n              <MaterialIcons name=\"flag\" size={20} color={Colors.primary} />\n              <Text style={styles.addressTitle}>Delivery Location</Text>\n              <MaterialIcons\n                name=\"directions\"\n                size={16}\n                color={Colors.primary}\n              />\n            </View>\n            <Text style={styles.addressText}>{shipment.delivery_address}</Text>\n            {(shipment.delivery_city ||\n              shipment.delivery_state ||\n              shipment.delivery_zip) && (\n              <Text style={styles.addressText}>\n                {`${shipment.delivery_city}, ${shipment.delivery_state} ${shipment.delivery_zip}`.trim()}\n              </Text>\n            )}\n          </TouchableOpacity>\n\n          {shipment.delivery_date && (\n            <View style={styles.infoRow}>\n              <MaterialIcons name=\"schedule\" size={20} color={Colors.warning} />\n              <Text style={styles.infoText}>\n                Expected:{' '}\n                {new Date(shipment.delivery_date).toLocaleDateString()} at{' '}\n                {new Date(shipment.delivery_date).toLocaleTimeString()}\n              </Text>\n            </View>\n          )}\n\n          {shipment.delivery_notes && (\n            <View style={styles.notesContainer}>\n              <MaterialIcons\n                name=\"note\"\n                size={16}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.notesText}>{shipment.delivery_notes}</Text>\n            </View>\n          )}\n        </View>\n\n        {/* Shipment Details */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Shipment Details</Text>\n\n          <View style={styles.detailsGrid}>\n            <View style={styles.detailItem}>\n              <MaterialIcons\n                name=\"attach-money\"\n                size={20}\n                color={Colors.success}\n              />\n              <Text style={styles.detailLabel}>Earnings</Text>\n              <Text style={styles.detailValue}>${shipment.price}</Text>\n            </View>\n\n            {shipment.distance > 0 && (\n              <View style={styles.detailItem}>\n                <MaterialIcons\n                  name=\"straighten\"\n                  size={20}\n                  color={Colors.info}\n                />\n                <Text style={styles.detailLabel}>Distance</Text>\n                <Text style={styles.detailValue}>\n                  {shipment.distance.toFixed(1)} mi\n                </Text>\n              </View>\n            )}\n\n            <View style={styles.detailItem}>\n              <MaterialIcons\n                name=\"directions-car\"\n                size={20}\n                color={Colors.secondary}\n              />\n              <Text style={styles.detailLabel}>Vehicle</Text>\n              <Text style={styles.detailValue}>{shipment.vehicle_type}</Text>\n            </View>\n\n            <View style={styles.detailItem}>\n              <MaterialIcons\n                name=\"inventory\"\n                size={20}\n                color={Colors.primary}\n              />\n              <Text style={styles.detailLabel}>Cargo</Text>\n              <Text style={styles.detailValue}>{shipment.cargo_type}</Text>\n            </View>\n          </View>\n\n          {shipment.weight > 0 && (\n            <View style={styles.infoRow}>\n              <MaterialIcons\n                name=\"fitness-center\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.infoText}>Weight: {shipment.weight} lbs</Text>\n            </View>\n          )}\n\n          {shipment.dimensions && (\n            <View style={styles.infoRow}>\n              <MaterialIcons\n                name=\"square-foot\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.infoText}>\n                Dimensions: {shipment.dimensions}\n              </Text>\n            </View>\n          )}\n        </View>\n      </ScrollView>\n\n      {/* Action Buttons */}\n      <View style={styles.actionContainer}>\n        <TouchableOpacity style={styles.mapButton} onPress={openRouteMap}>\n          <MaterialIcons name=\"map\" size={20} color={Colors.primary} />\n          <Text style={styles.mapButtonText}>View Route</Text>\n        </TouchableOpacity>\n\n        {nextAction && (\n          <TouchableOpacity\n            style={[styles.statusButton, { backgroundColor: nextAction.color }]}\n            onPress={() => updateShipmentStatus(nextAction.status)}\n            disabled={statusUpdating}\n          >\n            {statusUpdating ? (\n              <ActivityIndicator size=\"small\" color={Colors.background} />\n            ) : (\n              <>\n                <MaterialIcons\n                  name={nextAction.icon as any}\n                  size={20}\n                  color={Colors.background}\n                />\n                <Text style={styles.statusButtonText}>{nextAction.label}</Text>\n              </>\n            )}\n          </TouchableOpacity>\n        )}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.text.secondary,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 32,\n  },\n  errorTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  errorText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  retryButton: {\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    color: Colors.background,\n    fontWeight: '600',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    backgroundColor: Colors.background,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  shipmentTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: Colors.text.primary,\n    flex: 1,\n  },\n  statusBadge: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  section: {\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 16,\n  },\n  infoRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  infoText: {\n    fontSize: 16,\n    color: Colors.text.primary,\n    marginLeft: 12,\n    flex: 1,\n  },\n  phoneText: {\n    color: Colors.success,\n  },\n  addressContainer: {\n    backgroundColor: Colors.surface,\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 12,\n  },\n  addressHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  addressTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginLeft: 8,\n    flex: 1,\n  },\n  addressText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    lineHeight: 20,\n  },\n  notesContainer: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    backgroundColor: Colors.surface,\n    borderRadius: 8,\n    padding: 12,\n    marginTop: 8,\n  },\n  notesText: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 8,\n    flex: 1,\n    fontStyle: 'italic',\n  },\n  detailsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  detailItem: {\n    width: '48%',\n    backgroundColor: Colors.surface,\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 8,\n    alignItems: 'center',\n  },\n  detailLabel: {\n    fontSize: 12,\n    color: Colors.text.secondary,\n    marginTop: 4,\n    marginBottom: 2,\n  },\n  detailValue: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n  },\n  actionContainer: {\n    flexDirection: 'row',\n    padding: 20,\n    backgroundColor: Colors.background,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  mapButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    marginRight: 8,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n  },\n  mapButtonText: {\n    color: Colors.primary,\n    fontWeight: '600',\n    marginLeft: 8,\n  },\n  statusButton: {\n    flex: 2,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    marginLeft: 8,\n    borderRadius: 8,\n  },\n  statusButtonText: {\n    color: Colors.background,\n    fontWeight: '600',\n    marginLeft: 8,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/home/HomeScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Image' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BorderRadius' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4458,4461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4458,4461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":202,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5991,5994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5991,5994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  Image,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport {\n  Colors,\n  Typography,\n  Spacing,\n  BorderRadius,\n} from '../../constants/DesignSystem';\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { ClientTabParamList } from '../../navigation/types';\nimport { useAuth } from '../../context/AuthContext';\n\ntype HomeScreenProps = NativeStackScreenProps<ClientTabParamList, 'Home'>;\n\nexport default function HomeScreen({ navigation }: HomeScreenProps) {\n  const { userProfile } = useAuth();\n\n  const getUserInitial = () => {\n    if (userProfile?.first_name) {\n      return userProfile.first_name.charAt(0).toUpperCase();\n    }\n    return 'C';\n  };\n\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return 'Good morning';\n    if (hour < 18) return 'Good afternoon';\n    return 'Good evening';\n  };\n\n  const handleCreateShipment = () => {\n    // Navigate to parent stack navigator to access CreateShipment screen\n    navigation.getParent()?.navigate('CreateShipment');\n  };\n\n  const handleTrackShipment = () => {\n    navigation.navigate('Shipments');\n  };\n\n  const quickStats = [\n    {\n      label: 'Active Shipments',\n      value: '2',\n      icon: 'local-shipping',\n      color: Colors.primary,\n    },\n    {\n      label: 'Completed',\n      value: '12',\n      icon: 'check-circle',\n      color: Colors.success,\n    },\n    {\n      label: 'This Month',\n      value: '$2,450',\n      icon: 'account-balance-wallet',\n      color: Colors.secondary,\n    },\n  ];\n\n  const quickActions = [\n    {\n      title: 'Track Shipment',\n      icon: 'my-location',\n      onPress: handleTrackShipment,\n    },\n    { title: 'Get Quote', icon: 'calculate', onPress: handleCreateShipment },\n    { title: 'Support', icon: 'headset-mic', onPress: () => {} },\n    {\n      title: 'History',\n      icon: 'history',\n      onPress: () => navigation.navigate('Shipments'),\n    },\n  ];\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <View style={styles.headerLeft}>\n          <View style={styles.avatar}>\n            <Text style={styles.avatarText}>{getUserInitial()}</Text>\n          </View>\n          <View style={styles.greeting}>\n            <Text style={styles.greetingText}>{getGreeting()},</Text>\n            <Text style={styles.userName}>\n              {userProfile?.first_name || 'Client'}\n            </Text>\n          </View>\n        </View>\n\n        <TouchableOpacity style={styles.notificationButton}>\n          <MaterialIcons\n            name=\"notifications-none\"\n            size={24}\n            color={Colors.text.primary}\n          />\n          <View style={styles.notificationBadge} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Banner Card */}\n        <Card variant=\"elevated\" padding=\"lg\" style={styles.bannerCard}>\n          <View style={styles.bannerContent}>\n            <View style={styles.bannerLeft}>\n              <Text style={styles.bannerTitle}>🚛 Need to ship a vehicle?</Text>\n              <Text style={styles.bannerSubtitle}>\n                Get instant quotes from trusted carriers\n              </Text>\n              <Button\n                title=\"Get Quote Now\"\n                variant=\"primary\"\n                size=\"sm\"\n                onPress={handleCreateShipment}\n                style={styles.bannerButton}\n              />\n            </View>\n            <MaterialIcons\n              name=\"directions-car\"\n              size={60}\n              color={Colors.primary}\n              style={styles.bannerIcon}\n            />\n          </View>\n        </Card>\n\n        {/* Quick Stats */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Overview</Text>\n          <View style={styles.statsGrid}>\n            {quickStats.map((stat, index) => (\n              <Card\n                key={index}\n                variant=\"default\"\n                padding=\"base\"\n                style={styles.statCard}\n              >\n                <MaterialIcons\n                  name={stat.icon as any}\n                  size={24}\n                  color={stat.color}\n                />\n                <Text style={styles.statValue}>{stat.value}</Text>\n                <Text style={styles.statLabel}>{stat.label}</Text>\n              </Card>\n            ))}\n          </View>\n        </View>\n\n        {/* Create Shipment CTA */}\n        <Card variant=\"outlined\" padding=\"lg\" style={styles.ctaCard}>\n          <View style={styles.ctaContent}>\n            <MaterialIcons\n              name=\"add-circle-outline\"\n              size={32}\n              color={Colors.primary}\n            />\n            <Text style={styles.ctaTitle}>Create New Shipment</Text>\n            <Text style={styles.ctaSubtitle}>\n              Get quotes and book your vehicle transport\n            </Text>\n          </View>\n          <Button\n            title=\"Start Booking\"\n            variant=\"primary\"\n            size=\"lg\"\n            fullWidth\n            onPress={handleCreateShipment}\n          />\n        </Card>\n\n        {/* Quick Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.actionsGrid}>\n            {quickActions.map((action, index) => (\n              <Card\n                key={index}\n                variant=\"default\"\n                padding=\"base\"\n                touchable\n                onPress={action.onPress}\n                style={styles.actionCard}\n              >\n                <MaterialIcons\n                  name={action.icon as any}\n                  size={28}\n                  color={Colors.primary}\n                />\n                <Text style={styles.actionTitle}>{action.title}</Text>\n              </Card>\n            ))}\n          </View>\n        </View>\n\n        {/* Recent Activity */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Recent Activity</Text>\n            <TouchableOpacity onPress={() => navigation.navigate('Shipments')}>\n              <Text style={styles.viewAllText}>View All</Text>\n            </TouchableOpacity>\n          </View>\n\n          <Card variant=\"default\" padding=\"base\" style={styles.activityCard}>\n            <View style={styles.activityItem}>\n              <MaterialIcons\n                name=\"local-shipping\"\n                size={20}\n                color={Colors.primary}\n              />\n              <View style={styles.activityContent}>\n                <Text style={styles.activityTitle}>\n                  Shipment #DR001 picked up\n                </Text>\n                <Text style={styles.activityTime}>2 hours ago</Text>\n              </View>\n              <MaterialIcons\n                name=\"chevron-right\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n            </View>\n          </Card>\n        </View>\n\n        {/* Promotional Banner */}\n        <Card variant=\"elevated\" padding=\"lg\" style={styles.promoCard}>\n          <View style={styles.promoContent}>\n            <Text style={styles.promoTitle}>🎉 Special Offer</Text>\n            <Text style={styles.promoSubtitle}>\n              Get 15% off your next shipment with code DRIVE15\n            </Text>\n            <Button\n              title=\"Learn More\"\n              variant=\"outline\"\n              size=\"sm\"\n              onPress={() => {}}\n              style={styles.promoButton}\n            />\n          </View>\n        </Card>\n\n        <View style={styles.bottomSpacing} />\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: 60,\n    paddingBottom: Spacing[6],\n    paddingHorizontal: Spacing[6],\n    backgroundColor: Colors.surface,\n  },\n  headerLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  avatar: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    backgroundColor: Colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: Spacing[3],\n  },\n  avatarText: {\n    fontSize: Typography.fontSize.xl,\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.inverse,\n  },\n  greeting: {\n    flex: 1,\n  },\n  greetingText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n  },\n  userName: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n  },\n  notificationButton: {\n    position: 'relative',\n    padding: Spacing[2],\n  },\n  notificationBadge: {\n    position: 'absolute',\n    top: 8,\n    right: 8,\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    backgroundColor: Colors.error,\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: Spacing[6],\n  },\n  bannerCard: {\n    marginTop: Spacing[6],\n    backgroundColor: Colors.brand.primary[50],\n  },\n  bannerContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  bannerLeft: {\n    flex: 1,\n  },\n  bannerTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  bannerSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n  },\n  bannerButton: {\n    alignSelf: 'flex-start',\n  },\n  bannerIcon: {\n    opacity: 0.7,\n  },\n  section: {\n    marginTop: Spacing[8],\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: Spacing[4],\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[4],\n  },\n  viewAllText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.primary,\n    fontWeight: Typography.fontWeight.medium,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  statCard: {\n    flex: 1,\n    alignItems: 'center',\n    marginHorizontal: Spacing[1],\n  },\n  statValue: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginTop: Spacing[2],\n  },\n  statLabel: {\n    fontSize: Typography.fontSize.xs,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginTop: Spacing[1],\n  },\n  ctaCard: {\n    marginTop: Spacing[8],\n    alignItems: 'center',\n  },\n  ctaContent: {\n    alignItems: 'center',\n    marginBottom: Spacing[6],\n  },\n  ctaTitle: {\n    fontSize: Typography.fontSize.xl,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginTop: Spacing[3],\n    marginBottom: Spacing[2],\n  },\n  ctaSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n  },\n  actionsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  actionCard: {\n    width: '48%',\n    alignItems: 'center',\n    marginBottom: Spacing[3],\n  },\n  actionTitle: {\n    fontSize: Typography.fontSize.sm,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.primary,\n    marginTop: Spacing[2],\n    textAlign: 'center',\n  },\n  activityCard: {\n    marginTop: Spacing[2],\n  },\n  activityItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  activityContent: {\n    flex: 1,\n    marginLeft: Spacing[3],\n  },\n  activityTitle: {\n    fontSize: Typography.fontSize.sm,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.primary,\n  },\n  activityTime: {\n    fontSize: Typography.fontSize.xs,\n    color: Colors.text.secondary,\n    marginTop: Spacing[1],\n  },\n  promoCard: {\n    marginTop: Spacing[8],\n    backgroundColor: Colors.brand.secondary[50],\n  },\n  promoContent: {\n    alignItems: 'center',\n  },\n  promoTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  promoSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginBottom: Spacing[4],\n  },\n  promoButton: {\n    alignSelf: 'center',\n  },\n  bottomSpacing: {\n    height: Spacing[8],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/home/HomeScreenNew.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Image' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BorderRadius' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4458,4461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4458,4461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":202,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5991,5994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5991,5994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  Image,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport {\n  Colors,\n  Typography,\n  Spacing,\n  BorderRadius,\n} from '../../constants/DesignSystem';\nimport { Button } from '../../components/ui/Button';\nimport { Card } from '../../components/ui/Card';\nimport { ClientTabParamList } from '../../navigation/types';\nimport { useAuth } from '../../context/AuthContext';\n\ntype HomeScreenProps = NativeStackScreenProps<ClientTabParamList, 'Home'>;\n\nexport default function HomeScreen({ navigation }: HomeScreenProps) {\n  const { userProfile } = useAuth();\n\n  const getUserInitial = () => {\n    if (userProfile?.first_name) {\n      return userProfile.first_name.charAt(0).toUpperCase();\n    }\n    return 'C';\n  };\n\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return 'Good morning';\n    if (hour < 18) return 'Good afternoon';\n    return 'Good evening';\n  };\n\n  const handleCreateShipment = () => {\n    // Navigate to parent stack navigator to access CreateShipment screen\n    navigation.getParent()?.navigate('CreateShipment');\n  };\n\n  const handleTrackShipment = () => {\n    navigation.navigate('Shipments');\n  };\n\n  const quickStats = [\n    {\n      label: 'Active Shipments',\n      value: '2',\n      icon: 'local-shipping',\n      color: Colors.primary,\n    },\n    {\n      label: 'Completed',\n      value: '12',\n      icon: 'check-circle',\n      color: Colors.success,\n    },\n    {\n      label: 'This Month',\n      value: '$2,450',\n      icon: 'account-balance-wallet',\n      color: Colors.secondary,\n    },\n  ];\n\n  const quickActions = [\n    {\n      title: 'Track Shipment',\n      icon: 'my-location',\n      onPress: handleTrackShipment,\n    },\n    { title: 'Get Quote', icon: 'calculate', onPress: handleCreateShipment },\n    { title: 'Support', icon: 'headset-mic', onPress: () => {} },\n    {\n      title: 'History',\n      icon: 'history',\n      onPress: () => navigation.navigate('Shipments'),\n    },\n  ];\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <View style={styles.headerLeft}>\n          <View style={styles.avatar}>\n            <Text style={styles.avatarText}>{getUserInitial()}</Text>\n          </View>\n          <View style={styles.greeting}>\n            <Text style={styles.greetingText}>{getGreeting()},</Text>\n            <Text style={styles.userName}>\n              {userProfile?.first_name || 'Client'}\n            </Text>\n          </View>\n        </View>\n\n        <TouchableOpacity style={styles.notificationButton}>\n          <MaterialIcons\n            name=\"notifications-none\"\n            size={24}\n            color={Colors.text.primary}\n          />\n          <View style={styles.notificationBadge} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Banner Card */}\n        <Card variant=\"elevated\" padding=\"lg\" style={styles.bannerCard}>\n          <View style={styles.bannerContent}>\n            <View style={styles.bannerLeft}>\n              <Text style={styles.bannerTitle}>🚛 Need to ship a vehicle?</Text>\n              <Text style={styles.bannerSubtitle}>\n                Get instant quotes from trusted carriers\n              </Text>\n              <Button\n                title=\"Get Quote Now\"\n                variant=\"primary\"\n                size=\"sm\"\n                onPress={handleCreateShipment}\n                style={styles.bannerButton}\n              />\n            </View>\n            <MaterialIcons\n              name=\"directions-car\"\n              size={60}\n              color={Colors.primary}\n              style={styles.bannerIcon}\n            />\n          </View>\n        </Card>\n\n        {/* Quick Stats */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Overview</Text>\n          <View style={styles.statsGrid}>\n            {quickStats.map((stat, index) => (\n              <Card\n                key={index}\n                variant=\"default\"\n                padding=\"base\"\n                style={styles.statCard}\n              >\n                <MaterialIcons\n                  name={stat.icon as any}\n                  size={24}\n                  color={stat.color}\n                />\n                <Text style={styles.statValue}>{stat.value}</Text>\n                <Text style={styles.statLabel}>{stat.label}</Text>\n              </Card>\n            ))}\n          </View>\n        </View>\n\n        {/* Create Shipment CTA */}\n        <Card variant=\"outlined\" padding=\"lg\" style={styles.ctaCard}>\n          <View style={styles.ctaContent}>\n            <MaterialIcons\n              name=\"add-circle-outline\"\n              size={32}\n              color={Colors.primary}\n            />\n            <Text style={styles.ctaTitle}>Create New Shipment</Text>\n            <Text style={styles.ctaSubtitle}>\n              Get quotes and book your vehicle transport\n            </Text>\n          </View>\n          <Button\n            title=\"Start Booking\"\n            variant=\"primary\"\n            size=\"lg\"\n            fullWidth\n            onPress={handleCreateShipment}\n          />\n        </Card>\n\n        {/* Quick Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.actionsGrid}>\n            {quickActions.map((action, index) => (\n              <Card\n                key={index}\n                variant=\"default\"\n                padding=\"base\"\n                touchable\n                onPress={action.onPress}\n                style={styles.actionCard}\n              >\n                <MaterialIcons\n                  name={action.icon as any}\n                  size={28}\n                  color={Colors.primary}\n                />\n                <Text style={styles.actionTitle}>{action.title}</Text>\n              </Card>\n            ))}\n          </View>\n        </View>\n\n        {/* Recent Activity */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Recent Activity</Text>\n            <TouchableOpacity onPress={() => navigation.navigate('Shipments')}>\n              <Text style={styles.viewAllText}>View All</Text>\n            </TouchableOpacity>\n          </View>\n\n          <Card variant=\"default\" padding=\"base\" style={styles.activityCard}>\n            <View style={styles.activityItem}>\n              <MaterialIcons\n                name=\"local-shipping\"\n                size={20}\n                color={Colors.primary}\n              />\n              <View style={styles.activityContent}>\n                <Text style={styles.activityTitle}>\n                  Shipment #DR001 picked up\n                </Text>\n                <Text style={styles.activityTime}>2 hours ago</Text>\n              </View>\n              <MaterialIcons\n                name=\"chevron-right\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n            </View>\n          </Card>\n        </View>\n\n        {/* Promotional Banner */}\n        <Card variant=\"elevated\" padding=\"lg\" style={styles.promoCard}>\n          <View style={styles.promoContent}>\n            <Text style={styles.promoTitle}>🎉 Special Offer</Text>\n            <Text style={styles.promoSubtitle}>\n              Get 15% off your next shipment with code DRIVE15\n            </Text>\n            <Button\n              title=\"Learn More\"\n              variant=\"outline\"\n              size=\"sm\"\n              onPress={() => {}}\n              style={styles.promoButton}\n            />\n          </View>\n        </Card>\n\n        <View style={styles.bottomSpacing} />\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: 60,\n    paddingBottom: Spacing[6],\n    paddingHorizontal: Spacing[6],\n    backgroundColor: Colors.surface,\n  },\n  headerLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  avatar: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    backgroundColor: Colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: Spacing[3],\n  },\n  avatarText: {\n    fontSize: Typography.fontSize.xl,\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.inverse,\n  },\n  greeting: {\n    flex: 1,\n  },\n  greetingText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n  },\n  userName: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n  },\n  notificationButton: {\n    position: 'relative',\n    padding: Spacing[2],\n  },\n  notificationBadge: {\n    position: 'absolute',\n    top: 8,\n    right: 8,\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    backgroundColor: Colors.error,\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: Spacing[6],\n  },\n  bannerCard: {\n    marginTop: Spacing[6],\n    backgroundColor: Colors.brand.primary[50],\n  },\n  bannerContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  bannerLeft: {\n    flex: 1,\n  },\n  bannerTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  bannerSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    marginBottom: Spacing[4],\n  },\n  bannerButton: {\n    alignSelf: 'flex-start',\n  },\n  bannerIcon: {\n    opacity: 0.7,\n  },\n  section: {\n    marginTop: Spacing[8],\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: Spacing[4],\n  },\n  sectionTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[4],\n  },\n  viewAllText: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.primary,\n    fontWeight: Typography.fontWeight.medium,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  statCard: {\n    flex: 1,\n    alignItems: 'center',\n    marginHorizontal: Spacing[1],\n  },\n  statValue: {\n    fontSize: Typography.fontSize['2xl'],\n    fontWeight: Typography.fontWeight.bold,\n    color: Colors.text.primary,\n    marginTop: Spacing[2],\n  },\n  statLabel: {\n    fontSize: Typography.fontSize.xs,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginTop: Spacing[1],\n  },\n  ctaCard: {\n    marginTop: Spacing[8],\n    alignItems: 'center',\n  },\n  ctaContent: {\n    alignItems: 'center',\n    marginBottom: Spacing[6],\n  },\n  ctaTitle: {\n    fontSize: Typography.fontSize.xl,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginTop: Spacing[3],\n    marginBottom: Spacing[2],\n  },\n  ctaSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n  },\n  actionsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  actionCard: {\n    width: '48%',\n    alignItems: 'center',\n    marginBottom: Spacing[3],\n  },\n  actionTitle: {\n    fontSize: Typography.fontSize.sm,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.primary,\n    marginTop: Spacing[2],\n    textAlign: 'center',\n  },\n  activityCard: {\n    marginTop: Spacing[2],\n  },\n  activityItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  activityContent: {\n    flex: 1,\n    marginLeft: Spacing[3],\n  },\n  activityTitle: {\n    fontSize: Typography.fontSize.sm,\n    fontWeight: Typography.fontWeight.medium,\n    color: Colors.text.primary,\n  },\n  activityTime: {\n    fontSize: Typography.fontSize.xs,\n    color: Colors.text.secondary,\n    marginTop: Spacing[1],\n  },\n  promoCard: {\n    marginTop: Spacing[8],\n    backgroundColor: Colors.brand.secondary[50],\n  },\n  promoContent: {\n    alignItems: 'center',\n  },\n  promoTitle: {\n    fontSize: Typography.fontSize.lg,\n    fontWeight: Typography.fontWeight.semibold,\n    color: Colors.text.primary,\n    marginBottom: Spacing[2],\n  },\n  promoSubtitle: {\n    fontSize: Typography.fontSize.sm,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    marginBottom: Spacing[4],\n  },\n  promoButton: {\n    alignSelf: 'center',\n  },\n  bottomSpacing: {\n    height: Spacing[8],\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/profile/ProfileScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'refreshProfile' is assigned a value but never used.","line":28,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":38},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  flexDirection: 'row',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n  paddingVertical: 12,\n  marginTop: 8,\n  borderTopWidth: 1\n}","line":199,"column":20,"nodeType":"ObjectExpression","endLine":207,"endColumn":14},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontSize: 14, fontWeight: '500' }","line":213,"column":22,"nodeType":"ObjectExpression","endLine":217,"endColumn":16},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { backgroundColor: '#E3F2FD' }","line":365,"column":16,"nodeType":"ObjectExpression","endLine":374,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Switch,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Colors } from '../../constants/Colors';\nimport { RootStackParamList, ClientTabParamList } from '../../navigation/types';\nimport { useAuth } from '../../context/AuthContext';\nimport { auth } from '../../lib/supabase';\n\ntype ProfileScreenProps = NativeStackScreenProps<\n  ClientTabParamList,\n  'Profile'\n> & {\n  navigation: NativeStackScreenProps<RootStackParamList>['navigation'];\n};\n\nexport default function ProfileScreen({ navigation }: ProfileScreenProps) {\n  const { userProfile, refreshProfile } = useAuth();\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [pushNotifications, setPushNotifications] = useState(true);\n\n  async function handleSignOut() {\n    Alert.alert('Sign Out', 'Are you sure you want to sign out?', [\n      {\n        text: 'Cancel',\n        style: 'cancel',\n      },\n      {\n        text: 'Sign Out',\n        style: 'destructive',\n        onPress: async () => {\n          try {\n            await auth.signOut();\n            // The auth context will handle navigation\n          } catch (error) {\n            console.error('Error signing out:', error);\n            Alert.alert('Error', 'Failed to sign out');\n          }\n        },\n      },\n    ]);\n  }\n\n  const getUserInitial = () => {\n    if (userProfile?.first_name) {\n      return userProfile.first_name.charAt(0).toUpperCase();\n    }\n    return 'C';\n  };\n\n  const getUserName = () => {\n    if (userProfile?.first_name && userProfile?.last_name) {\n      return `${userProfile.first_name} ${userProfile.last_name}`;\n    }\n    return 'Not set';\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>My Profile</Text>\n        <TouchableOpacity style={styles.editButton}>\n          <MaterialIcons name=\"edit\" size={20} color={Colors.primary} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Profile Section */}\n        <View style={styles.profileSection}>\n          <View style={styles.avatar}>\n            <Text style={styles.avatarText}>{getUserInitial()}</Text>\n          </View>\n          <View style={styles.profileInfo}>\n            <Text style={styles.userRole}>Client</Text>\n            <Text style={styles.roleSubtext}>CLIENT</Text>\n          </View>\n        </View>\n\n        {/* Account Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Account Information</Text>\n\n          <View style={styles.infoRow}>\n            <MaterialIcons\n              name=\"person\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.infoLabel}>Name:</Text>\n            <Text style={styles.infoValue}>{getUserName()}</Text>\n          </View>\n\n          {/* Admin Assignment Option - Only shown to admin users */}\n          {userProfile?.role === 'admin' && (\n            <TouchableOpacity\n              style={styles.adminButton}\n              onPress={() => navigation.navigate('AdminAssignment')}\n            >\n              <MaterialIcons\n                name=\"assignment\"\n                size={20}\n                color={Colors.primary}\n              />\n              <Text style={styles.adminButtonText}>Admin Assignment</Text>\n            </TouchableOpacity>\n          )}\n\n          <View style={styles.infoRow}>\n            <MaterialIcons\n              name=\"email\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.infoLabel}>Email:</Text>\n            <Text style={styles.infoValue}>\n              {userProfile?.email || 'clientdefault@gmail.com'}\n            </Text>\n          </View>\n\n          <View style={styles.infoRow}>\n            <MaterialIcons\n              name=\"phone\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.infoLabel}>Phone:</Text>\n            <Text style={styles.infoValue}>\n              {userProfile?.phone || '1234567890'}\n            </Text>\n          </View>\n\n          <View style={styles.infoRow}>\n            <MaterialIcons\n              name=\"location-on\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.infoLabel}>Address:</Text>\n            <Text style={styles.infoValue}>Not set</Text>\n          </View>\n        </View>\n\n        {/* Notification Preferences */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Notification Preferences</Text>\n\n          <View style={styles.notificationRow}>\n            <View style={styles.notificationInfo}>\n              <MaterialIcons\n                name=\"email\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.notificationLabel}>Email Notifications</Text>\n            </View>\n            <Switch\n              value={emailNotifications}\n              onValueChange={setEmailNotifications}\n              trackColor={{ false: Colors.border, true: Colors.primaryLight }}\n              thumbColor={\n                emailNotifications ? Colors.primary : Colors.text.disabled\n              }\n            />\n          </View>\n\n          <View style={styles.notificationRow}>\n            <View style={styles.notificationInfo}>\n              <MaterialIcons\n                name=\"notifications\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.notificationLabel}>Push Notifications</Text>\n            </View>\n            <Switch\n              value={pushNotifications}\n              onValueChange={setPushNotifications}\n              trackColor={{ false: Colors.border, true: Colors.primaryLight }}\n              thumbColor={\n                pushNotifications ? Colors.primary : Colors.text.disabled\n              }\n            />\n          </View>\n\n          <TouchableOpacity\n            style={{\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              paddingVertical: 12,\n              marginTop: 8,\n              borderTopWidth: 1,\n              borderTopColor: Colors.border,\n            }}\n            onPress={() => {\n              navigation.getParent()?.navigate('Settings');\n            }}\n          >\n            <Text\n              style={{\n                fontSize: 14,\n                color: Colors.primary,\n                fontWeight: '500',\n              }}\n            >\n              Manage All Notification Settings\n            </Text>\n            <MaterialIcons\n              name=\"chevron-right\"\n              size={20}\n              color={Colors.primary}\n            />\n          </TouchableOpacity>\n        </View>\n\n        {/* Sign Out Button */}\n        <TouchableOpacity style={styles.signOutButton} onPress={handleSignOut}>\n          <MaterialIcons name=\"logout\" size={20} color={Colors.error} />\n          <Text style={styles.signOutText}>Sign Out</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 24,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text.inverse,\n  },\n  editButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 24,\n  },\n  profileSection: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 24,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  avatar: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: Colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  avatarText: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text.inverse,\n  },\n  profileInfo: {\n    flex: 1,\n  },\n  userRole: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 4,\n  },\n  roleSubtext: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.text.secondary,\n    letterSpacing: 1,\n  },\n  section: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 20,\n    marginVertical: 12,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 16,\n  },\n  infoRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  infoLabel: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 12,\n    minWidth: 60,\n  },\n  infoValue: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    flex: 1,\n    marginLeft: 8,\n  },\n  notificationRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n  },\n  notificationInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  notificationLabel: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    marginLeft: 12,\n  },\n  signOutButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 24,\n    borderWidth: 1,\n    borderColor: Colors.error,\n  },\n  signOutText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.error,\n    marginLeft: 8,\n  },\n  adminButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#E3F2FD',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  adminButtonText: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '600',\n    marginLeft: 12,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/profile/ProfileScreenNew.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navigation' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'refreshProfile' is assigned a value but never used.","line":23,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":38}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Switch,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Colors } from '../../constants/Colors';\nimport { ClientTabParamList } from '../../navigation/types';\nimport { useAuth } from '../../context/AuthContext';\nimport { auth } from '../../lib/supabase';\n\ntype ProfileScreenProps = NativeStackScreenProps<ClientTabParamList, 'Profile'>;\n\nexport default function ProfileScreen({ navigation }: ProfileScreenProps) {\n  const { userProfile, refreshProfile } = useAuth();\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [pushNotifications, setPushNotifications] = useState(true);\n\n  async function handleSignOut() {\n    Alert.alert('Sign Out', 'Are you sure you want to sign out?', [\n      {\n        text: 'Cancel',\n        style: 'cancel',\n      },\n      {\n        text: 'Sign Out',\n        style: 'destructive',\n        onPress: async () => {\n          try {\n            await auth.signOut();\n            // The auth context will handle navigation\n          } catch (error) {\n            console.error('Error signing out:', error);\n            Alert.alert('Error', 'Failed to sign out');\n          }\n        },\n      },\n    ]);\n  }\n\n  const getUserInitial = () => {\n    if (userProfile?.first_name) {\n      return userProfile.first_name.charAt(0).toUpperCase();\n    }\n    return 'C';\n  };\n\n  const getUserName = () => {\n    if (userProfile?.first_name && userProfile?.last_name) {\n      return `${userProfile.first_name} ${userProfile.last_name}`;\n    }\n    return 'Not set';\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>My Profile</Text>\n        <TouchableOpacity style={styles.editButton}>\n          <MaterialIcons name=\"edit\" size={20} color={Colors.primary} />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Profile Section */}\n        <View style={styles.profileSection}>\n          <View style={styles.avatar}>\n            <Text style={styles.avatarText}>{getUserInitial()}</Text>\n          </View>\n          <View style={styles.profileInfo}>\n            <Text style={styles.userRole}>Client</Text>\n            <Text style={styles.roleSubtext}>CLIENT</Text>\n          </View>\n        </View>\n\n        {/* Account Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Account Information</Text>\n\n          <View style={styles.infoRow}>\n            <MaterialIcons\n              name=\"person\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.infoLabel}>Name:</Text>\n            <Text style={styles.infoValue}>{getUserName()}</Text>\n          </View>\n\n          <View style={styles.infoRow}>\n            <MaterialIcons\n              name=\"email\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.infoLabel}>Email:</Text>\n            <Text style={styles.infoValue}>\n              {userProfile?.email || 'clientdefault@gmail.com'}\n            </Text>\n          </View>\n\n          <View style={styles.infoRow}>\n            <MaterialIcons\n              name=\"phone\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.infoLabel}>Phone:</Text>\n            <Text style={styles.infoValue}>\n              {userProfile?.phone || '1234567890'}\n            </Text>\n          </View>\n\n          <View style={styles.infoRow}>\n            <MaterialIcons\n              name=\"location-on\"\n              size={20}\n              color={Colors.text.secondary}\n            />\n            <Text style={styles.infoLabel}>Address:</Text>\n            <Text style={styles.infoValue}>Not set</Text>\n          </View>\n        </View>\n\n        {/* Notification Preferences */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Notification Preferences</Text>\n\n          <View style={styles.notificationRow}>\n            <View style={styles.notificationInfo}>\n              <MaterialIcons\n                name=\"email\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.notificationLabel}>Email Notifications</Text>\n            </View>\n            <Switch\n              value={emailNotifications}\n              onValueChange={setEmailNotifications}\n              trackColor={{ false: Colors.border, true: Colors.primaryLight }}\n              thumbColor={\n                emailNotifications ? Colors.primary : Colors.text.disabled\n              }\n            />\n          </View>\n\n          <View style={styles.notificationRow}>\n            <View style={styles.notificationInfo}>\n              <MaterialIcons\n                name=\"notifications\"\n                size={20}\n                color={Colors.text.secondary}\n              />\n              <Text style={styles.notificationLabel}>Push Notifications</Text>\n            </View>\n            <Switch\n              value={pushNotifications}\n              onValueChange={setPushNotifications}\n              trackColor={{ false: Colors.border, true: Colors.primaryLight }}\n              thumbColor={\n                pushNotifications ? Colors.primary : Colors.text.disabled\n              }\n            />\n          </View>\n        </View>\n\n        {/* Sign Out Button */}\n        <TouchableOpacity style={styles.signOutButton} onPress={handleSignOut}>\n          <MaterialIcons name=\"logout\" size={20} color={Colors.error} />\n          <Text style={styles.signOutText}>Sign Out</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 24,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text.inverse,\n  },\n  editButton: {\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 24,\n  },\n  profileSection: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 24,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  avatar: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: Colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  avatarText: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text.inverse,\n  },\n  profileInfo: {\n    flex: 1,\n  },\n  userRole: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 4,\n  },\n  roleSubtext: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: Colors.text.secondary,\n    letterSpacing: 1,\n  },\n  section: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 20,\n    marginVertical: 12,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 16,\n  },\n  infoRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  infoLabel: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginLeft: 12,\n    minWidth: 60,\n  },\n  infoValue: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    flex: 1,\n    marginLeft: 8,\n  },\n  notificationRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n  },\n  notificationInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  notificationLabel: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    marginLeft: 12,\n  },\n  signOutButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 24,\n    borderWidth: 1,\n    borderColor: Colors.error,\n  },\n  signOutText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.error,\n    marginLeft: 8,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/shipments/NewShipmentScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MaterialIcons' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userProfile' is assigned a value but never used.","line":31,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'quoteData' is assigned a value but never used.","line":77,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Colors } from '../../constants/Colors';\nimport { RootStackParamList } from '../../navigation/types';\nimport { useAuth } from '../../context/AuthContext';\n\ntype NewShipmentNavigationProp = NativeStackScreenProps<\n  RootStackParamList,\n  'CreateShipment'\n>['navigation'];\n\ntype NewShipmentScreenProps = {\n  navigation: NewShipmentNavigationProp;\n};\n\nexport default function NewShipmentScreen({\n  navigation,\n}: NewShipmentScreenProps) {\n  const { userProfile } = useAuth();\n  const [pickupZip, setPickupZip] = useState('');\n  const [deliveryZip, setDeliveryZip] = useState('');\n  const [pickupDate, setPickupDate] = useState('');\n  const [deliveryDate, setDeliveryDate] = useState('');\n  const [vehicleType, setVehicleType] = useState<'sedan' | 'suv' | 'truck'>(\n    'sedan'\n  );\n  const [vehicleMake, setVehicleMake] = useState('');\n  const [vehicleModel, setVehicleModel] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleGetQuote = async () => {\n    // Validate inputs\n    if (!pickupZip || !deliveryZip) {\n      Alert.alert('Error', 'Please enter pickup and delivery ZIP codes');\n      return;\n    }\n\n    if (!vehicleMake || !vehicleModel) {\n      Alert.alert('Error', 'Please enter vehicle make and model');\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      // TODO: Implement quote calculation with backend\n      Alert.alert(\n        'Quote Generated',\n        `Estimated cost: $250 for ${vehicleType} transport from ${pickupZip} to ${deliveryZip}`,\n        [\n          { text: 'Cancel', style: 'cancel' },\n          { text: 'Book Shipment', onPress: () => handleBookShipment() },\n        ]\n      );\n    } catch (error) {\n      console.error('Error getting quote:', error);\n      Alert.alert('Error', 'Failed to get quote. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBookShipment = async () => {\n    // Navigate to booking flow with the quote information\n    const quoteData = {\n      pickupZip,\n      deliveryZip,\n      pickupDate,\n      deliveryDate,\n      vehicleType,\n      vehicleMake,\n      vehicleModel,\n      estimatedCost: 250, // This would come from the actual quote API\n    };\n\n    // Navigate to the booking flow\n    navigation.navigate('BookingStepCustomer', {\n      quoteId: `quote_${Date.now()}`,\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>New Shipment</Text>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Pickup Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Pickup Information</Text>\n\n          <View style={styles.inputContainer}>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Pickup ZIP Code\"\n              value={pickupZip}\n              onChangeText={setPickupZip}\n              keyboardType=\"numeric\"\n              maxLength={5}\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Jun 8, 2025\"\n              value={pickupDate}\n              onChangeText={setPickupDate}\n            />\n          </View>\n        </View>\n\n        {/* Delivery Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Delivery Information</Text>\n\n          <View style={styles.inputContainer}>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Delivery ZIP Code\"\n              value={deliveryZip}\n              onChangeText={setDeliveryZip}\n              keyboardType=\"numeric\"\n              maxLength={5}\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Jun 15, 2025\"\n              value={deliveryDate}\n              onChangeText={setDeliveryDate}\n            />\n          </View>\n        </View>\n\n        {/* Vehicle Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Vehicle Information</Text>\n\n          {/* Vehicle Type Selection */}\n          <View style={styles.vehicleTypeContainer}>\n            {(['sedan', 'suv', 'truck'] as const).map(type => (\n              <TouchableOpacity\n                key={type}\n                style={[\n                  styles.vehicleTypeButton,\n                  vehicleType === type && styles.vehicleTypeButtonSelected,\n                ]}\n                onPress={() => setVehicleType(type)}\n              >\n                <Text\n                  style={[\n                    styles.vehicleTypeText,\n                    vehicleType === type && styles.vehicleTypeTextSelected,\n                  ]}\n                >\n                  {type.toUpperCase()}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n\n          <View style={styles.inputContainer}>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Vehicle Make (e.g., Toyota, Honda)\"\n              value={vehicleMake}\n              onChangeText={setVehicleMake}\n              autoCapitalize=\"words\"\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Vehicle Model (e.g., Camry, Civic)\"\n              value={vehicleModel}\n              onChangeText={setVehicleModel}\n              autoCapitalize=\"words\"\n            />\n          </View>\n        </View>\n\n        {/* Get Quote Button */}\n        <TouchableOpacity\n          style={[styles.quoteButton, loading && styles.quoteButtonDisabled]}\n          onPress={handleGetQuote}\n          disabled={loading}\n        >\n          <Text style={styles.quoteButtonText}>\n            {loading ? 'Getting Quote...' : 'Get Quote'}\n          </Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 24,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text.inverse,\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 24,\n    paddingTop: 24,\n  },\n  section: {\n    backgroundColor: Colors.surface,\n    borderRadius: 12,\n    padding: 20,\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 16,\n  },\n  inputContainer: {\n    marginBottom: 16,\n  },\n  input: {\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 16,\n    fontSize: 16,\n    color: Colors.text.primary,\n  },\n  vehicleTypeContainer: {\n    flexDirection: 'row',\n    marginBottom: 16,\n    gap: 8,\n  },\n  vehicleTypeButton: {\n    flex: 1,\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n  },\n  vehicleTypeButtonSelected: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  vehicleTypeText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text.primary,\n  },\n  vehicleTypeTextSelected: {\n    color: Colors.text.inverse,\n  },\n  quoteButton: {\n    backgroundColor: Colors.primary,\n    borderRadius: 12,\n    paddingVertical: 16,\n    alignItems: 'center',\n    marginBottom: 32,\n  },\n  quoteButtonDisabled: {\n    backgroundColor: Colors.primaryLight,\n  },\n  quoteButtonText: {\n    color: Colors.text.inverse,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/shipments/ShipmentDetailsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1002,1005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1002,1005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":41,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2258,2261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2258,2261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: 'white' }","line":413,"column":15,"nodeType":"ObjectExpression","endLine":417,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: 'white' }","line":475,"column":21,"nodeType":"ObjectExpression","endLine":479,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":1,"message":"Color literal: { color: 'white' }","line":490,"column":21,"nodeType":"ObjectExpression","endLine":495,"endColumn":4}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  ScrollView,\n  ActivityIndicator,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { RealtimeChannel } from '@supabase/supabase-js';\n\nimport { Colors } from '../../constants/Colors';\nimport { RootStackParamList } from '../../navigation/types';\nimport { supabase } from '../../lib/supabase';\nimport { useAuth } from '../../context/AuthContext';\nimport {\n  realtimeService,\n  DriverLocation,\n} from '../../services/RealtimeService';\n\ntype ShipmentDetailsScreenProps = NativeStackScreenProps<\n  RootStackParamList,\n  'ShipmentDetails'\n>;\n\nexport default function ShipmentDetailsScreen({\n  route,\n  navigation,\n}: ShipmentDetailsScreenProps) {\n  const { shipmentId } = route.params;\n  const [shipment, setShipment] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [driverLocation, setDriverLocation] = useState<DriverLocation | null>(\n    null\n  );\n  const { user } = useAuth();\n  const realtimeChannelRef = useRef<RealtimeChannel | null>(null);\n  const locationChannelRef = useRef<RealtimeChannel | null>(null);\n\n  useEffect(() => {\n    loadShipmentDetails();\n\n    // Set up real-time subscription\n    if (shipmentId) {\n      setupRealtimeSubscription();\n    }\n\n    // Clean up on unmount\n    return () => {\n      if (realtimeChannelRef.current) {\n        realtimeService.unsubscribeFromShipment(shipmentId);\n        realtimeChannelRef.current = null;\n      }\n\n      if (locationChannelRef.current) {\n        realtimeService.unsubscribeFromDriverLocation();\n        locationChannelRef.current = null;\n      }\n    };\n  }, [shipmentId]);\n\n  const setupRealtimeSubscription = () => {\n    // Subscribe to real-time updates for this shipment\n    realtimeChannelRef.current = realtimeService.subscribeToShipment(\n      shipmentId,\n      // Shipment update handler\n      updatedShipment => {\n        console.log('Received real-time shipment update:', updatedShipment);\n        setShipment((current: any) => ({\n          ...current,\n          ...updatedShipment,\n        }));\n      },\n      // New message handler (not used in this screen)\n      () => {},\n      // Tracking event handler (not used in this screen)\n      () => {}\n    );\n\n    // Subscribe to driver location updates if shipment is in progress\n    if (shipment && ['picked_up', 'in_transit'].includes(shipment.status)) {\n      locationChannelRef.current = realtimeService.subscribeToDriverLocation(\n        shipmentId,\n        location => {\n          console.log('Received driver location update:', location);\n          setDriverLocation(location);\n        }\n      );\n    }\n  };\n\n  async function loadShipmentDetails() {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const { data, error: fetchError } = await supabase\n        .from('shipments')\n        .select('*')\n        .eq('id', shipmentId)\n        .single();\n\n      if (fetchError) {\n        console.error('Error fetching shipment:', fetchError);\n        setError(fetchError.message);\n        return;\n      }\n\n      setShipment(data);\n    } catch (err) {\n      console.error('Error loading shipment details:', err);\n      setError('Failed to load shipment details');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleCancelShipment() {\n    Alert.alert(\n      'Cancel Shipment',\n      'Are you sure you want to cancel this shipment?',\n      [\n        {\n          text: 'No',\n          style: 'cancel',\n        },\n        {\n          text: 'Yes, Cancel',\n          style: 'destructive',\n          onPress: async () => {\n            try {\n              const { error: updateError } = await supabase\n                .from('shipments')\n                .update({\n                  status: 'cancelled',\n                  updated_at: new Date().toISOString(),\n                })\n                .eq('id', shipmentId);\n\n              if (updateError) {\n                console.error('Error cancelling shipment:', updateError);\n                Alert.alert('Error', 'Failed to cancel shipment');\n                return;\n              }\n\n              // Local state will be updated by real-time subscription\n              Alert.alert('Success', 'Shipment cancelled successfully');\n            } catch (err) {\n              console.error('Error cancelling shipment:', err);\n              Alert.alert('Error', 'Failed to cancel shipment');\n            }\n          },\n        },\n      ]\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return Colors.warning;\n      case 'in_transit':\n        return Colors.primary;\n      case 'delivered':\n        return Colors.success;\n      case 'cancelled':\n        return Colors.error;\n      default:\n        return Colors.text.secondary;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return 'N/A';\n\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.centerContainer}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n        <Text style={styles.loadingText}>Loading shipment details...</Text>\n      </View>\n    );\n  }\n\n  if (error || !shipment) {\n    return (\n      <View style={styles.centerContainer}>\n        <Text style={styles.errorText}>\n          {error || 'Failed to load shipment details'}\n        </Text>\n        <TouchableOpacity\n          style={styles.retryButton}\n          onPress={loadShipmentDetails}\n        >\n          <Text style={styles.retryButtonText}>Retry</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n      <ScrollView contentContainerStyle={styles.content}>\n        <View style={styles.header}>\n          <View style={styles.trackingContainer}>\n            <Text style={styles.trackingLabel}>Tracking Number</Text>\n            <Text style={styles.trackingNumber}>\n              #{shipment.tracking_number}\n            </Text>\n          </View>\n\n          <View\n            style={[\n              styles.statusBadge,\n              { backgroundColor: getStatusColor(shipment.status) },\n            ]}\n          >\n            <Text style={styles.statusText}>\n              {shipment.status?.charAt(0).toUpperCase() +\n                shipment.status?.slice(1).replace('_', ' ')}\n            </Text>\n          </View>\n        </View>\n\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Shipment Details</Text>\n\n          <View style={styles.detailRow}>\n            <Text style={styles.detailLabel}>Created</Text>\n            <Text style={styles.detailValue}>\n              {formatDate(shipment.created_at)}\n            </Text>\n          </View>\n\n          <View style={styles.detailRow}>\n            <Text style={styles.detailLabel}>Est. Delivery</Text>\n            <Text style={styles.detailValue}>\n              {formatDate(shipment.estimated_delivery)}\n            </Text>\n          </View>\n\n          {shipment.delivered_at && (\n            <View style={styles.detailRow}>\n              <Text style={styles.detailLabel}>Delivered</Text>\n              <Text style={styles.detailValue}>\n                {formatDate(shipment.delivered_at)}\n              </Text>\n            </View>\n          )}\n\n          {shipment.price && (\n            <View style={styles.detailRow}>\n              <Text style={styles.detailLabel}>Price</Text>\n              <Text style={styles.detailValue}>\n                ${shipment.price.toFixed(2)}\n              </Text>\n            </View>\n          )}\n\n          {shipment.weight && (\n            <View style={styles.detailRow}>\n              <Text style={styles.detailLabel}>Weight</Text>\n              <Text style={styles.detailValue}>{shipment.weight} kg</Text>\n            </View>\n          )}\n\n          {shipment.dimensions && (\n            <View style={styles.detailRow}>\n              <Text style={styles.detailLabel}>Dimensions</Text>\n              <Text style={styles.detailValue}>{shipment.dimensions}</Text>\n            </View>\n          )}\n        </View>\n\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Addresses</Text>\n\n          <View style={styles.addressContainer}>\n            <Text style={styles.addressLabel}>From</Text>\n            <Text style={styles.addressValue}>{shipment.origin_address}</Text>\n          </View>\n\n          <View style={styles.addressContainer}>\n            <Text style={styles.addressLabel}>To</Text>\n            <Text style={styles.addressValue}>\n              {shipment.destination_address}\n            </Text>\n          </View>\n        </View>\n\n        {shipment.notes && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Notes</Text>\n            <Text style={styles.notes}>{shipment.notes}</Text>\n          </View>\n        )}\n\n        {shipment.status !== 'delivered' && shipment.status !== 'cancelled' && (\n          <View style={styles.actionsContainer}>\n            <TouchableOpacity\n              style={styles.cancelButton}\n              onPress={handleCancelShipment}\n            >\n              <Text style={styles.cancelButtonText}>Cancel Shipment</Text>\n            </TouchableOpacity>\n          </View>\n        )}\n\n        {shipment.status === 'in_transit' && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Track Delivery</Text>\n\n            <TouchableOpacity\n              style={styles.actionButton}\n              onPress={() =>\n                navigation.navigate('RouteMap', { shipmentId: shipment.id })\n              }\n            >\n              <MaterialIcons name=\"map\" size={20} color={Colors.background} />\n              <Text style={styles.actionButtonText}>Track on Map</Text>\n            </TouchableOpacity>\n\n            {driverLocation && (\n              <View style={styles.detailRow}>\n                <Text style={styles.detailLabel}>Last updated</Text>\n                <Text style={styles.detailValue}>\n                  {formatDate(driverLocation.location_timestamp)}\n                </Text>\n              </View>\n            )}\n          </View>\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    padding: 20,\n  },\n  centerContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: Colors.text.secondary,\n  },\n  errorText: {\n    fontSize: 16,\n    color: Colors.error,\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  retryButton: {\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    color: Colors.text.inverse,\n    fontWeight: '600',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  trackingContainer: {\n    flex: 1,\n  },\n  trackingLabel: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 4,\n  },\n  trackingNumber: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: Colors.text.primary,\n  },\n  statusBadge: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 4,\n  },\n  statusText: {\n    color: 'white',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  section: {\n    marginBottom: 24,\n    backgroundColor: Colors.surface,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 16,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  detailLabel: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n  },\n  detailValue: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    fontWeight: '500',\n  },\n  addressContainer: {\n    marginBottom: 16,\n  },\n  addressLabel: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 4,\n  },\n  addressValue: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    lineHeight: 20,\n  },\n  notes: {\n    fontSize: 14,\n    color: Colors.text.primary,\n    lineHeight: 20,\n  },\n  actionsContainer: {\n    marginBottom: 24,\n  },\n  cancelButton: {\n    backgroundColor: Colors.error,\n    borderRadius: 8,\n    paddingVertical: 16,\n    alignItems: 'center',\n  },\n  cancelButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  actionButton: {\n    backgroundColor: Colors.primary,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginVertical: 12,\n  },\n  actionButtonText: {\n    color: 'white',\n    fontWeight: '600',\n    fontSize: 16,\n    marginLeft: 8,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/shipments/ShipmentsScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'supabase' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  FlatList,\n  RefreshControl,\n  TouchableOpacity,\n  ActivityIndicator,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Colors } from '../../constants/Colors';\nimport { ClientTabParamList, RootStackParamList } from '../../navigation/types';\nimport { useAuth } from '../../context/AuthContext';\nimport { supabase } from '../../lib/supabase';\nimport { ShipmentService } from '../../services/shipmentService';\n\ntype ShipmentsScreenProps = NativeStackScreenProps<\n  ClientTabParamList,\n  'Shipments'\n> & {\n  navigation: NativeStackScreenProps<RootStackParamList>['navigation'];\n};\n\ntype ShipmentFilter = 'pending' | 'active' | 'past';\n\ninterface Shipment {\n  id: string;\n  title: string;\n  pickup_address: string;\n  delivery_address: string;\n  status: string;\n  created_at: string;\n  estimated_price: number;\n  description?: string;\n  driver_id?: string;\n}\n\nexport default function ShipmentsScreen({ navigation }: ShipmentsScreenProps) {\n  const { userProfile } = useAuth();\n  const [refreshing, setRefreshing] = useState(false);\n  const [shipments, setShipments] = useState<Shipment[]>([]);\n  const [filter, setFilter] = useState<ShipmentFilter>('pending');\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    loadShipments();\n  }, [filter]);\n\n  async function loadShipments() {\n    if (!userProfile?.id) return;\n\n    try {\n      setLoading(true);\n\n      // Determine status filter for query\n      let statusFilter: string[] = [];\n      switch (filter) {\n        case 'pending':\n          statusFilter = ['pending'];\n          break;\n        case 'active':\n          statusFilter = ['accepted', 'in_transit'];\n          break;\n        case 'past':\n          statusFilter = ['delivered', 'cancelled'];\n          break;\n      }\n\n      const data = await ShipmentService.getClientShipments(\n        userProfile.id,\n        statusFilter\n      );\n      setShipments(data);\n    } catch (err) {\n      console.error('Error loading shipments:', err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const onRefresh = async () => {\n    setRefreshing(true);\n    await loadShipments();\n    setRefreshing(false);\n  };\n\n  const navigateToShipmentDetails = (shipmentId: string) => {\n    navigation.navigate('ShipmentDetails', { shipmentId });\n  };\n\n  const FilterButton = ({\n    title,\n    value,\n  }: {\n    title: string;\n    value: ShipmentFilter;\n  }) => (\n    <TouchableOpacity\n      style={[\n        styles.filterButton,\n        filter === value && styles.filterButtonActive,\n      ]}\n      onPress={() => setFilter(value)}\n    >\n      <Text\n        style={[\n          styles.filterButtonText,\n          filter === value && styles.filterButtonTextActive,\n        ]}\n      >\n        {title}\n      </Text>\n    </TouchableOpacity>\n  );\n\n  const EmptyState = () => (\n    <View style={styles.emptyContainer}>\n      <MaterialIcons name=\"inventory\" size={64} color={Colors.text.disabled} />\n      <Text style={styles.emptyTitle}>No Shipments Found</Text>\n      <Text style={styles.emptySubtitle}>\n        You don't have any {filter} shipments\n      </Text>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>My Shipments</Text>\n      </View>\n\n      {/* Filter Tabs */}\n      <View style={styles.filtersContainer}>\n        <FilterButton title=\"Pending\" value=\"pending\" />\n        <FilterButton title=\"Active\" value=\"active\" />\n        <FilterButton title=\"Past\" value=\"past\" />\n      </View>\n\n      {/* Content */}\n      <View style={styles.content}>\n        {loading ? (\n          <View style={styles.loadingContainer}>\n            <ActivityIndicator size=\"large\" color={Colors.primary} />\n          </View>\n        ) : shipments.length === 0 ? (\n          <EmptyState />\n        ) : (\n          <FlatList\n            data={shipments}\n            keyExtractor={item => item.id}\n            renderItem={({ item }) => (\n              <TouchableOpacity\n                style={styles.shipmentCard}\n                onPress={() => navigateToShipmentDetails(item.id)}\n              >\n                <View style={styles.shipmentHeader}>\n                  <Text style={styles.shipmentTitle}>\n                    {item.title || `Shipment #${item.id.substring(0, 8)}`}\n                  </Text>\n                  <Text style={styles.shipmentCost}>\n                    ${item.estimated_price}\n                  </Text>\n                </View>\n                <Text style={styles.shipmentRoute}>\n                  {item.pickup_address} → {item.delivery_address}\n                </Text>\n                <View style={styles.shipmentFooter}>\n                  <Text style={styles.shipmentStatus}>{item.status}</Text>\n                  <Text style={styles.shipmentDate}>\n                    {new Date(item.created_at).toLocaleDateString()}\n                  </Text>\n                </View>\n                {item.description && (\n                  <Text style={styles.shipmentDescription} numberOfLines={2}>\n                    {item.description}\n                  </Text>\n                )}\n              </TouchableOpacity>\n            )}\n            refreshControl={\n              <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n            }\n          />\n        )}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 24,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text.inverse,\n  },\n  filtersContainer: {\n    flexDirection: 'row',\n    backgroundColor: Colors.surface,\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  filterButton: {\n    flex: 1,\n    paddingVertical: 12,\n    alignItems: 'center',\n    marginHorizontal: 4,\n    borderRadius: 8,\n    backgroundColor: Colors.background,\n  },\n  filterButtonActive: {\n    backgroundColor: Colors.primary,\n  },\n  filterButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text.secondary,\n  },\n  filterButtonTextActive: {\n    color: Colors.text.inverse,\n  },\n  content: {\n    flex: 1,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 40,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptySubtitle: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n  shipmentCard: {\n    backgroundColor: Colors.surface,\n    padding: 16,\n    marginHorizontal: 16,\n    marginVertical: 8,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  shipmentHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  shipmentTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    flex: 1,\n    marginRight: 8,\n  },\n  shipmentRoute: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 8,\n  },\n  shipmentFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginTop: 4,\n  },\n  shipmentStatus: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    textTransform: 'capitalize',\n  },\n  shipmentDate: {\n    fontSize: 12,\n    color: Colors.text.disabled,\n  },\n  shipmentDescription: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginTop: 8,\n    fontStyle: 'italic',\n  },\n  shipmentCost: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/screens/shipments/ShipmentsScreenNew.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userProfile' is assigned a value but never used.","line":38,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  FlatList,\n  RefreshControl,\n  TouchableOpacity,\n  ActivityIndicator,\n} from 'react-native';\nimport { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { Colors } from '../../constants/Colors';\nimport { ClientTabParamList, RootStackParamList } from '../../navigation/types';\nimport { useAuth } from '../../context/AuthContext';\n\ntype ShipmentsScreenProps = NativeStackScreenProps<\n  ClientTabParamList,\n  'Shipments'\n> & {\n  navigation: NativeStackScreenProps<RootStackParamList>['navigation'];\n};\n\ntype ShipmentFilter = 'pending' | 'active' | 'past';\n\ninterface Shipment {\n  id: string;\n  pickup_location: string;\n  delivery_location: string;\n  status: string;\n  created_at: string;\n  estimated_cost: number;\n}\n\nexport default function ShipmentsScreen({ navigation }: ShipmentsScreenProps) {\n  const { userProfile } = useAuth();\n  const [refreshing, setRefreshing] = useState(false);\n  const [shipments, setShipments] = useState<Shipment[]>([]);\n  const [filter, setFilter] = useState<ShipmentFilter>('pending');\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    loadShipments();\n  }, [filter]);\n\n  async function loadShipments() {\n    try {\n      setLoading(true);\n      // TODO: Replace with actual API call to backend\n      // For now, using mock data\n      const mockShipments: Shipment[] = [];\n      setShipments(mockShipments);\n    } catch (err) {\n      console.error('Error loading shipments:', err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const onRefresh = async () => {\n    setRefreshing(true);\n    await loadShipments();\n    setRefreshing(false);\n  };\n\n  const navigateToShipmentDetails = (shipmentId: string) => {\n    navigation.navigate('ShipmentDetails', { shipmentId });\n  };\n\n  const FilterButton = ({\n    title,\n    value,\n  }: {\n    title: string;\n    value: ShipmentFilter;\n  }) => (\n    <TouchableOpacity\n      style={[\n        styles.filterButton,\n        filter === value && styles.filterButtonActive,\n      ]}\n      onPress={() => setFilter(value)}\n    >\n      <Text\n        style={[\n          styles.filterButtonText,\n          filter === value && styles.filterButtonTextActive,\n        ]}\n      >\n        {title}\n      </Text>\n    </TouchableOpacity>\n  );\n\n  const EmptyState = () => (\n    <View style={styles.emptyContainer}>\n      <MaterialIcons name=\"inventory\" size={64} color={Colors.text.disabled} />\n      <Text style={styles.emptyTitle}>No Shipments Found</Text>\n      <Text style={styles.emptySubtitle}>\n        You don't have any {filter} shipments\n      </Text>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n\n      {/* Header */}\n      <View style={styles.header}>\n        <Text style={styles.title}>My Shipments</Text>\n      </View>\n\n      {/* Filter Tabs */}\n      <View style={styles.filtersContainer}>\n        <FilterButton title=\"Pending\" value=\"pending\" />\n        <FilterButton title=\"Active\" value=\"active\" />\n        <FilterButton title=\"Past\" value=\"past\" />\n      </View>\n\n      {/* Content */}\n      <View style={styles.content}>\n        {loading ? (\n          <View style={styles.loadingContainer}>\n            <ActivityIndicator size=\"large\" color={Colors.primary} />\n          </View>\n        ) : shipments.length === 0 ? (\n          <EmptyState />\n        ) : (\n          <FlatList\n            data={shipments}\n            keyExtractor={item => item.id}\n            renderItem={({ item }) => (\n              <TouchableOpacity\n                style={styles.shipmentCard}\n                onPress={() => navigateToShipmentDetails(item.id)}\n              >\n                <Text style={styles.shipmentTitle}>\n                  {item.pickup_location} → {item.delivery_location}\n                </Text>\n                <Text style={styles.shipmentStatus}>{item.status}</Text>\n                <Text style={styles.shipmentCost}>${item.estimated_cost}</Text>\n              </TouchableOpacity>\n            )}\n            refreshControl={\n              <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n            }\n          />\n        )}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    backgroundColor: Colors.primary,\n    paddingTop: 60,\n    paddingBottom: 20,\n    paddingHorizontal: 24,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text.inverse,\n  },\n  filtersContainer: {\n    flexDirection: 'row',\n    backgroundColor: Colors.surface,\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  filterButton: {\n    flex: 1,\n    paddingVertical: 12,\n    alignItems: 'center',\n    marginHorizontal: 4,\n    borderRadius: 8,\n    backgroundColor: Colors.background,\n  },\n  filterButtonActive: {\n    backgroundColor: Colors.primary,\n  },\n  filterButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text.secondary,\n  },\n  filterButtonTextActive: {\n    color: Colors.text.inverse,\n  },\n  content: {\n    flex: 1,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 40,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptySubtitle: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n  shipmentCard: {\n    backgroundColor: Colors.surface,\n    padding: 16,\n    marginHorizontal: 16,\n    marginVertical: 8,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  shipmentTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text.primary,\n    marginBottom: 8,\n  },\n  shipmentStatus: {\n    fontSize: 14,\n    color: Colors.text.secondary,\n    marginBottom: 4,\n  },\n  shipmentCost: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/services/NotificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Constants' is defined but never used.","line":6,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1208,1211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1208,1211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1249,1252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1249,1252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":188,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5651,5654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5651,5654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":375,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11019,11022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11019,11022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/NotificationService.ts\nimport * as Notifications from 'expo-notifications';\nimport * as Device from 'expo-device';\nimport { Platform } from 'react-native';\nimport { supabase } from '../lib/supabase';\nimport Constants from 'expo-constants';\nimport { ExpoConfig } from '../constants/Expo';\n\n// Configure how notifications appear when the app is in the foreground\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n    shouldShowBanner: true,\n    shouldShowList: true,\n  }),\n});\n\nexport interface NotificationPreferences {\n  pushEnabled: boolean;\n  emailEnabled: boolean;\n  smsEnabled: boolean;\n  shipmentUpdates: boolean;\n  driverAssigned: boolean;\n  paymentUpdates: boolean;\n  promotions: boolean;\n}\n\nexport const defaultPreferences: NotificationPreferences = {\n  pushEnabled: true,\n  emailEnabled: true,\n  smsEnabled: false,\n  shipmentUpdates: true,\n  driverAssigned: true,\n  paymentUpdates: true,\n  promotions: false,\n};\n\nexport class NotificationService {\n  private static instance: NotificationService;\n  private _expoPushToken: string | null = null;\n  private _notificationListener: any = null;\n  private _responseListener: any = null;\n\n  private constructor() {}\n\n  public static getInstance(): NotificationService {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n\n  get expoPushToken(): string | null {\n    return this._expoPushToken;\n  }\n\n  /**\n   * Safely check if a user session exists\n   * @returns boolean indicating if a session exists\n   */\n  private async hasActiveSession(): Promise<boolean> {\n    try {\n      const { data } = await supabase.auth.getSession();\n      return !!data.session;\n    } catch (error) {\n      console.warn('Error checking session:', error);\n      return false;\n    }\n  }\n  /**\n   * Initialize notification listeners and register for push notifications\n   */\n  async initialize(): Promise<void> {\n    try {\n      if (!Device.isDevice) {\n        console.log('Push notifications are not supported in the simulator');\n        return;\n      }\n\n      // Check if we have permission to send notifications\n      const { status: existingStatus } =\n        await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n\n      // If we don't have permission, ask for it\n      if (existingStatus !== 'granted') {\n        const { status } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n\n      if (finalStatus !== 'granted') {\n        console.log('Failed to get permission for push notifications');\n        return;\n      }\n\n      // Get the Expo push token\n      try {\n        const token = await this.registerForPushNotifications();\n\n        // If we got a valid token, save it\n        if (token !== 'INVALID_PROJECT_ID') {\n          this._expoPushToken = token;\n          console.log('Expo push token:', token);\n\n          // Store the token in Supabase\n          await this.savePushToken(token);\n        } else {\n          console.log('Skipping push token storage due to invalid project ID');\n        }\n      } catch (error) {\n        console.error('Error getting push token:', error);\n      }\n\n      // Set up notification listeners\n      this.setupNotificationListeners();\n    } catch (error) {\n      console.error('Error initializing notifications:', error);\n      throw error; // Rethrow to allow the caller to handle it\n    }\n  }\n\n  /**\n   * Register for push notifications and return the token\n   */\n  private async registerForPushNotifications(): Promise<string> {\n    try {\n      // Check if we have a valid project ID\n      if (\n        !ExpoConfig.projectId ||\n        ExpoConfig.projectId === '00000000-0000-0000-0000-000000000000'\n      ) {\n        console.log(\n          'No valid Expo project ID configured. Push notifications will not work.'\n        );\n        return 'INVALID_PROJECT_ID';\n      }\n\n      // Get the token\n      console.log('Using project ID:', ExpoConfig.projectId);\n      const { data: tokenData } = await Notifications.getExpoPushTokenAsync({\n        projectId: ExpoConfig.projectId,\n      });\n\n      // Set up platform-specific notification channel (Android only)\n      if (Platform.OS === 'android') {\n        Notifications.setNotificationChannelAsync('default', {\n          name: 'default',\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: '#1E88E5', // Primary color\n        });\n      }\n\n      return tokenData;\n    } catch (error) {\n      console.error('Error in registerForPushNotifications:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Set up notification listeners\n   */\n  private setupNotificationListeners(): void {\n    // This listener is fired whenever a notification is received while the app is foregrounded\n    this._notificationListener = Notifications.addNotificationReceivedListener(\n      notification => {\n        console.log('Notification received:', notification);\n      }\n    );\n\n    // This listener is fired whenever a user taps on or interacts with a notification\n    this._responseListener =\n      Notifications.addNotificationResponseReceivedListener(response => {\n        console.log('Notification response:', response);\n        // Handle notification tap\n        this.handleNotificationInteraction(\n          response.notification.request.content.data\n        );\n      });\n  }\n\n  /**\n   * Handle a notification interaction (tap)\n   */\n  private handleNotificationInteraction(data: any): void {\n    // Handle different notification types\n    if (data.type === 'shipment_update') {\n      // Navigate to shipment details\n      // This will be handled by the app navigation\n    } else if (data.type === 'new_message') {\n      // Navigate to chat\n    }\n  }\n\n  /**\n   * Cleanup notification listeners\n   */\n  cleanup(): void {\n    if (this._notificationListener) {\n      Notifications.removeNotificationSubscription(this._notificationListener);\n    }\n    if (this._responseListener) {\n      Notifications.removeNotificationSubscription(this._responseListener);\n    }\n  }\n\n  /**\n   * Save push token to Supabase\n   */\n  async savePushToken(token: string): Promise<void> {\n    try {\n      // Check if session exists first\n      if (!(await this.hasActiveSession())) {\n        console.log('No active session, skipping push token save');\n        return;\n      }\n\n      const { data: user, error: userError } = await supabase.auth.getUser();\n\n      if (userError || !user) {\n        console.error('Error getting user:', userError);\n        return;\n      }\n\n      // Check if token already exists\n      const { data: existingTokens, error: queryError } = await supabase\n        .from('push_tokens')\n        .select('*')\n        .eq('user_id', user.user.id)\n        .eq('token', token);\n\n      if (queryError) {\n        console.error('Error querying push tokens:', queryError);\n        return;\n      }\n\n      // If token doesn't exist, save it\n      if (!existingTokens || existingTokens.length === 0) {\n        const { error } = await supabase.from('push_tokens').insert({\n          user_id: user.user.id,\n          token,\n          device_type: Platform.OS,\n          is_active: true,\n          created_at: new Date().toISOString(),\n        });\n\n        if (error) {\n          console.error('Error saving push token:', error);\n        }\n      }\n    } catch (error) {\n      console.error('Error in savePushToken:', error);\n    }\n  }\n\n  /**\n   * Get notification preferences for the current user\n   */\n  async getNotificationPreferences(): Promise<NotificationPreferences> {\n    try {\n      // Check if session exists first\n      if (!(await this.hasActiveSession())) {\n        console.log('No active session, returning default preferences');\n        return defaultPreferences;\n      }\n\n      const { data: user, error: userError } = await supabase.auth.getUser();\n\n      if (userError || !user) {\n        console.error('Error getting user:', userError);\n        return defaultPreferences;\n      }\n\n      // Get preferences from Supabase\n      const { data, error } = await supabase\n        .from('notification_preferences')\n        .select('*')\n        .eq('user_id', user.user.id)\n        .single();\n\n      if (error || !data) {\n        // If no preferences found, return defaults\n        return defaultPreferences;\n      }\n\n      return {\n        pushEnabled: data.push_enabled,\n        emailEnabled: data.email_enabled,\n        smsEnabled: data.sms_enabled,\n        shipmentUpdates: data.shipment_updates,\n        driverAssigned: data.driver_assigned,\n        paymentUpdates: data.payment_updates,\n        promotions: data.promotions,\n      };\n    } catch (error) {\n      console.error('Error getting notification preferences:', error);\n      return defaultPreferences;\n    }\n  }\n\n  /**\n   * Save notification preferences for the current user\n   */\n  async saveNotificationPreferences(\n    preferences: NotificationPreferences\n  ): Promise<void> {\n    try {\n      // Check if session exists first\n      if (!(await this.hasActiveSession())) {\n        console.log('No active session, skipping preferences save');\n        return;\n      }\n\n      const { data: user, error: userError } = await supabase.auth.getUser();\n\n      if (userError || !user) {\n        console.error('Error getting user:', userError);\n        return;\n      }\n\n      // Check if preferences already exist\n      const { data, error: queryError } = await supabase\n        .from('notification_preferences')\n        .select('id')\n        .eq('user_id', user.user.id)\n        .single();\n\n      const prefsData = {\n        user_id: user.user.id,\n        push_enabled: preferences.pushEnabled,\n        email_enabled: preferences.emailEnabled,\n        sms_enabled: preferences.smsEnabled,\n        shipment_updates: preferences.shipmentUpdates,\n        driver_assigned: preferences.driverAssigned,\n        payment_updates: preferences.paymentUpdates,\n        promotions: preferences.promotions,\n        updated_at: new Date().toISOString(),\n      };\n\n      let error;\n\n      if (queryError || !data) {\n        // Insert new preferences\n        const result = await supabase.from('notification_preferences').insert({\n          ...prefsData,\n          created_at: new Date().toISOString(),\n        });\n        error = result.error;\n      } else {\n        // Update existing preferences\n        const result = await supabase\n          .from('notification_preferences')\n          .update(prefsData)\n          .eq('id', data.id);\n        error = result.error;\n      }\n\n      if (error) {\n        console.error('Error saving notification preferences:', error);\n      }\n    } catch (error) {\n      console.error('Error in saveNotificationPreferences:', error);\n    }\n  }\n\n  /**\n   * Send a local notification for testing\n   */\n  async sendLocalNotification(\n    title: string,\n    body: string,\n    data: any = {}\n  ): Promise<void> {\n    await Notifications.scheduleNotificationAsync({\n      content: {\n        title,\n        body,\n        data,\n      },\n      trigger: null, // Immediately\n    });\n  }\n\n  /**\n   * Check if push notifications are enabled\n   */\n  async areNotificationsEnabled(): Promise<boolean> {\n    const { status } = await Notifications.getPermissionsAsync();\n    return status === 'granted';\n  }\n}\n\n// Export singleton instance\nexport const notificationService = NotificationService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/services/OfflineService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":245,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":245,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/OfflineService.ts\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { supabase } from '../lib/supabase';\nimport { Database } from '../lib/database.types';\n\ntype ShipmentData = Database['public']['Tables']['shipments']['Row'];\ntype MessageData = Database['public']['Tables']['messages']['Row'];\n\n// Keys for AsyncStorage\nconst SHIPMENTS_KEY = '@drivedrop:shipments';\nconst MESSAGES_KEY = '@drivedrop:messages';\nconst SYNC_TIMESTAMPS_KEY = '@drivedrop:sync_timestamps';\n\ninterface SyncTimestamps {\n  shipments?: string;\n  messages?: string;\n}\n\nexport class OfflineService {\n  private static instance: OfflineService;\n\n  private constructor() {}\n\n  public static getInstance(): OfflineService {\n    if (!OfflineService.instance) {\n      OfflineService.instance = new OfflineService();\n    }\n    return OfflineService.instance;\n  }\n\n  /**\n   * Save shipments data for offline access\n   */\n  async saveShipments(shipments: ShipmentData[]): Promise<void> {\n    try {\n      const jsonValue = JSON.stringify(shipments);\n      await AsyncStorage.setItem(SHIPMENTS_KEY, jsonValue);\n      await this.updateSyncTimestamp('shipments');\n    } catch (error) {\n      console.error('Error saving shipments offline:', error);\n    }\n  }\n\n  /**\n   * Get shipments from offline storage\n   */\n  async getOfflineShipments(): Promise<ShipmentData[]> {\n    try {\n      const jsonValue = await AsyncStorage.getItem(SHIPMENTS_KEY);\n      return jsonValue != null ? JSON.parse(jsonValue) : [];\n    } catch (error) {\n      console.error('Error getting offline shipments:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Save messages for offline access\n   */\n  async saveMessages(messages: MessageData[]): Promise<void> {\n    try {\n      const jsonValue = JSON.stringify(messages);\n      await AsyncStorage.setItem(MESSAGES_KEY, jsonValue);\n      await this.updateSyncTimestamp('messages');\n    } catch (error) {\n      console.error('Error saving messages offline:', error);\n    }\n  }\n\n  /**\n   * Get messages from offline storage\n   */\n  async getOfflineMessages(): Promise<MessageData[]> {\n    try {\n      const jsonValue = await AsyncStorage.getItem(MESSAGES_KEY);\n      return jsonValue != null ? JSON.parse(jsonValue) : [];\n    } catch (error) {\n      console.error('Error getting offline messages:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Update the timestamp of when data was last synced\n   */\n  private async updateSyncTimestamp(\n    type: 'shipments' | 'messages'\n  ): Promise<void> {\n    try {\n      const timestamps = await this.getSyncTimestamps();\n      timestamps[type] = new Date().toISOString();\n      await AsyncStorage.setItem(\n        SYNC_TIMESTAMPS_KEY,\n        JSON.stringify(timestamps)\n      );\n    } catch (error) {\n      console.error('Error updating sync timestamp:', error);\n    }\n  }\n\n  /**\n   * Get the timestamps of when data was last synced\n   */\n  async getSyncTimestamps(): Promise<SyncTimestamps> {\n    try {\n      const jsonValue = await AsyncStorage.getItem(SYNC_TIMESTAMPS_KEY);\n      return jsonValue != null ? JSON.parse(jsonValue) : {};\n    } catch (error) {\n      console.error('Error getting sync timestamps:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Sync shipments with Supabase\n   * This will fetch the latest shipments and store them locally\n   */\n  async syncShipments(userId: string): Promise<ShipmentData[]> {\n    try {\n      // Get the user's shipments from Supabase\n      const { data: clientShipments, error: clientError } = await supabase\n        .from('shipments')\n        .select('*')\n        .eq('client_id', userId);\n\n      if (clientError) {\n        throw clientError;\n      }\n\n      // If user is a driver, also get their assigned shipments\n      const { data: driverShipments, error: driverError } = await supabase\n        .from('shipments')\n        .select('*')\n        .eq('driver_id', userId);\n\n      if (driverError) {\n        throw driverError;\n      }\n\n      // Combine both sets of shipments and remove duplicates\n      const allShipments = [\n        ...(clientShipments || []),\n        ...(driverShipments || []),\n      ];\n      const uniqueShipments = allShipments.filter(\n        (shipment, index, self) =>\n          index === self.findIndex(s => s.id === shipment.id)\n      );\n\n      // Save shipments to offline storage\n      await this.saveShipments(uniqueShipments);\n\n      return uniqueShipments;\n    } catch (error) {\n      console.error('Error syncing shipments:', error);\n      // Return what we have in offline storage\n      return await this.getOfflineShipments();\n    }\n  }\n\n  /**\n   * Sync messages with Supabase\n   * This will fetch the latest messages for a shipment and store them locally\n   */\n  async syncMessages(shipmentId: string): Promise<MessageData[]> {\n    try {\n      const { data, error } = await supabase\n        .from('messages')\n        .select('*')\n        .eq('shipment_id', shipmentId)\n        .order('created_at', { ascending: true });\n\n      if (error) {\n        throw error;\n      }\n\n      // Save messages to offline storage\n      if (data) {\n        await this.saveMessages(data);\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Error syncing messages:', error);\n      // Return what we have in offline storage\n      const allMessages = await this.getOfflineMessages();\n      return allMessages.filter(msg => msg.shipment_id === shipmentId);\n    }\n  }\n\n  /**\n   * Queue a message to be sent when online\n   */\n  async queueMessage(\n    message: Omit<MessageData, 'id' | 'created_at'>\n  ): Promise<void> {\n    try {\n      // Store the queue in AsyncStorage\n      const queueKey = `@drivedrop:message_queue`;\n      const queueJson = await AsyncStorage.getItem(queueKey);\n      const queue = queueJson ? JSON.parse(queueJson) : [];\n\n      // Add message to queue\n      queue.push({\n        ...message,\n        queued_at: new Date().toISOString(),\n      });\n\n      await AsyncStorage.setItem(queueKey, JSON.stringify(queue));\n    } catch (error) {\n      console.error('Error queueing message:', error);\n    }\n  }\n\n  /**\n   * Process queued messages\n   */\n  async processQueuedMessages(): Promise<void> {\n    try {\n      // Get the queue\n      const queueKey = `@drivedrop:message_queue`;\n      const queueJson = await AsyncStorage.getItem(queueKey);\n      if (!queueJson) return;\n\n      const queue = JSON.parse(queueJson);\n      if (queue.length === 0) return;\n\n      // Try to send each message\n      const newQueue = [];\n\n      for (const message of queue) {\n        try {\n          // Try to insert the message\n          const { error } = await supabase.from('messages').insert({\n            shipment_id: message.shipment_id,\n            sender_id: message.sender_id,\n            content: message.content,\n            is_read: message.is_read || false,\n          });\n\n          if (error) {\n            // Keep in queue if failed\n            newQueue.push(message);\n          }\n        } catch (error) {\n          // Keep in queue if failed\n          newQueue.push(message);\n        }\n      }\n\n      // Update the queue\n      await AsyncStorage.setItem(queueKey, JSON.stringify(newQueue));\n    } catch (error) {\n      console.error('Error processing message queue:', error);\n    }\n  }\n\n  /**\n   * Clear all offline data (for logout)\n   */\n  async clearOfflineData(): Promise<void> {\n    try {\n      await AsyncStorage.multiRemove([\n        SHIPMENTS_KEY,\n        MESSAGES_KEY,\n        SYNC_TIMESTAMPS_KEY,\n        '@drivedrop:message_queue',\n      ]);\n    } catch (error) {\n      console.error('Error clearing offline data:', error);\n    }\n  }\n}\n\n// Export singleton instance\nexport const offlineService = OfflineService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/services/RealtimeService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5519,5522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5519,5522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/RealtimeService.ts\nimport { supabase } from '../lib/supabase';\nimport { RealtimeChannel } from '@supabase/supabase-js';\nimport { notificationService } from './NotificationService';\nimport { Database } from '../lib/database.types';\nimport * as Location from 'expo-location';\n\ntype ShipmentData = Database['public']['Tables']['shipments']['Row'];\ntype MessageData = Database['public']['Tables']['messages']['Row'];\ntype TrackingEventData = Database['public']['Tables']['tracking_events']['Row'];\n\n// Driver location data structure\nexport interface DriverLocation {\n  shipment_id: string;\n  driver_id: string;\n  latitude: number;\n  longitude: number;\n  heading: number | null;\n  speed: number | null;\n  accuracy: number | null;\n  location_timestamp: string;\n}\n\nexport class RealtimeService {\n  private static instance: RealtimeService;\n  private shipmentChannels: Map<string, RealtimeChannel> = new Map();\n  private profileChannel: RealtimeChannel | null = null;\n  private locationChannel: RealtimeChannel | null = null;\n  private locationUpdateInterval: NodeJS.Timeout | null = null;\n  private currentShipmentId: string | null = null;\n\n  private constructor() {}\n\n  public static getInstance(): RealtimeService {\n    if (!RealtimeService.instance) {\n      RealtimeService.instance = new RealtimeService();\n    }\n    return RealtimeService.instance;\n  }\n\n  /**\n   * Subscribe to changes for a specific shipment\n   */\n  subscribeToShipment(\n    shipmentId: string,\n    onShipmentUpdate: (shipment: ShipmentData) => void,\n    onNewMessage: (message: MessageData) => void,\n    onTrackingEvent: (event: TrackingEventData) => void,\n    onDriverLocationUpdate?: (location: DriverLocation) => void\n  ): RealtimeChannel {\n    // Check if we already have a channel for this shipment\n    if (this.shipmentChannels.has(shipmentId)) {\n      return this.shipmentChannels.get(shipmentId)!;\n    }\n\n    // Create a new channel for this shipment\n    const channel = supabase\n      .channel(`shipment:${shipmentId}`)\n      // Listen for shipment updates\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'shipments',\n          filter: `id=eq.${shipmentId}`,\n        },\n        payload => {\n          console.log('Shipment updated:', payload);\n          onShipmentUpdate(payload.new as ShipmentData);\n\n          // Check status changes to show notifications\n          if (payload.old.status !== payload.new.status) {\n            notificationService.sendLocalNotification(\n              'Shipment Status Updated',\n              `Your shipment is now ${payload.new.status}`,\n              {\n                type: 'shipment_update',\n                shipmentId: shipmentId,\n                status: payload.new.status,\n              }\n            );\n          }\n        }\n      )\n      // Listen for new messages\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'messages',\n          filter: `shipment_id=eq.${shipmentId}`,\n        },\n        payload => {\n          console.log('New message:', payload);\n          onNewMessage(payload.new as MessageData);\n\n          // Show notification for new message\n          notificationService.sendLocalNotification(\n            'New Message',\n            payload.new.content.substring(0, 100) +\n              (payload.new.content.length > 100 ? '...' : ''),\n            {\n              type: 'new_message',\n              shipmentId: shipmentId,\n              messageId: payload.new.id,\n            }\n          );\n        }\n      )\n      // Listen for tracking events\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'tracking_events',\n          filter: `shipment_id=eq.${shipmentId}`,\n        },\n        payload => {\n          console.log('New tracking event:', payload);\n          onTrackingEvent(payload.new as TrackingEventData);\n\n          // Show notification for tracking events\n          notificationService.sendLocalNotification(\n            'Shipment Update',\n            `Tracking update: ${payload.new.event_type}` +\n              (payload.new.notes ? ` - ${payload.new.notes}` : ''),\n            {\n              type: 'tracking_event',\n              shipmentId: shipmentId,\n              eventId: payload.new.id,\n              eventType: payload.new.event_type,\n            }\n          );\n        }\n      );\n\n    // If driver location update callback is provided, listen for driver location updates\n    if (onDriverLocationUpdate) {\n      channel.on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'driver_locations',\n          filter: `shipment_id=eq.${shipmentId}`,\n        },\n        payload => {\n          console.log('Driver location updated:', payload);\n          onDriverLocationUpdate(payload.new as DriverLocation);\n        }\n      );\n    }\n\n    channel.subscribe();\n\n    // Store the channel for later reference\n    this.shipmentChannels.set(shipmentId, channel);\n\n    return channel;\n  }\n\n  /**\n   * Unsubscribe from a shipment\n   */\n  unsubscribeFromShipment(shipmentId: string): void {\n    const channel = this.shipmentChannels.get(shipmentId);\n    if (channel) {\n      supabase.removeChannel(channel);\n      this.shipmentChannels.delete(shipmentId);\n    }\n  }\n\n  /**\n   * Subscribe to user profile changes\n   */\n  subscribeToProfile(\n    userId: string,\n    onProfileUpdate: (profile: any) => void\n  ): RealtimeChannel {\n    if (this.profileChannel) {\n      supabase.removeChannel(this.profileChannel);\n    }\n\n    this.profileChannel = supabase\n      .channel(`profile:${userId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'profiles',\n          filter: `id=eq.${userId}`,\n        },\n        payload => {\n          console.log('Profile updated:', payload);\n          onProfileUpdate(payload.new);\n        }\n      )\n      .subscribe();\n\n    return this.profileChannel;\n  }\n\n  /**\n   * Unsubscribe from all channels\n   */\n  unsubscribeAll(): void {\n    // Remove all shipment channels\n    this.shipmentChannels.forEach(channel => {\n      supabase.removeChannel(channel);\n    });\n    this.shipmentChannels.clear();\n\n    // Remove profile channel\n    if (this.profileChannel) {\n      supabase.removeChannel(this.profileChannel);\n      this.profileChannel = null;\n    }\n\n    // Stop location tracking\n    this.stopLocationTracking();\n\n    // Remove location channel\n    if (this.locationChannel) {\n      supabase.removeChannel(this.locationChannel);\n      this.locationChannel = null;\n    }\n  }\n\n  /**\n   * Start tracking driver location for a specific shipment\n   * @param shipmentId The ID of the shipment being delivered\n   * @param driverId The ID of the driver\n   * @param onPermissionDenied Callback when location permissions are denied\n   */\n  async startLocationTracking(\n    shipmentId: string,\n    driverId: string,\n    onPermissionDenied?: () => void\n  ): Promise<boolean> {\n    try {\n      // Save the current shipment ID\n      this.currentShipmentId = shipmentId;\n\n      // Request location permissions\n      const { status } = await Location.requestForegroundPermissionsAsync();\n\n      if (status !== 'granted') {\n        console.log('Location permission denied');\n        if (onPermissionDenied) {\n          onPermissionDenied();\n        }\n        return false;\n      }\n\n      // Start watching position\n      this.locationUpdateInterval = setInterval(async () => {\n        try {\n          // Skip if no current shipment\n          if (!this.currentShipmentId) return;\n\n          // Get current location\n          const location = await Location.getCurrentPositionAsync({\n            accuracy: Location.Accuracy.High,\n          });\n\n          // Send to Supabase\n          await supabase.from('driver_locations').insert({\n            shipment_id: this.currentShipmentId,\n            driver_id: driverId,\n            latitude: location.coords.latitude,\n            longitude: location.coords.longitude,\n            heading: location.coords.heading || null,\n            speed: location.coords.speed || null,\n            accuracy: location.coords.accuracy || null,\n            location_timestamp: new Date().toISOString(),\n          });\n        } catch (error) {\n          console.error('Error updating location:', error);\n        }\n      }, 30000); // Update every 30 seconds\n\n      return true;\n    } catch (error) {\n      console.error('Error setting up location tracking:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Stop tracking driver location\n   */\n  stopLocationTracking(): void {\n    if (this.locationUpdateInterval) {\n      clearInterval(this.locationUpdateInterval);\n      this.locationUpdateInterval = null;\n    }\n    this.currentShipmentId = null;\n  }\n\n  /**\n   * Subscribe to driver location updates for a specific shipment\n   * This is used by clients to track the driver's location\n   */\n  subscribeToDriverLocation(\n    shipmentId: string,\n    onLocationUpdate: (location: DriverLocation) => void\n  ): RealtimeChannel {\n    if (this.locationChannel) {\n      supabase.removeChannel(this.locationChannel);\n    }\n\n    this.locationChannel = supabase\n      .channel(`driver-location:${shipmentId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'driver_locations',\n          filter: `shipment_id=eq.${shipmentId}`,\n        },\n        payload => {\n          console.log('Driver location update:', payload);\n          onLocationUpdate(payload.new as DriverLocation);\n        }\n      )\n      .subscribe();\n\n    return this.locationChannel;\n  }\n\n  /**\n   * Unsubscribe from driver location updates\n   */\n  unsubscribeFromDriverLocation(): void {\n    if (this.locationChannel) {\n      supabase.removeChannel(this.locationChannel);\n      this.locationChannel = null;\n    }\n  }\n}\n\n// Export singleton instance\nexport const realtimeService = RealtimeService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/services/applicationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/services/paymentApiTest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/services/paymentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/services/shipmentService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrackingEventType' is defined but never used.","line":6,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'customerDetails' is assigned a value but never used.","line":134,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used.","line":403,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":403,"endColumn":27}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../lib/supabase';\nimport { BookingFormData } from '../context/BookingContext';\nimport { Database } from '../lib/database.types';\n\n// Define tracking event type based on database type\ntype TrackingEventType = Database['public']['Enums']['tracking_event_type'];\n\n/**\n * Interface for creating a new shipment\n * Note: client_id is NOT included here as it should always be derived from\n * the authenticated user's session for security reasons\n */\nexport interface CreateShipmentData {\n  title: string;\n  description?: string;\n  pickup_address: string;\n  pickup_notes?: string;\n  delivery_address: string;\n  delivery_notes?: string;\n  weight_kg?: number;\n  dimensions_cm?: {\n    length: number;\n    width: number;\n    height: number;\n  };\n  item_value?: number;\n  is_fragile?: boolean;\n  estimated_distance_km?: number;\n  estimated_price: number;\n  status?: string; // Optionally allow status to be set\n}\n\nexport class ShipmentService {\n  /**\n   * Create a new shipment in Supabase\n   */\n  static async createShipment(data: CreateShipmentData, userId: string) {\n    try {\n      console.log(\n        'ShipmentService.createShipment - Starting with userId:',\n        userId\n      );\n      console.log(\n        'ShipmentService.createShipment - Complete payload:',\n        JSON.stringify(data)\n      );\n\n      // Verify auth state before insert\n      const { data: authData, error: authError } =\n        await supabase.auth.getSession();\n      if (authError) {\n        console.error(\n          'Authentication error before shipment insert:',\n          authError\n        );\n        throw new Error(`Authentication failed: ${authError.message}`);\n      }\n\n      console.log('Current auth session:', JSON.stringify(authData));\n      if (!authData.session) {\n        throw new Error(\n          'No active session found - user must be logged in to create shipments'\n        );\n      }\n\n      console.log(\n        `Session user ID: ${authData.session.user.id}, Using client_id: ${userId}`\n      );\n      if (authData.session.user.id !== userId) {\n        console.warn('Warning: Session user ID does not match provided userId');\n      }\n\n      // Create insert payload with client_id explicitly set to the session user's ID\n      const insertPayload = {\n        client_id: authData.session.user.id, // Always use the authenticated user's ID\n        status: 'pending',\n        title: data.title,\n        description: data.description,\n        pickup_address: data.pickup_address,\n        pickup_notes: data.pickup_notes,\n        delivery_address: data.delivery_address,\n        delivery_notes: data.delivery_notes,\n        weight_kg: data.weight_kg,\n        dimensions_cm: data.dimensions_cm,\n        item_value: data.item_value,\n        is_fragile: data.is_fragile || false,\n        estimated_distance_km: data.estimated_distance_km,\n        estimated_price: data.estimated_price,\n      };\n      console.log('Insert payload:', JSON.stringify(insertPayload));\n\n      // Perform the insert with the verified payload\n      const { data: shipment, error } = await supabase\n        .from('shipments')\n        .insert([insertPayload])\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error creating shipment in Supabase:', error);\n        // Attempt to diagnose RLS issues\n        if (error.code === '42501') {\n          console.error(\n            'Row-level security policy violation - this is likely a permission issue:'\n          );\n          console.error('1. Verify the user is authenticated');\n          console.error(\n            '2. Verify the RLS policy allows insert where client_id = auth.uid()'\n          );\n          console.error(\n            '3. Verify auth.uid() matches the client_id being inserted:',\n            insertPayload.client_id\n          );\n        }\n        throw error;\n      }\n\n      console.log('Shipment created successfully:', shipment);\n      return shipment;\n    } catch (error) {\n      console.error('ShipmentService.createShipment error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Convert BookingFormData to CreateShipmentData\n   */\n  static convertBookingToShipment(\n    bookingData: BookingFormData,\n    estimatedPrice: number = 250\n  ): CreateShipmentData {\n    const {\n      customerDetails,\n      vehicleInformation,\n      pickupDetails,\n      deliveryDetails,\n      towingTransport,\n    } = bookingData;\n\n    // Create a descriptive title and description\n    const vehicleDescription =\n      `${vehicleInformation.year || ''} ${vehicleInformation.make || ''} ${vehicleInformation.model || ''}`.trim();\n    const title = vehicleDescription || 'Vehicle Transport';\n\n    const description = [\n      vehicleDescription && `Vehicle: ${vehicleDescription}`,\n      vehicleInformation.vin && `VIN: ${vehicleInformation.vin}`,\n      vehicleInformation.licensePlate &&\n        `License: ${vehicleInformation.licensePlate}`,\n      vehicleInformation.conditionNotes &&\n        `Condition: ${vehicleInformation.conditionNotes}`,\n      towingTransport.operability &&\n        `Operability: ${towingTransport.operability}`,\n      deliveryDetails.specialInstructions &&\n        `Instructions: ${deliveryDetails.specialInstructions}`,\n    ]\n      .filter(Boolean)\n      .join('\\n');\n\n    // Combine pickup and delivery notes\n    const pickupNotes = [\n      pickupDetails.date && `Pickup Date: ${pickupDetails.date}`,\n      pickupDetails.time && `Pickup Time: ${pickupDetails.time}`,\n      pickupDetails.contactPerson && `Contact: ${pickupDetails.contactPerson}`,\n      pickupDetails.contactPhone && `Phone: ${pickupDetails.contactPhone}`,\n    ]\n      .filter(Boolean)\n      .join('\\n');\n\n    const deliveryNotes = [\n      deliveryDetails.date && `Delivery Date: ${deliveryDetails.date}`,\n      deliveryDetails.time && `Delivery Time: ${deliveryDetails.time}`,\n      deliveryDetails.contactPerson &&\n        `Contact: ${deliveryDetails.contactPerson}`,\n      deliveryDetails.contactPhone && `Phone: ${deliveryDetails.contactPhone}`,\n      deliveryDetails.specialInstructions &&\n        `Instructions: ${deliveryDetails.specialInstructions}`,\n    ]\n      .filter(Boolean)\n      .join('\\n');\n\n    return {\n      title,\n      description: description || undefined,\n      pickup_address: pickupDetails.address || '',\n      pickup_notes: pickupNotes || undefined,\n      delivery_address: deliveryDetails.address || '',\n      delivery_notes: deliveryNotes || undefined,\n      estimated_price: estimatedPrice,\n      is_fragile: towingTransport.equipmentNeeds?.includes('fragile') || false,\n    };\n  }\n\n  /**\n   * Get shipments for a specific client\n   */\n  static async getClientShipments(clientId: string, status?: string[]) {\n    try {\n      let query = supabase\n        .from('shipments')\n        .select('*')\n        .eq('client_id', clientId)\n        .order('created_at', { ascending: false });\n\n      if (status && status.length > 0) {\n        query = query.in('status', status);\n      }\n\n      const { data, error } = await query;\n\n      if (error) {\n        console.error('Error fetching client shipments:', error);\n        throw error;\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('ShipmentService.getClientShipments error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get available shipments for drivers\n   * @param driverId Optional driver ID to filter out jobs they've already applied for\n   */\n  static async getAvailableShipments(driverId?: string) {\n    try {\n      console.log('Fetching available shipments...');\n\n      // Get all pending shipments without a driver assigned\n      const { data: pendingShipments, error } = await supabase\n        .from('shipments')\n        .select('*')\n        .eq('status', 'pending')\n        .is('driver_id', null)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Error fetching available shipments:', error);\n        throw error;\n      }\n\n      // If no driver ID provided, return all pending shipments\n      if (!driverId) {\n        console.log(\n          `Found ${pendingShipments?.length || 0} available shipments`\n        );\n        return pendingShipments || [];\n      }\n\n      // If driver ID provided, filter out shipments they've already applied for\n      console.log(`Checking applications for driver ${driverId}`);\n      const { data: driverApplications, error: appsError } = await supabase\n        .from('job_applications')\n        .select('shipment_id')\n        .eq('driver_id', driverId);\n\n      if (appsError) {\n        console.error('Error fetching driver applications:', appsError);\n        // Continue with all shipments if we can't get applications\n        return pendingShipments || [];\n      }\n\n      // Create a set of shipment IDs the driver has already applied for\n      const appliedShipmentIds = new Set(\n        driverApplications?.map(app => app.shipment_id) || []\n      );\n\n      // Filter out shipments the driver has already applied for\n      const availableShipments =\n        pendingShipments?.filter(\n          shipment => !appliedShipmentIds.has(shipment.id)\n        ) || [];\n\n      console.log(\n        `Found ${availableShipments.length} available shipments after filtering out ${appliedShipmentIds.size} applied jobs`\n      );\n\n      // Debug: also check all shipments to see their current state\n      const { data: allShipments, error: allError } = await supabase\n        .from('shipments')\n        .select('id, status, driver_id, title')\n        .order('created_at', { ascending: false });\n\n      if (!allError && allShipments) {\n        console.log(\n          'DEBUG - All shipments state:',\n          allShipments.map(s => ({\n            id: s.id,\n            status: s.status,\n            driver_id: s.driver_id ? 'assigned' : 'unassigned',\n            title: s.title,\n          }))\n        );\n      }\n\n      return availableShipments;\n    } catch (error) {\n      console.error('ShipmentService.getAvailableShipments error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Apply for a shipment (driver action) - creates job application only, does not assign\n   */\n  static async applyForShipment(shipmentId: string, driverId: string) {\n    try {\n      // Validate inputs\n      if (!shipmentId || shipmentId === 'null' || shipmentId === 'undefined') {\n        throw new Error('Invalid shipment ID provided');\n      }\n\n      if (!driverId || driverId === 'null' || driverId === 'undefined') {\n        throw new Error('Invalid driver ID provided');\n      }\n\n      console.log('ShipmentService: Applying for shipment:', {\n        shipmentId,\n        driverId,\n      });\n\n      // Use the stored procedure for safer application handling\n      const { data: result, error: applicationError } = await supabase.rpc(\n        'apply_for_shipment',\n        {\n          p_shipment_id: shipmentId,\n          p_driver_id: driverId,\n        }\n      );\n\n      if (applicationError) {\n        console.error('Error applying for shipment:', applicationError);\n        throw applicationError;\n      }\n\n      console.log('ShipmentService: Application result:', result);\n\n      if (result.message && result.message.includes('already applied')) {\n        console.log(\n          `ShipmentService: Driver ${driverId} has already applied for shipment ${shipmentId}`\n        );\n      } else {\n        console.log('ShipmentService: Application submitted successfully');\n      }\n\n      return result;\n    } catch (error) {\n      console.error('ShipmentService.applyForShipment error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Assign a driver to a shipment (admin action)\n   */\n  static async assignDriverToShipment(shipmentId: string, driverId: string) {\n    try {\n      // Validate inputs\n      if (!shipmentId || shipmentId === 'null' || shipmentId === 'undefined') {\n        throw new Error('Invalid shipment ID provided');\n      }\n\n      if (!driverId || driverId === 'null' || driverId === 'undefined') {\n        throw new Error('Invalid driver ID provided');\n      }\n\n      console.log('Assigning driver to shipment:', { shipmentId, driverId });\n\n      // Check if shipment exists and is still available\n      const { data: shipment, error: checkError } = await supabase\n        .from('shipments')\n        .select('driver_id, status')\n        .eq('id', shipmentId)\n        .single();\n\n      if (checkError) {\n        console.error('Error checking shipment:', checkError);\n        throw checkError;\n      }\n\n      if (!shipment) {\n        throw new Error('Shipment not found');\n      }\n\n      console.log('Current shipment state:', shipment);\n\n      if (shipment.driver_id && shipment.driver_id !== null) {\n        throw new Error('This shipment has already been assigned to a driver');\n      }\n\n      if (shipment.status !== 'pending') {\n        console.warn('Shipment status is not pending:', shipment.status);\n        throw new Error(\n          `This shipment cannot be assigned. Current status: ${shipment.status}`\n        );\n      }\n\n      // Use the new stored procedure to handle all the assignment logic\n      console.log('Using assign_driver_to_shipment stored procedure...');\n      const { data: result, error: assignError } = await supabase.rpc(\n        'assign_driver_to_shipment',\n        {\n          p_shipment_id: shipmentId,\n          p_driver_id: driverId,\n        }\n      );\n\n      if (assignError) {\n        console.error(\n          'Error assigning driver via stored procedure:',\n          assignError\n        );\n        throw assignError;\n      }\n\n      // Fetch the updated shipment to return\n      const { data: updatedShipment, error: fetchError } = await supabase\n        .from('shipments')\n        .select('*')\n        .eq('id', shipmentId)\n        .single();\n\n      if (fetchError) {\n        console.error('Error fetching updated shipment:', fetchError);\n        throw fetchError;\n      }\n\n      console.log('Driver assigned successfully:', updatedShipment);\n      return updatedShipment;\n    } catch (error) {\n      console.error('ShipmentService.assignDriverToShipment error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get drivers who have applied for a specific shipment\n   */\n  static async getShipmentApplicants(shipmentId: string) {\n    try {\n      const { data, error } = await supabase\n        .from('job_applications')\n        .select(\n          `\n          *,\n          profiles:driver_id (\n            id,\n            first_name,\n            last_name,\n            email,\n            phone,\n            profile_picture_url\n          )\n        `\n        )\n        .eq('shipment_id', shipmentId)\n        .eq('status', 'pending')\n        .order('applied_at', { ascending: true });\n\n      if (error) {\n        console.error('Error fetching shipment applicants:', error);\n        throw error;\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('ShipmentService.getShipmentApplicants error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Debug function to check shipment state and potentially reset it\n   */\n  static async debugShipmentState(shipmentId: string) {\n    try {\n      const { data: shipment, error } = await supabase\n        .from('shipments')\n        .select('*')\n        .eq('id', shipmentId)\n        .single();\n\n      if (error) {\n        console.error('Error fetching shipment for debug:', error);\n        throw error;\n      }\n\n      console.log('DEBUG - Current shipment state:', {\n        id: shipment.id,\n        status: shipment.status,\n        driver_id: shipment.driver_id,\n        client_id: shipment.client_id,\n        title: shipment.title,\n        created_at: shipment.created_at,\n        updated_at: shipment.updated_at,\n      });\n\n      return shipment;\n    } catch (error) {\n      console.error('ShipmentService.debugShipmentState error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Reset a shipment back to pending status (admin function for debugging)\n   */\n  static async resetShipmentToPending(shipmentId: string) {\n    try {\n      console.log('Resetting shipment to pending status:', shipmentId);\n\n      const { data: updatedShipment, error } = await supabase\n        .from('shipments')\n        .update({\n          driver_id: null,\n          status: 'pending',\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', shipmentId)\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error resetting shipment:', error);\n        throw error;\n      }\n\n      // Also reset any job applications\n      const { error: resetApplicationsError } = await supabase\n        .from('job_applications')\n        .update({\n          status: 'pending',\n          updated_at: new Date().toISOString(),\n        })\n        .eq('shipment_id', shipmentId);\n\n      if (resetApplicationsError) {\n        console.error(\n          'Error resetting job applications:',\n          resetApplicationsError\n        );\n      }\n\n      console.log('Shipment reset successfully:', updatedShipment);\n      return updatedShipment;\n    } catch (error) {\n      console.error('ShipmentService.resetShipmentToPending error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all available drivers in the system\n   */\n  static async getAllAvailableDrivers() {\n    try {\n      const { data: drivers, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('role', 'driver');\n\n      if (error) {\n        console.error('Error fetching available drivers:', error);\n        return [];\n      }\n\n      return drivers || [];\n    } catch (error) {\n      console.error('ShipmentService.getAllAvailableDrivers error:', error);\n      return [];\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/types/app.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/types/shipment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/types/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/utils/MessageUtil.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":42,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Alert } from 'react-native';\nimport { supabase } from '../supabase';\nimport NetworkUtil from './NetworkUtil';\n\n/**\n * Utility functions for handling messaging in the app\n */\nexport const MessageUtil = {\n  /**\n   * Send a message securely, handling potential RLS and network errors\n   *\n   * @param shipmentId - The ID of the shipment this message is related to\n   * @param senderId - The user ID of the sender\n   * @param content - The message content\n   * @param receiverId - Optional receiver ID\n   * @returns Object containing success status and error (if any)\n   */\n  async sendMessage(\n    shipmentId: string,\n    senderId: string,\n    content: string,\n    receiverId?: string\n  ) {\n    try {\n      // Ensure we have network connectivity\n      const isConnected = await NetworkUtil.isConnected();\n      if (!isConnected) {\n        Alert.alert(\n          'No Internet Connection',\n          'Please check your internet connection and try again.'\n        );\n        return { success: false, error: 'No internet connection' };\n      }\n\n      // Trim message content\n      const trimmedContent = content.trim();\n      if (!trimmedContent) {\n        return { success: false, error: 'Message cannot be empty' };\n      }\n\n      // Try to use the RPC function for better security and validation\n      const { data, error: rpcError } = await supabase.rpc('send_message', {\n        p_shipment_id: shipmentId,\n        p_content: trimmedContent,\n        p_receiver_id: receiverId || null,\n      });\n\n      // If RPC function doesn't exist, fall back to direct insert\n      if (rpcError && rpcError.code === '42883') {\n        // Function doesn't exist\n        const { error } = await supabase.from('messages').insert({\n          shipment_id: shipmentId,\n          sender_id: senderId,\n          receiver_id: receiverId || null,\n          content: trimmedContent,\n          created_at: new Date().toISOString(),\n        });\n\n        if (error) {\n          // Handle row-level security policy violation\n          if (error.code === '42501') {\n            // Permission denied\n            Alert.alert(\n              'Permission Error',\n              'You do not have permission to send this message. This might be because you are not associated with this shipment.'\n            );\n          } else if (error.code === '23503') {\n            // Foreign key violation\n            Alert.alert(\n              'Error',\n              'This message cannot be sent because the shipment or user no longer exists.'\n            );\n          } else {\n            Alert.alert('Error', `Failed to send message: ${error.message}`);\n          }\n          return { success: false, error: error.message };\n        }\n      } else if (rpcError) {\n        Alert.alert('Error', `Failed to send message: ${rpcError.message}`);\n        return { success: false, error: rpcError.message };\n      }\n\n      return { success: true, error: null };\n    } catch (error) {\n      console.error('Error sending message:', error);\n      Alert.alert(\n        'Error',\n        'An unexpected error occurred while sending your message.'\n      );\n      return { success: false, error: 'Unexpected error' };\n    }\n  },\n\n  /**\n   * Mark a message as read\n   *\n   * @param messageId - The ID of the message to mark as read\n   * @param userId - The user ID of the reader\n   */\n  async markAsRead(messageId: string, userId: string) {\n    try {\n      const { error } = await supabase.rpc('mark_message_as_read', {\n        p_message_id: messageId,\n        p_user_id: userId,\n      });\n\n      if (error) {\n        console.error('Error marking message as read:', error);\n      }\n    } catch (error) {\n      console.error('Error marking message as read:', error);\n    }\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/utils/NetworkUtil.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Platform' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[904,907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[904,907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1416,1419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1416,1419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2434,2437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2434,2437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Alert, Platform } from 'react-native';\nimport NetInfo from '@react-native-community/netinfo';\n\n/**\n * A utility class for handling network-related operations and errors\n */\nclass NetworkUtil {\n  /**\n   * Check if the device has an active internet connection\n   */\n  static async isConnected(): Promise<boolean> {\n    const state = await NetInfo.fetch();\n    return state.isConnected === true;\n  }\n\n  /**\n   * Wrapper function to execute a network request with error handling\n   * @param requestFn - The async function that performs the network request\n   * @param errorMessage - Custom error message to show on failure\n   * @param silent - If true, doesn't show error alerts\n   */\n  static async executeRequest<T>(\n    requestFn: () => Promise<T>,\n    errorMessage = 'Network request failed. Please check your connection and try again.',\n    silent = false\n  ): Promise<{ data: T | null; error: any }> {\n    try {\n      // Check connectivity first\n      const isConnected = await this.isConnected();\n      if (!isConnected) {\n        if (!silent) {\n          Alert.alert(\n            'No Internet Connection',\n            'Please check your internet connection and try again.'\n          );\n        }\n        return { data: null, error: new Error('No internet connection') };\n      }\n\n      // Execute the request\n      const data = await requestFn();\n      return { data, error: null };\n    } catch (error: any) {\n      console.error('Network request failed:', error);\n\n      // Handle different types of errors\n      if (!silent) {\n        if (error.message === 'Network request failed') {\n          Alert.alert('Connection Error', errorMessage);\n        } else if (error.status === 401 || error.code === 'PGRST301') {\n          Alert.alert(\n            'Authentication Error',\n            'Your session has expired. Please log in again.'\n          );\n        } else if (error.code && error.message) {\n          Alert.alert('Error', `${error.message} (${error.code})`);\n        } else {\n          Alert.alert('Error', errorMessage);\n        }\n      }\n\n      return { data: null, error };\n    }\n  }\n\n  /**\n   * Retry a function with exponential backoff\n   * @param fn - Function to retry\n   * @param maxRetries - Maximum number of retries\n   * @param baseDelay - Base delay in milliseconds\n   */\n  static async retry<T>(\n    fn: () => Promise<T>,\n    maxRetries = 3,\n    baseDelay = 1000\n  ): Promise<T> {\n    let lastError: any;\n\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error;\n        // Wait with exponential backoff\n        await new Promise(resolve =>\n          setTimeout(resolve, baseDelay * Math.pow(2, i))\n        );\n      }\n    }\n\n    throw lastError;\n  }\n}\n\nexport default NetworkUtil;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/utils/ShipmentUtil.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/utils/environment.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[622,625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[622,625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Constants from 'expo-constants';\n\n/**\n * Environment configuration for DriveDrop mobile app\n */\n\ninterface Environment {\n  apiUrl: string;\n  supabaseUrl: string;\n  supabaseAnonKey: string;\n  googleMapsApiKey: string;\n  stripePublishableKey: string;\n}\n\n// Change this to your computer's LAN IP when testing on a real device!\nconst DEV_API_URL = 'http://192.168.1.64:3000'; // <--- YOUR IP HERE\n\nconst getEnvironment = (): Environment => {\n  // Use type assertion to access releaseChannel since it's available at runtime\n  // but not properly typed in the ExpoConfig type\n  const expoConfig = Constants.expoConfig as any;\n  const releaseChannel = expoConfig?.releaseChannel;\n\n  // Default to development if no release channel\n  if (!releaseChannel || releaseChannel === 'default') {\n    return {\n      apiUrl: DEV_API_URL,\n      supabaseUrl: expoConfig?.extra?.supabaseUrl || '',\n      supabaseAnonKey: expoConfig?.extra?.supabaseAnonKey || '',\n      googleMapsApiKey: expoConfig?.extra?.googleMapsApiKey || '',\n      stripePublishableKey: expoConfig?.extra?.stripePublishableKey || '',\n    };\n  }\n\n  // Production environment\n  if (releaseChannel.indexOf('prod') !== -1) {\n    return {\n      apiUrl: 'https://api.drivedrop.com',\n      supabaseUrl: expoConfig?.extra?.supabaseUrl || '',\n      supabaseAnonKey: expoConfig?.extra?.supabaseAnonKey || '',\n      googleMapsApiKey: expoConfig?.extra?.googleMapsApiKey || '',\n      stripePublishableKey: expoConfig?.extra?.stripePublishableKey || '',\n    };\n  }\n\n  // Staging environment\n  if (releaseChannel.indexOf('staging') !== -1) {\n    return {\n      apiUrl: 'https://staging-api.drivedrop.com',\n      supabaseUrl: expoConfig?.extra?.supabaseUrl || '',\n      supabaseAnonKey: expoConfig?.extra?.supabaseAnonKey || '',\n      googleMapsApiKey: expoConfig?.extra?.googleMapsApiKey || '',\n      stripePublishableKey: expoConfig?.extra?.stripePublishableKey || '',\n    };\n  }\n\n  // Default to development if no match\n  return {\n    apiUrl: DEV_API_URL,\n    supabaseUrl: expoConfig?.extra?.supabaseUrl || '',\n    supabaseAnonKey: expoConfig?.extra?.supabaseAnonKey || '',\n    googleMapsApiKey: expoConfig?.extra?.googleMapsApiKey || '',\n    stripePublishableKey: expoConfig?.extra?.stripePublishableKey || '',\n  };\n};\n\nconst environment = getEnvironment();\n\nexport const getApiUrl = (): string => environment.apiUrl;\nexport const getSupabaseUrl = (): string => environment.supabaseUrl;\nexport const getSupabaseAnonKey = (): string => environment.supabaseAnonKey;\nexport const getGoogleMapsApiKey = (): string => environment.googleMapsApiKey;\nexport const getStripePublishableKey = (): string =>\n  environment.stripePublishableKey;\n\nexport default environment;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/utils/formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/utils/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[123,126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[123,126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[223,226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[223,226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[325,328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[325,328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[429,432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[429,432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Simple logger utility for consistent logging across the app\n */\nconst logger = {\n  info: (message: string, ...args: any[]) => {\n    console.log(`[INFO] ${message}`, ...args);\n  },\n\n  warn: (message: string, ...args: any[]) => {\n    console.warn(`[WARN] ${message}`, ...args);\n  },\n\n  error: (message: string, ...args: any[]) => {\n    console.error(`[ERROR] ${message}`, ...args);\n  },\n\n  debug: (message: string, ...args: any[]) => {\n    if (__DEV__) {\n      console.debug(`[DEBUG] ${message}`, ...args);\n    }\n  },\n};\n\nexport default logger;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/utils/maps.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1441,1444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1441,1444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as Location from 'expo-location';\nimport { Alert } from 'react-native';\n\n/**\n * Request location permissions and get the current position\n * @returns {Promise<Location.LocationObject | null>} The current location or null if there was an error\n */\nexport const getCurrentLocation =\n  async (): Promise<Location.LocationObject | null> => {\n    try {\n      const { status } = await Location.requestForegroundPermissionsAsync();\n\n      if (status !== 'granted') {\n        Alert.alert(\n          'Permission Required',\n          'Location permission is required to use this feature.',\n          [{ text: 'OK' }]\n        );\n        return null;\n      }\n\n      const location = await Location.getCurrentPositionAsync({\n        accuracy: Location.Accuracy.High,\n      });\n\n      return location;\n    } catch (error) {\n      console.error('Error getting location:', error);\n      Alert.alert(\n        'Location Error',\n        'Unable to get your current location. Please try again.',\n        [{ text: 'OK' }]\n      );\n      return null;\n    }\n  };\n\n/**\n * Calculate the route between two points\n * @param {number} startLat Starting latitude\n * @param {number} startLng Starting longitude\n * @param {number} endLat Ending latitude\n * @param {number} endLng Ending longitude\n * @returns {Promise<any>} Route information\n */\nexport const getRoute = async (\n  startLat: number,\n  startLng: number,\n  endLat: number,\n  endLng: number\n): Promise<any> => {\n  try {\n    // This would typically call a routing service like Google Directions API or Mapbox Directions API\n    // For now, we'll just return a dummy response\n    return {\n      distance: { text: '10 km', value: 10000 },\n      duration: { text: '15 mins', value: 900 },\n      steps: [\n        {\n          distance: { text: '5 km', value: 5000 },\n          duration: { text: '8 mins', value: 480 },\n          start_location: { lat: startLat, lng: startLng },\n          end_location: {\n            lat: (startLat + endLat) / 2,\n            lng: (startLng + endLng) / 2,\n          },\n        },\n        {\n          distance: { text: '5 km', value: 5000 },\n          duration: { text: '7 mins', value: 420 },\n          start_location: {\n            lat: (startLat + endLat) / 2,\n            lng: (startLng + endLng) / 2,\n          },\n          end_location: { lat: endLat, lng: endLng },\n        },\n      ],\n    };\n  } catch (error) {\n    console.error('Error getting route:', error);\n    throw error;\n  }\n};\n\n/**\n * Generate a random location near a center point\n * @param {number} centerLat Center latitude\n * @param {number} centerLng Center longitude\n * @param {number} radiusInKm Radius in kilometers\n * @returns {Object} Random location\n */\nexport const getRandomLocation = (\n  centerLat: number,\n  centerLng: number,\n  radiusInKm: number = 5\n): { latitude: number; longitude: number } => {\n  const y0 = centerLat;\n  const x0 = centerLng;\n  const rd = radiusInKm / 111.32; // Convert km to degrees\n\n  const u = Math.random();\n  const v = Math.random();\n\n  const w = rd * Math.sqrt(u);\n  const t = 2 * Math.PI * v;\n  const x = w * Math.cos(t);\n  const y = w * Math.sin(t);\n\n  // Adjust the x-coordinate for the shrinking of the east-west distances\n  const xp = x / Math.cos(y0);\n\n  const newlat = y + y0;\n  const newlon = xp + x0;\n\n  return {\n    latitude: newlat,\n    longitude: newlon,\n  };\n};\n\n/**\n * Formats coordinates for display\n * @param {number} coordinate Latitude or longitude\n * @returns {string} Formatted coordinate\n */\nexport const formatCoordinate = (coordinate: number): string => {\n  return coordinate.toFixed(6);\n};\n\n/**\n * Calculate the distance between two points in kilometers\n * @param {number} lat1 First latitude\n * @param {number} lon1 First longitude\n * @param {number} lat2 Second latitude\n * @param {number} lon2 Second longitude\n * @returns {number} Distance in kilometers\n */\nexport const calculateDistance = (\n  lat1: number,\n  lon1: number,\n  lat2: number,\n  lon2: number\n): number => {\n  const R = 6371; // Radius of the earth in km\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(lat1)) *\n      Math.cos(deg2rad(lat2)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // Distance in km\n  return d;\n};\n\n/**\n * Convert degrees to radians\n * @param {number} deg Degrees\n * @returns {number} Radians\n */\nconst deg2rad = (deg: number): number => {\n  return deg * (Math.PI / 180);\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/utils/paymentApiTest.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":168,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":232,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":232,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Payment API Diagnostic Utility\n * This utility helps test and diagnose issues with the payment API\n */\n\nimport NetInfo from '@react-native-community/netinfo';\nimport { getApiUrl } from '../utils/environment';\nimport { auth } from '../lib/supabase';\n\ntype PaymentApiTestResult = {\n  success: boolean;\n  message: string;\n  details?: any;\n  timestamp: string;\n};\n\n/**\n * Helper function to make authenticated requests\n */\nasync function fetchWithAuthHelper(\n  url: string,\n  options: RequestInit = {}\n): Promise<Response> {\n  // Get the user's JWT token\n  const {\n    data: { session },\n  } = await auth.getSession();\n\n  if (!session) {\n    throw new Error('No authenticated session found');\n  }\n\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${session.access_token}`,\n    ...options.headers,\n  };\n\n  return fetch(url, {\n    ...options,\n    headers,\n  });\n}\n\n/**\n * Comprehensive payment API test utility\n * Tests network connectivity, API access, and Stripe services\n */\nexport const paymentApiTest = {\n  /**\n   * Check basic network connectivity\n   */\n  async checkNetworkConnectivity(): Promise<PaymentApiTestResult> {\n    try {\n      const netInfo = await NetInfo.fetch();\n\n      if (!netInfo.isConnected) {\n        return {\n          success: false,\n          message: 'Device is not connected to the internet',\n          details: netInfo,\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      return {\n        success: true,\n        message: 'Device has internet connectivity',\n        details: {\n          type: netInfo.type,\n          isConnected: netInfo.isConnected,\n          isInternetReachable: netInfo.isInternetReachable,\n        },\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Failed to check network connectivity',\n        details: { error },\n        timestamp: new Date().toISOString(),\n      };\n    }\n  },\n\n  /**\n   * Check API server connectivity\n   */\n  async checkApiConnectivity(): Promise<PaymentApiTestResult> {\n    try {\n      const apiUrl = getApiUrl();\n\n      if (!apiUrl) {\n        return {\n          success: false,\n          message: 'API URL is not configured',\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      // Try to connect to the API health endpoint\n      const response = await fetch(`${apiUrl}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        return {\n          success: false,\n          message: `API server returned error: ${response.status}`,\n          details: {\n            status: response.status,\n            statusText: response.statusText,\n          },\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      const data = await response.json();\n\n      return {\n        success: true,\n        message: 'API server is reachable',\n        details: data,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Failed to connect to API server',\n        details: {\n          error: error instanceof Error ? error.message : String(error),\n        },\n        timestamp: new Date().toISOString(),\n      };\n    }\n  },\n\n  /**\n   * Check authentication and payment API access\n   */\n  async checkPaymentApiAccess(): Promise<PaymentApiTestResult> {\n    try {\n      const apiUrl = getApiUrl();\n\n      if (!apiUrl) {\n        return {\n          success: false,\n          message: 'API URL is not configured',\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      // Try to connect to a protected payments endpoint\n      const response = await fetchWithAuthHelper(\n        `${apiUrl}/api/v1/payments/status`,\n        {\n          method: 'GET',\n        }\n      );\n\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          errorData = { error: 'Could not parse error response' };\n        }\n\n        return {\n          success: false,\n          message: `Payment API access failed: ${response.status}`,\n          details: {\n            status: response.status,\n            statusText: response.statusText,\n            data: errorData,\n          },\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      const data = await response.json();\n\n      return {\n        success: true,\n        message: 'Payment API is accessible',\n        details: data,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Failed to access payment API',\n        details: {\n          error: error instanceof Error ? error.message : String(error),\n          stack: error instanceof Error ? error.stack : undefined,\n        },\n        timestamp: new Date().toISOString(),\n      };\n    }\n  },\n\n  /**\n   * Check Stripe service availability\n   */\n  async checkStripeServiceStatus(): Promise<PaymentApiTestResult> {\n    try {\n      const apiUrl = getApiUrl();\n\n      if (!apiUrl) {\n        return {\n          success: false,\n          message: 'API URL is not configured',\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      // Try to connect to a dedicated Stripe connectivity check endpoint\n      const response = await fetchWithAuthHelper(\n        `${apiUrl}/api/v1/payments/stripe-status`,\n        {\n          method: 'GET',\n        }\n      );\n\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          errorData = { error: 'Could not parse error response' };\n        }\n\n        return {\n          success: false,\n          message: `Stripe service check failed: ${response.status}`,\n          details: {\n            status: response.status,\n            statusText: response.statusText,\n            data: errorData,\n          },\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      const data = await response.json();\n\n      return {\n        success: true,\n        message: 'Stripe service is available',\n        details: data,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Failed to check Stripe service',\n        details: {\n          error: error instanceof Error ? error.message : String(error),\n        },\n        timestamp: new Date().toISOString(),\n      };\n    }\n  },\n\n  /**\n   * Run all payment diagnostic tests\n   */\n  async runAllTests(): Promise<{\n    networkTest: PaymentApiTestResult;\n    apiTest: PaymentApiTestResult;\n    paymentApiTest: PaymentApiTestResult;\n    stripeTest: PaymentApiTestResult;\n    summary: string;\n  }> {\n    const networkTest = await this.checkNetworkConnectivity();\n    const apiTest = await this.checkApiConnectivity();\n    const paymentApiTest = await this.checkPaymentApiAccess();\n    const stripeTest = await this.checkStripeServiceStatus();\n\n    // Generate summary\n    const allTests = [networkTest, apiTest, paymentApiTest, stripeTest];\n    const passedCount = allTests.filter(test => test.success).length;\n\n    let summary = `Payment API Diagnostic Summary: ${passedCount}/${allTests.length} tests passed.\\n`;\n\n    if (!networkTest.success) {\n      summary += '❌ Network connectivity issue detected.\\n';\n    }\n\n    if (networkTest.success && !apiTest.success) {\n      summary += '❌ API server unreachable despite network connectivity.\\n';\n    }\n\n    if (apiTest.success && !paymentApiTest.success) {\n      summary +=\n        '❌ Payment API access failed despite API server being reachable (possible auth issue).\\n';\n    }\n\n    if (paymentApiTest.success && !stripeTest.success) {\n      summary +=\n        '❌ Stripe service unavailable despite payment API being accessible.\\n';\n    }\n\n    if (allTests.every(test => test.success)) {\n      summary += '✅ All payment services are operational.\\n';\n    }\n\n    return {\n      networkTest,\n      apiTest,\n      paymentApiTest,\n      stripeTest,\n      summary,\n    };\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/utils/storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/src/utils/validation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used.","line":11,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[605,608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[605,608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1973,1976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1973,1976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3131,3134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3131,3134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3168,3171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3168,3171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\n\ninterface Validator<T> {\n  (value: T): string | null;\n}\n\ninterface Validators<T> {\n  [key: string]: Validator<T[keyof T]>;\n}\n\ninterface FormErrors<T> {\n  [key: string]: string | null;\n}\n\ninterface UseFormValidationReturn<T> {\n  errors: FormErrors<T>;\n  validateField: (name: keyof T, value: T[keyof T]) => string | null;\n  validateForm: (data: T) => boolean;\n  setFieldError: (name: keyof T, error: string | null) => void;\n  clearErrors: () => void;\n}\n\n/**\n * Hook for handling form validation\n */\nexport function useFormValidation<T extends Record<string, any>>(\n  validators: Validators<T>\n): UseFormValidationReturn<T> {\n  const [errors, setErrors] = useState<FormErrors<T>>({});\n\n  const validateField = useCallback(\n    (name: keyof T, value: T[keyof T]): string | null => {\n      const validator = validators[name as string];\n      if (!validator) return null;\n\n      const error = validator(value);\n      setErrors(prev => ({ ...prev, [name]: error }));\n      return error;\n    },\n    [validators]\n  );\n\n  const validateForm = useCallback(\n    (data: T): boolean => {\n      const newErrors: FormErrors<T> = {};\n      let isValid = true;\n\n      Object.keys(validators).forEach(key => {\n        const validator = validators[key];\n        const value = data[key as keyof T];\n        const error = validator(value);\n\n        if (error) {\n          isValid = false;\n          newErrors[key] = error;\n        } else {\n          newErrors[key] = null;\n        }\n      });\n\n      setErrors(newErrors);\n      return isValid;\n    },\n    [validators]\n  );\n\n  const setFieldError = useCallback((name: keyof T, error: string | null) => {\n    setErrors(prev => ({ ...prev, [name]: error }));\n  }, []);\n\n  const clearErrors = useCallback(() => {\n    setErrors({});\n  }, []);\n\n  return {\n    errors,\n    validateField,\n    validateForm,\n    setFieldError,\n    clearErrors,\n  };\n}\n\n// Common validators\nexport const required = (value: any): string | null => {\n  if (value === undefined || value === null || value === '') {\n    return 'This field is required';\n  }\n  return null;\n};\n\nexport const email = (value: string): string | null => {\n  if (!value) return null;\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(value)) {\n    return 'Please enter a valid email address';\n  }\n  return null;\n};\n\nexport const minLength =\n  (min: number) =>\n  (value: string): string | null => {\n    if (!value) return null;\n\n    if (value.length < min) {\n      return `Must be at least ${min} characters`;\n    }\n    return null;\n  };\n\nexport const maxLength =\n  (max: number) =>\n  (value: string): string | null => {\n    if (!value) return null;\n\n    if (value.length > max) {\n      return `Must be at most ${max} characters`;\n    }\n    return null;\n  };\n\nexport const phoneNumber = (value: string): string | null => {\n  if (!value) return null;\n\n  const phoneRegex = /^\\+?[0-9]{10,15}$/;\n  if (!phoneRegex.test(value.replace(/[\\s()-]/g, ''))) {\n    return 'Please enter a valid phone number';\n  }\n  return null;\n};\n\nexport const composeValidators =\n  (...validators: Array<(value: any) => string | null>) =>\n  (value: any): string | null => {\n    for (const validator of validators) {\n      const error = validator(value);\n      if (error) return error;\n    }\n    return null;\n  };\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/DriveDrop-Main/DriveDrop-Main/mobile/test-shipment-data.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
